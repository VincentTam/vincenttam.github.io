<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2014-06-16 17:34"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Blog 1</title>
<link>http://blogueun.wordpress.com</link>
<description>GNU/Linux</description>
<pubDate>Mon, 16 Jun 2014 17:34:33 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://blogueun.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>gnusupporter</wp:author_login>
  <wp:author_email>sere@live.hk</wp:author_email>
  <wp:author_display_name><![CDATA[GNU Supporter]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>91</wp:term_id>
  <wp:category_nicename>blogging</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[blogging]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>15230</wp:term_id>
  <wp:category_nicename>information-security</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[information security]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>8800</wp:term_id>
  <wp:category_nicename>latex</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[LaTeX]]></wp:cat_name>
  <wp:category_description><![CDATA[LaTeX &amp; typography]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>3383</wp:term_id>
  <wp:category_nicename>os</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[OS]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>196</wp:term_id>
  <wp:category_nicename>programming</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[programming]]></wp:cat_name>
  <wp:category_description><![CDATA[General programming priniciples only. For Vim's plugins like c.vim, go for "Vi(m)"]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>284212</wp:term_id>
  <wp:category_nicename>text-editing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[text editing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
  <wp:category_description><![CDATA[A post can have at most one category.
For multiple inheritance, use tags.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>18060</wp:term_id>
  <wp:category_nicename>vim</wp:category_nicename>
  <wp:category_parent>text-editing</wp:category_parent>
  <wp:cat_name><![CDATA[Vi(m)]]></wp:cat_name>
  <wp:category_description><![CDATA[All posts about the technical usage of Vim should be put here.
For convenience, those on Vi will also be here.
Posts on Vim's plugins will also be put here. 3 or more posts on the same plugin can be grouped into a subcategory.
For implementation of Vim (features) in other softwares, they should NOT be put here since there's already a lot of posts here.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>10640</wp:term_id>
  <wp:category_nicename>web-technologies</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[web technologies]]></wp:cat_name>
  <wp:category_description><![CDATA[Purely web technology.
For Vim plugins like UltraBlog.vim, go for "Vim".]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>3207</wp:term_id>
  <wp:category_nicename>cc</wp:category_nicename>
  <wp:category_parent>programming</wp:category_parent>
  <wp:cat_name><![CDATA[C/C++]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>11362</wp:term_id>
  <wp:category_nicename>emacs</wp:category_nicename>
  <wp:category_parent>text-editing</wp:category_parent>
  <wp:cat_name><![CDATA[Emacs]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>42899</wp:term_id>
  <wp:category_nicename>latex-suite</wp:category_nicename>
  <wp:category_parent>vim</wp:category_parent>
  <wp:cat_name><![CDATA[Latex-Suite]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>610</wp:term_id>
  <wp:category_nicename>linux</wp:category_nicename>
  <wp:category_parent>os</wp:category_parent>
  <wp:cat_name><![CDATA[Linux]]></wp:cat_name>
  <wp:category_description><![CDATA[Just a shorthand of GNU/Linux.
Technically stuff only. (e.g. apg, sed)
For GNU's principles, make another category for that.]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>15711688</wp:term_id>
  <wp:category_nicename>m-win</wp:category_nicename>
  <wp:category_parent>os</wp:category_parent>
  <wp:cat_name><![CDATA[M$ Win*]]></wp:cat_name>
  <wp:category_description><![CDATA[Usage of stuff specific on M$ Win*
(e.g. M$ Off*)]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>55318838</wp:term_id>
  <wp:category_nicename>mathjax</wp:category_nicename>
  <wp:category_parent>web-technologies</wp:category_parent>
  <wp:cat_name><![CDATA[MathJax]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>207912580</wp:term_id>
  <wp:category_nicename>online-code-highlighter</wp:category_nicename>
  <wp:category_parent>web-technologies</wp:category_parent>
  <wp:cat_name><![CDATA[online code highlighter]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>87195615</wp:term_id>
  <wp:category_nicename>ultrablog-vim</wp:category_nicename>
  <wp:category_parent>vim</wp:category_parent>
  <wp:cat_name><![CDATA[UltraBlog.vim]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>50917</wp:term_id>
  <wp:tag_slug>bat</wp:tag_slug>
  <wp:tag_name><![CDATA[.bat]]></wp:tag_name>
  <wp:tag_description><![CDATA[Win* batch files]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>212198576</wp:term_id>
  <wp:tag_slug>align-vim</wp:tag_slug>
  <wp:tag_name><![CDATA[Align.vim]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>119666</wp:term_id>
  <wp:tag_slug>apa</wp:tag_slug>
  <wp:tag_name><![CDATA[APA]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1230937</wp:term_id>
  <wp:tag_slug>apg</wp:tag_slug>
  <wp:tag_name><![CDATA[apg]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1635546</wp:term_id>
  <wp:tag_slug>biber</wp:tag_slug>
  <wp:tag_name><![CDATA[Biber]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14617192</wp:term_id>
  <wp:tag_slug>biblatex</wp:tag_slug>
  <wp:tag_name><![CDATA[BibLaTeX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>415984</wp:term_id>
  <wp:tag_slug>bibtex</wp:tag_slug>
  <wp:tag_name><![CDATA[BibTeX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>481</wp:term_id>
  <wp:tag_slug>blogger</wp:tag_slug>
  <wp:tag_name><![CDATA[Blogger]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3207</wp:term_id>
  <wp:tag_slug>cc</wp:tag_slug>
  <wp:tag_name><![CDATA[C/C++]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>136353581</wp:term_id>
  <wp:tag_slug>clang_complete</wp:tag_slug>
  <wp:tag_name><![CDATA[clang_complete]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3975963</wp:term_id>
  <wp:tag_slug>ctags</wp:tag_slug>
  <wp:tag_name><![CDATA[Ctags]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10469373</wp:term_id>
  <wp:tag_slug>ddrescue</wp:tag_slug>
  <wp:tag_name><![CDATA[ddrescue]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>51496010</wp:term_id>
  <wp:tag_slug>dislin</wp:tag_slug>
  <wp:tag_name><![CDATA[DISLIN]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>56047119</wp:term_id>
  <wp:tag_slug>dynamic-view</wp:tag_slug>
  <wp:tag_name><![CDATA[dynamic view]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11362</wp:term_id>
  <wp:tag_slug>emacs</wp:tag_slug>
  <wp:tag_name><![CDATA[Emacs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45</wp:term_id>
  <wp:tag_slug>firefox</wp:tag_slug>
  <wp:tag_name><![CDATA[Firefox]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28807271</wp:term_id>
  <wp:tag_slug>fuzzyfinder</wp:tag_slug>
  <wp:tag_name><![CDATA[FuzzyFinder]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1314806</wp:term_id>
  <wp:tag_slug>gist</wp:tag_slug>
  <wp:tag_name><![CDATA[Gist]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2279912</wp:term_id>
  <wp:tag_slug>google-drive</wp:tag_slug>
  <wp:tag_name><![CDATA[Google Drive]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29045671</wp:term_id>
  <wp:tag_slug>google-code-prettify</wp:tag_slug>
  <wp:tag_name><![CDATA[google-code-prettify]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>30016</wp:term_id>
  <wp:tag_slug>gpg</wp:tag_slug>
  <wp:tag_name><![CDATA[gpg]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>987490</wp:term_id>
  <wp:tag_slug>gvim</wp:tag_slug>
  <wp:tag_name><![CDATA[gVim]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>121479076</wp:term_id>
  <wp:tag_slug>highlight-js</wp:tag_slug>
  <wp:tag_name><![CDATA[highlight.js]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>31274</wp:term_id>
  <wp:tag_slug>imagemagick</wp:tag_slug>
  <wp:tag_name><![CDATA[ImageMagick]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5430070</wp:term_id>
  <wp:tag_slug>l9</wp:tag_slug>
  <wp:tag_name><![CDATA[L9]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8800</wp:term_id>
  <wp:tag_slug>latex</wp:tag_slug>
  <wp:tag_name><![CDATA[LaTeX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>42899</wp:term_id>
  <wp:tag_slug>latex-suite</wp:tag_slug>
  <wp:tag_name><![CDATA[Latex-Suite]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>610</wp:term_id>
  <wp:tag_slug>linux</wp:tag_slug>
  <wp:tag_name><![CDATA[Linux]]></wp:tag_name>
  <wp:tag_description><![CDATA[Just a shorthand of GNU/Linux.]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>15711688</wp:term_id>
  <wp:tag_slug>m-win</wp:tag_slug>
  <wp:tag_name><![CDATA[M$ Win*]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>89087</wp:term_id>
  <wp:tag_slug>makefile</wp:tag_slug>
  <wp:tag_name><![CDATA[makefile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>140810</wp:term_id>
  <wp:tag_slug>markdown</wp:tag_slug>
  <wp:tag_name><![CDATA[Markdown]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>55318838</wp:term_id>
  <wp:tag_slug>mathjax</wp:tag_slug>
  <wp:tag_name><![CDATA[MathJax]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33624905</wp:term_id>
  <wp:tag_slug>nerdtree</wp:tag_slug>
  <wp:tag_name><![CDATA[NERDTree]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17973832</wp:term_id>
  <wp:tag_slug>octopress</wp:tag_slug>
  <wp:tag_name><![CDATA[Octopress]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>48522852</wp:term_id>
  <wp:tag_slug>omnicppcomplete</wp:tag_slug>
  <wp:tag_name><![CDATA[OmniCppComplete]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>96029</wp:term_id>
  <wp:tag_slug>online-forms</wp:tag_slug>
  <wp:tag_name><![CDATA[online forms]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29819099</wp:term_id>
  <wp:tag_slug>pandoc</wp:tag_slug>
  <wp:tag_name><![CDATA[pandoc]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196</wp:term_id>
  <wp:tag_slug>programming</wp:tag_slug>
  <wp:tag_name><![CDATA[programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>54025</wp:term_id>
  <wp:tag_slug>regex</wp:tag_slug>
  <wp:tag_name><![CDATA[regex]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4872</wp:term_id>
  <wp:tag_slug>ruby</wp:tag_slug>
  <wp:tag_name><![CDATA[Ruby]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>26094290</wp:term_id>
  <wp:tag_slug>snipmate</wp:tag_slug>
  <wp:tag_name><![CDATA[Snipmate]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4486516</wp:term_id>
  <wp:tag_slug>sumatra-pdf</wp:tag_slug>
  <wp:tag_name><![CDATA[Sumatra PDF]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4468989</wp:term_id>
  <wp:tag_slug>syntaxhighlighter</wp:tag_slug>
  <wp:tag_name><![CDATA[SyntaxHighlighter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>866271</wp:term_id>
  <wp:tag_slug>taglist</wp:tag_slug>
  <wp:tag_name><![CDATA[Taglist]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>255</wp:term_id>
  <wp:tag_slug>ubuntu</wp:tag_slug>
  <wp:tag_name><![CDATA[Ubuntu]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1283330</wp:term_id>
  <wp:tag_slug>ultrablog</wp:tag_slug>
  <wp:tag_name><![CDATA[UltraBlog]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18060</wp:term_id>
  <wp:tag_slug>vim</wp:tag_slug>
  <wp:tag_name><![CDATA[Vi(m)]]></wp:tag_name>
  <wp:tag_description><![CDATA[This tag also applies to Vi-related posts for convenience.
Due to the dream of doing jobs effectively using Vim, implementations of Vim features on other softwares should be tagged with this tag.]]></wp:tag_description>
</wp:tag>
<wp:tag>
  <wp:term_id>212198577</wp:term_id>
  <wp:tag_slug>vim-easy-align</wp:tag_slug>
  <wp:tag_name><![CDATA[vim-easy-align]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>155770687</wp:term_id>
  <wp:tag_slug>vim-surround</wp:tag_slug>
  <wp:tag_name><![CDATA[Vim-surround]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>205422089</wp:term_id>
  <wp:tag_slug>vim-js</wp:tag_slug>
  <wp:tag_name><![CDATA[Vim.js]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6257223</wp:term_id>
  <wp:tag_slug>vimperator</wp:tag_slug>
  <wp:tag_name><![CDATA[Vimperator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>60967701</wp:term_id>
  <wp:tag_slug>vimrepress</wp:tag_slug>
  <wp:tag_name><![CDATA[VimRepress]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>795976</wp:term_id>
  <wp:tag_slug>viper</wp:tag_slug>
  <wp:tag_name><![CDATA[Viper]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>59881927</wp:term_id>
  <wp:tag_slug>vundle</wp:tag_slug>
  <wp:tag_name><![CDATA[Vundle]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33</wp:term_id>
  <wp:tag_slug>wordpress</wp:tag_slug>
  <wp:tag_name><![CDATA[WordPress]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Blog 1</title>
		<link>http://blogueun.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>http://blogueun.wordpress.com/about/</link>
  <pubDate>Fri, 10 Jan 2014 16:43:30 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[The posts published on this blog on or before 10th January, 2014 (Fri) are mirrored from <a href="http://blogue-un.blogspot.hk">my old Blogger blog</a>. For details, refer to my post titled <a href="http://blogueun.wordpress.com/2014/01/11/migrated-from-blogger/"><em>Migrated from Blogger</em></a>.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2014-01-10 16:43:30</wp:post_date>
  <wp:post_date_gmt>2014-01-10 16:43:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Compilation of Ruby's Source Code on Ubuntu</title>
  <link>http://blogueun.wordpress.com/2014/01/09/compilation-of-rubys-source-code-on-ubuntu/</link>
  <pubDate>Thu, 09 Jan 2014 11:22:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/09/compilation-of-rubys-source-code-on-ubuntu/</guid>
  <description/>
  <content:encoded><![CDATA[Oliver's guide has listed the packages on which Ruby depends. Following strictly to the guide, you should start working with the programming language, instead of wasting time to read this article.

Goal: You need to compile Ruby for whatever reasons.

Background: You've read Oliver's guide. However, your goal does <em>not</em> match with those in <a href="http://excid3.com/blog/setting-up-ubuntu-12-04-with-ruby-1-9-3-nginx-passenger-and-postgresql-or-mysql/">Oliver's guide</a>. Therefore, you <em>don't</em> need to do all the things in the guide and start to skim through the text and to scan for commands useful to you. This is an essential skill to survive in &#042;nix.<sup id="fnref-5-1"><a href="#fn-5-1" rel="footnote">1</a></sup>

Problem: You've found <em>some</em> useful commands, and tried working out their dependencies. Nonetheless, you missed out some important commands and thus the dependencies were wrong. Unfortunately, you're unaware of such careless mistake and continued the process, before being stopped by the compiler's error message.

In this case, you found the following commands useful.
[code language="bash" gutter="false"]
$ curl
# Substitute [version-number] with that of your downloaded archive.
# If you're NOT sure, use `ls' to list the files inside your folder.
$ tar -xvzf ruby-[version-number].tar.gz
$ cd ruby-[version-number]
$ make
[/code]
Therefore, you ran all of these commands. Expecting to get things done and to proceed to the next step, you got an error message from the compiler.

Trial: Using a part of the compiler's error message as the query string a search engine, you get some other web pages on the same or similar topics. If you could find blog entries like this some, they might have links to other similar web pages, so you've got <em>even more</em> to read.

I've found <a href="http://jndistasio.wordpress.com/2012/06/10/installing-ruby-1-9-3-on-opensuse-12-1-openssl-zlib-and-other-problems/">DiStasio's article</a>, which contains a hyperlink to <a href="http://blog.sethladd.com/2007/03/installing-openssl-support-for-ruby-on.html">Ladd's essay</a>. I tried issuing the following commands accroding to the instructions there.
[code language="bash" highlight="5" gutter="false"]
# Suppose that the current working directory is the same as the one in the above command list.
# If you're NOT sure, use `pwd' to check it.
$ cd ext/openssl
$ make
$ sudo make reinstall # I'd installed the wrong version of Ruby.
[/code]
Lacking patience to read the blogs, knowledge of using makefiles and experience of compiling softwares from their source code, I don't know how to uninstall the wrong version of Ruby. Are there any <code>make uninstall</code> command?

I tried searching for <code>reinstall</code> and <code>uninstall</code> in the <code>makefile</code>, and failed to find any. Then, I realised that using search engines to answer my questions was inefficient. Reading the official manual of Make <em>wouldn't</em> be effective. Thus, <em>without</em> knowing the truth, I just try the last line of the above list of commands.

The <code>make reinstall</code> command successfully triggered a reinstallation of Ruby, but after running the command, I still received complaints form the compiler. Having <em>no</em> idea on the process, I did the same thing again: copied a part of the message and googled it, and ended up with further more pages to read. The amount of tab pages in my current browser window is too high and this stopped me from opening more web pages on Ruby compilation errors on Google's search result in a new tab.

It took me some time to find out that I overlooked the command below 
[code language="bash" gutter="false"]
$ sudo apt-get install build-essential zlib1g-dev libssl-dev libreadline-dev libyaml-dev libcurl4-openssl-dev curl git-core python-software-properties
[/code]
In Oliver's guide, the above command is right aobve those commands for compiling and installing Ruby. Therefore, I installed them, and tried rebuilding Ruby by running <code>make</code> and <code>sudo make reinstall</code> in my <code>ruby -[version-number]</code>. (i.e. my Ruby source folder) It failed again. <em>Without</em> changing the current working directory directory in the above command list, I did the following because of Ladd's web page.
[code language="bash" gutter="false"]
$ make
$ sudo make reinstall
[/code]
But it failed again. Maybe I need to go back to <code>ruby-[version-number]</code>, recompile the source code and reinstall Ruby again. So using the <em>same</em> current working directory as the one in the above command list, I did the following thing.
[code language="bash" highlight="1" gutter="false"]
$ cd ../.. # For changing the current working directory to `ruby-[version-number]'.
$ make
$ sudo make reinstall
[/code]
Things still went wrong! I remembered the <code>make clean</code> command, so <em>without</em> changing the current working directory, I ran the following commands.
[code language="bash" gutter="false"]
$ make clean
$ make
$ sudo make reinstall
[/code]
Remark: With the command <code>dkpg -l | grep ruby</code>, I realised that <code>make clean</code> <em>doesn't</em> uninstall Ruby. It just deletes all compiled files in <code>ruby -[version-number]</code>.

It still <em>wouldn't</em> compile with the OpenSSL feature. However, some features that had failed to compile before I had run the command <code>make clean</code> could be compiled.

This inspired me to run the following commands.
[code language="bash" gutter="false"]
$ cd ext/openssl
$ make clean
$ make
$ sudo make reinstall
[/code]
However, I still got errors. There was a problem in getting the file <code>ossl.o</code> work. (I've forgotten the exact name of that file, and I <em>couldn't</em> find web pages about the same error.) I ignored the message and ran the following commands.
[code language="bash" gutter="false"]
$ cd ../..
$ make clean
$ make
$ sudo make reinstall
[/code]
But it still <em>didn't</em> go right. After running the commands <code>make</code> and <code>make clean</code> for a number of times, I eventually worked out a solution for my problem.

Solution:
1. Run the command <code>make clean</code> in <em>both</em> the <code>ruby-[version-number]</code> and <code>ruby-[version-number]/ext/openssl</code> directories.
2. Run <code>make</code> in <code>ruby-[version-number]</code> to compile the source code. Some errors like "Failed to compile gdbm" will come out. It depends on your needs. Having <em>no</em> clue on what <code>gdbm</code> is, I just proceed to the reinstallation of Ruby.
3. Run the command <code>sudo make reinstall</code> in <code>ruby-[version-number]</code>. Then the command <code>gem install bundle</code> in Oliver's guide should work.

Lessons learnt:
1. Always figure out the dependencies of a package.
2. Be careful and patient while reading instructions on commands.
3. Always clear <em>all</em> compiled files before any recompilation.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-5-1">
<a href="http://user.frdm.info/ckhung/a/c013.php">http://user.frdm.info/ckhung/a/c013.php</a>&#160;<a href="#fnref-5-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2014-01-09 19:22:00</wp:post_date>
  <wp:post_date_gmt>2014-01-09 11:22:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>compilation-of-rubys-source-code-on-ubuntu</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5834413975122072869]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Write Blog Offline!</title>
  <link>http://blogueun.wordpress.com/2014/01/09/write-blog-offline/</link>
  <pubDate>Thu, 09 Jan 2014 03:38:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/09/write-blog-offline/</guid>
  <description/>
  <content:encoded><![CDATA[When I'm writing blogs using the Blogger's online editor, I found that it's slow since the Vim's keyboard shortcuts can't be used. What's worse, Blogger often threw me Error 503. I regret wasting so much time on this ineffective blogging process.

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2014/01/23c75-paint.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2014/01/23c75-paint.png" height="360" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Example of an error experienced by user on Blogger.</td></tr></tbody></table>

Link for effective blogging:

<ol><li>Susan Gunelius' <a href="http://weblogs.about.com/od/offlineblogeditors/tp/ReasonstoUseOfflineBlogEditor.htm" target="_blank">Top 5 Reasons to Use an Offline Blog Editor</a></li></ol>

Just one will do. Then it'll be good to have some physical exercises for the coordination of our eyes, brain and hand. I've learnt this from my teacher.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2014-01-09 11:38:00</wp:post_date>
  <wp:post_date_gmt>2014-01-09 03:38:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>write-blog-offline</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1834921864363015219]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (6): Multilingual Source Code Display in Web Pages</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages/</link>
  <pubDate>Wed, 08 Jan 2014 07:44:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won't make sense here. Refer to the <a href="http://blogue-un.blogspot.hk/2014/01/testing-online-code-syntax-highlighters_8.html" target="_blank">original post</a>.</em>

<a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html" target="_blank">One of my earlier posts</a> suggests that <a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighlight</a> supports <em>only one</em> language in a <code>pre</code> tag <em>without</em> proof. Before embedding a source code list to show this, I'll make more assertions and then verify them.

<a href="http://highlightjs.org/" target="_blank">highlight.js</a> has the support, while <a href="http://code.google.com/p/google-code-prettify/" target="_blank">google-code-prettify</a> <em>doesn't</em>. For example, you want to attach the following Matlab code to your blog entry. SyntaxHighlight doesn't have the Matlab support. For highlight.js, here's the result.

<pre><code>function [rr_array] = nest_fun(x,a)
%function to find sets of polynormials.
% a: set of constants, [A B C]
% x: variables in array
% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])
n = size(a);
  for i = 1:n
  A = a(i,1);B = a(i,2);C = a(i,3);
  rr_array{1,i}=['A=',num2str(A),', B=',...
      num2str(B),', C=',num2str(C)];
  rr_array{2,i}=polyx(x);
　end
  function r = polyx(xx)
  　　r = A.*x.^2 + B.*x +C;
  end
end</code></pre>

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;">
    <tbody>
    <tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2014/01/d8435-matlab_correct.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2014/01/d8435-matlab_correct.png" height="414" width="640" /></a></td></tr>
    <tr><td class="tr-caption" style="text-align:center;">highlight.js works on some computer(s).</td></tr>
    </tbody>
</table>

When I was writing the post, highlight.js didn't worked right, but as I gave up trying it and view this post on the next day, things just go fine.

We just see how google-code-prettify works.

<pre class="prettyprint lang-matlab">function [rr_array] = nest_fun(x,a)
%function to find sets of polynormials.
% a: set of constants, [A B C]
% x: variables in array
% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])
n = size(a);
  for i = 1:n
  A = a(i,1);B = a(i,2);C = a(i,3);
  rr_array{1,i}=['A=',num2str(A),', B=',...
      num2str(B),', C=',num2str(C)];
  rr_array{2,i}=polyx(x);
　end
  function r = polyx(xx)
  　　r = A.*x.^2 + B.*x +C;
  end
end</pre>

Code copied from <a href="http://bime-matlab.blogspot.hk/2006/10/66.html" target="_blank">Applications of Matlab in Engineering</a>.

Note: In <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html" target="_blank">the official README</a>, it's said that we specify the <code>lang-*</code> class by its file extension (i.e. <code>m</code>), but in the page that display the source code of lang-matlab.js on Google Code, it points to <a href="https://github.com/amroamroamro/prettify-matlab" target="_blank">the author's Github repository</a>, which has a README file. According to that file, the HTML tag should be <code>&lt;pre class=&quot;prettyprint lang-<span class="hl_code">matlab</span>"&gt;</code>, instead of <code>&lt;pre class=&quot;prettyprint lang-<span class="wrong_code">m</span>"&gt;</code>.

So when one embeds the above source code list using google-code-prettify, one would write

<pre class="prettyprint">&lt;pre class="prettyprint lang-matlab"&gt;function [rr_array] = nest_fun(x,a)
%function to find sets of polynormials.
% a: set of constants, [A B C]
% x: variables in array
% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])
n = size(a);
  for i = 1:n
  A = a(i,1);B = a(i,2);C = a(i,3);
  rr_array{1,i}=['A=',num2str(A),', B=',...
      num2str(B),', C=',num2str(C)];
  rr_array{2,i}=polyx(x);
　end
  function r = polyx(xx)
  　　r = A.*x.^2 + B.*x +C;
  end
end&lt;/pre&gt;</pre>

Let's go back to the topic.

<h3>SyntaxHighlighter</h3>

The SyntaxHighlighter code for embedding Java:

[code language="html"]
&lt;pre class=&quot;brush: java&quot;&gt;public class Hello {
	public static void main(String args[]) {
		System.out.println(&quot;Hello world!&quot;);
	}
}&lt;/pre&gt;
[/code]

As the language in determined by <code>brush: html</code>, there's <em>no</em> multiple language feature in SyntaxHighlighter.

<h3>highlight.js</h3>

<pre><code>&lt;pre class="brush: java"&gt;public class Hello {
    public static void main(String args[]) {
        System.out.println("Hello world!");
    }
}&lt;/pre&gt;</code></pre>

So highlight.js can display multiple languages at one container.

<h3>google-code-prettify</h3>

<pre class="prettyprint">&lt;pre class="brush: java"&gt;public class Hello {
    public static void main(String args[]) {
        System.out.println("Hello world!");
    }
}&lt;/pre&gt;</pre>

So the result of google-code-prettify is similar to that of SyntaxHighlighter.

<h3>Further results of highlight.js</h3>

We end this essay with more results in highlight.js.

In order to embed multilingual source code in a list, highlight.js is what you need, but if you insist on using google-code-prettify, here's some sample code.

<pre><code>&lt;pre class="prettyprint"&gt;public class Hello {
    // Java code sample
        public static void main(String args[]) {
            System.out.println("Hello world!");
        }
    }

    &lt;!-- CSS code--&gt;
    .sidebar #sidebar, .ss{
     margin-top: 12px !important;
     overflow-y: scroll !important;
    }

    # C++ code
    #include 
    using namespace std;

    int main(void)
    {
        cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;
        return 0;
    }
&lt;/pre&gt;</code></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2014-01-08 15:44:00</wp:post_date>
  <wp:post_date_gmt>2014-01-08 07:44:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="highlight-js"><![CDATA[highlight.js]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5193275971424894055]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (5): Embedding Makefiles to a Web Page</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-5-embedding-makefiles-to-a-web-page/</link>
  <pubDate>Wed, 08 Jan 2014 06:38:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-5-embedding-makefiles-to-a-web-page/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won't make sense here. Refer to the <a href="http://blogue-un.blogspot.hk/2014/01/testing-online-code-syntax-highlighters.html">original post</a>.</em>

In my previous post titled <a href="http://blogue-un.blogspot.hk/2013/12/fast-compilation-and-execution-of.html"><em>Fast Compilation and Execution of Source Code</em></a>, I included a <code>makefile</code>. After I've been familiar with SyntaxHighlighter, I changed the code of the <code>makefile</code> so that the new tool is used. However, as I've written in <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html">my earlier post</a>, SyntaxHighlighter has <em>no</em> makefile support<sup id="fnref-9-1"><a href="#fn-9-1" rel="footnote">1</a></sup>, while <a href="http://highlightjs.org/">highlight.js</a><sup id="fnref-9-2"><a href="#fn-9-2" rel="footnote">2</a></sup> and <a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a><sup id="fnref-9-3"><a href="#fn-9-3" rel="footnote">3</a></sup> have that feature.

<blockquote>
  I think, therefore I am.
  Réné Descartes (1596–1650)
</blockquote>

In order to be sure about their claims, I've done a test and the results are as follow.

<h3>highlight.js:</h3>

[code]
hello: hello.c
	gcc -o hello hello.c
	clean:
	rm -f hello
[/code]

Maybe my <code>makefile</code> is too simple that it lacks some typical features for the automatic language recognition of highlight.js. Let's see the sample code copied from <a href="http://highlightjs.org/static/test.html">the official demo</a>.

[code]
# Makefile

BUILDDIR      = _build
EXTRAS       ?= $(BUILDDIR)/extras

.PHONY: main clean

main:
	@echo &quot;Building main facility...&quot;
	build_main $(BUILDDIR)

clean:
	rm -rf $(BUILDDIR)/*
[/code]

<h3>google-code-prettify</h3>

<pre class="prettyprint">hello: hello.c
    gcc -o hello hello.c
clean:
    rm -f hello
</pre>

Let's see a <em>real</em> one.

<pre class="prettyprint"># Makefile

BUILDDIR      = _build
EXTRAS       ?= $(BUILDDIR)/extras

.PHONY: main clean

main:
    @echo "Building main facility..."
    build_main $(BUILDDIR)

clean:
    rm -rf $(BUILDDIR)/*
</pre>

Unluckily, I <em>can't</em> figure out the way to include a tab, instead of whitespaces, for makefiles. Anyways, one who use makefiles will know that after running <code>make</code> on the first day.

<div class="footnotes">
<hr />
<ol>

<li id="fn-9-1">
<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/api/autoloader.html">http://alexgorbatchev.com/SyntaxHighlighter/manual/api/autoloader.html</a>&#160;<a href="#fnref-9-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-9-2">
<a href="http://highlightjs.org/static/test.html">http://highlightjs.org/static/test.html</a>&#160;<a href="#fnref-9-2" rev="footnote">&#8617;</a>
</li>

<li id="fn-9-3">
<a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">http://google-code-prettify.googlecode.com/svn/trunk/README.html</a>&#160;<a href="#fnref-9-3" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2014-01-08 14:38:00</wp:post_date>
  <wp:post_date_gmt>2014-01-08 06:38:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-5-embedding-makefiles-to-a-web-page</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="highlight-js"><![CDATA[highlight.js]]></category>
  <category domain="post_tag" nicename="makefile"><![CDATA[makefile]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[4512993509250186999]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Precautions to Changing Bloger's Template and Google Drive File Hosting</title>
  <link>http://blogueun.wordpress.com/2014/01/08/precautions-to-changing-blogers-template-and-google-drive-file-hosting/</link>
  <pubDate>Wed, 08 Jan 2014 03:46:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/08/precautions-to-changing-blogers-template-and-google-drive-file-hosting/</guid>
  <description/>
  <content:encoded><![CDATA[There are just two points to be noted for a change in the template of a blog.

<ol>
<li>Backup the HTML template.</li>
<li>Backup the CSS settings in "Template" → "Advanced" → "Add CSS"</li>
</ol>

Maybe what you need is just changing some properties of a CSS class. For instance, you've set the body background colour to be magenta and you want to change it to orange. This can be easily done if you put an external CSS style sheet to somewhere public on the web and include a link to the CSS style sheet in the HTML template of your blog. <a href="https://googledrive.com/host/0B716ywBKT84AMXBENXlnYmJISlE/GoogleDriveHosting.html">A very short documentation on Google Drive</a> explains how the hosting of one's custom CSS stylesheet(s) on Google Drive can be done. Apart from shortening the time taken for changing the appearance of a blog, it avoids the loss of CSS code due to Blogger's problems and/or users' mistakes.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2014-01-08 11:46:00</wp:post_date>
  <wp:post_date_gmt>2014-01-08 03:46:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>precautions-to-changing-blogers-template-and-google-drive-file-hosting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <category domain="post_tag" nicename="google-drive"><![CDATA[Google Drive]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1165014171107060743]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (4): Giving up Using Blogger's Dynamic View</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-4-giving-up-using-bloggers-dynamic-view/</link>
  <pubDate>Wed, 08 Jan 2014 02:23:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-4-giving-up-using-bloggers-dynamic-view/</guid>
  <description/>
  <content:encoded><![CDATA[There are several reasons for the shift of the template of this blog from a dynamic view to a static one.

<ol>
<li>Speed: Dynamic view takes too much time to load. This greatly slowed down my editing process on Blogger.</p></li>
<li>Integration with other scripts: It is often quite troublesome to load other scripts using the dynamic view.  

For example, due to my poor knowledge in HTML, JavaScript and CSS, I can't understand what's written on those blogs that use the dynamic view and manage to integrate with google-code-prettify and/or highlight.js work(s), such as <a href="http://www.alexconrad.org/2011/12/highlight-code-with-bloggers-dynamic.html">Conrad's syntax highlight demo page</a> and <a href="http://www.chrispwood.net/2013/03/integrating-highlightjs-with-blogger.html">Wood's tutorial on usinghighlight.js</a>. For details of my integration failure, you may see the last paragraph of <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html">my previous post</a>.

As I'm <em>not</em> a web developer or a web designer, it's <em>not</em> worth spending so much time to goggle the solution. In contrast to the difficulty of installing external scripts in the dynamic view, the static view enables users to click "Layout" → "Add a Gadget" to do the job.

<img src="http://blogueun.files.wordpress.com/2014/01/465ff-add_gadget.png" alt="Blogger's pop-up windown for adding a gadget" />

By doing so, the user doesn't need to edit HTML template every time.
<img src="http://blogueun.files.wordpress.com/2014/01/2e8d5-template.png" alt="Blogger's online template editor" /></p></li>
<li><p>More reasons can be found on <a href="http://www.mybloggertricks.com/2011/12/10-reasons-to-avoid-blogger-dynamic.html">10 Reasons To Avoid Blogger Dynamic Views</a>.</p></li>
</ol>

<h3>Conclusion</h3>

<p>&lt;

p&gt;With a simpler static view, I've been able to make <a href="http://highlightjs.org/">highlight.js</a> and <a href="http://code.google.com/p/google-code-prettify/wiki/GettingStarted">google-code-prettify</a> work.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2014-01-08 10:23:00</wp:post_date>
  <wp:post_date_gmt>2014-01-08 02:23:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-4-giving-up-using-bloggers-dynamic-view</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="dynamic-view"><![CDATA[dynamic view]]></category>
  <category domain="post_tag" nicename="highlight-js"><![CDATA[highlight.js]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[7384448373138886139]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (3): google-code-prettify</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-3-google-code-prettify/</link>
  <pubDate>Wed, 08 Jan 2014 00:10:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-3-google-code-prettify/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won't make sense here. Refer to the <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for_8.html">original post</a>.</em>

Here's another online code syntax highlighter called <a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a>. The following are the test results.

In order to use this technology in your post, the following simple steps will do.

<ol>
<li>Add an "HTML/JavaScript" gadget to your blog. In the contents, just paste the following line of code found on <a href="https://code.google.com/p/google-code-prettify/wiki/GettingStarted">the official tutorial</a>.<sup id="fnref-12-1"><a href="#fn-12-1" rel="footnote">1</a></sup>

<pre class="prettyprint lang-html">&lt;script src=&quot;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js&quot;&gt;&lt;/script&gt;</pre></li>
<li>Insert the following lines of code and replace the text inside the <code>pre</code> tag with your code.
Note: Like <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> and <a href="http://highlightjs.org/">highlight.js</a>, you need to encode <code>&lt;</code>, <code>&gt;</code>,  <code>&amp;</code>, etc into HTML encoding using an HTML encoder. At the bottom part of <a href="http://blogue-un.blogspot.hk/2014/01/testing-syntaxhighlighter_5977.html">one of my older posts</a>, I included a link to an HTML encoder, and here's a list of two more.

<ul>
<li><a href="http://www.web2generators.com/html/entities">Web 2.0 Generators</a>: it contains a list of reserved characters and their entity names, as well as an HTML decoder.</li>
<li><a href="http://www.opinionatedgeek.com/DotNet/Tools/HTMLEncode/Default.aspx">OpinionatedGeek</a>: it contains an HTML decoder.</li>
</ul>

i.e. If you want to embed HTML code using an HTML encoder, you need to type the following <em>unencoded</em> code first.

<pre class="prettyprint lang-html">&lt;pre class="prettyprint lang-html"&gt;
&lt;!-- your code here--&gt;
&lt;/pre&gt;</pre>

Then you use a HTML encoder to generate the following output and paste it inside the <code>pre</code> tag.

<pre class="prettyprint">&lt;pre class=&quot;prettyprint lang-html&quot;&gt;
&lt;!-- your code here--&gt;
&lt;/pre&gt;</pre>

Exercise: If you think that you understand the above text, try making a web page that teaches users how to embed HTML code into a web page.<br />
Hint: Right click and choose "<strong>V</strong>iew Page Source" in the pop up menu.</p></li>
<li><p>If your source code contains too many characters in a line, the right part of the code will go out of the box. Add the following CSS code to automatically fix the problem.

<pre class="prettyprint lang-css">pre {
 overflow: auto;
}</pre>

Then a scrollbar will be automatically attached to the source code container if the source code has too many columns and/or lines.</p></li>
</ol>

<p>Suppose you see the following lines of code in message in response to <a href="http://stackoverflow.com/questions/20977752/php-select-box-with-multiple-options-in-of-times-and-dates">a question on Stack Overflow</a>. However, it has <em>no</em> line number, and you want to embed this piece of code into your web page <em>with</em> line number. So I append <code>linenums</code> to the <code>class</code> attribute of the <code>pre</code> tag.

<pre class="prettyprint lang-php linenums">&lt;select&gt;
 
&lt;?php for ($i = 1; $i &lt;= 2; ++$i) { ?&gt;
 
  &lt;optgroup label=&quot;&lt;?php echo date('l j F', strtotime('+ ' . $i . ' day')); ?&gt;&quot;&gt;
    &lt;?php if($i==0) { ?&gt;
    &lt;?php for ($n = date('H'); $n &lt; 16; $n += 3) { ?&gt;
      &lt;option&gt;&lt;?php echo str_pad($n, 2, '0', STR_PAD_LEFT); ?&gt;:00 - &lt;?php echo str_pad($n + 2, 2, '0'); ?&gt;:00&lt;/option&gt;
    &lt;?php } }?&gt;
    &lt;?php for ($n = 9; $n &lt; 16; $n = $n + 3) { ?&gt;
     
      &lt;option&gt;&lt;?php echo str_pad($n, 2, '0', STR_PAD_LEFT); ?&gt;:00 - &lt;?php echo str_pad($n + 2, 2, '0'); ?&gt;:00&lt;/option&gt;
     
    &lt;?php } ?&gt;
   
  &lt;/optgroup&gt;
 
&lt;?php } ?&gt;
 
&lt;/select&gt;</pre>

For further details, refer to the <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">official README</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-12-1">
<a href="http://andmobiz.blogspot.hk/2013/05/blogger-google-code-prettify-github-gist.html">http://andmobiz.blogspot.hk/2013/05/blogger-google-code-prettify-github-gist.html</a>&#160;<a href="#fnref-12-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2014-01-08 08:10:00</wp:post_date>
  <wp:post_date_gmt>2014-01-08 00:10:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-3-google-code-prettify</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="google-code-prettify"><![CDATA[google-code-prettify]]></category>
  <category domain="post_tag" nicename="highlight-js"><![CDATA[highlight.js]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <category domain="post_tag" nicename="syntaxhighlighter"><![CDATA[SyntaxHighlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6104212200334585888]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (2): highlight.js</title>
  <link>http://blogueun.wordpress.com/2014/01/07/testing-online-code-syntax-highlighters-for-blogs-2-highlight-js/</link>
  <pubDate>Tue, 07 Jan 2014 07:52:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/07/testing-online-code-syntax-highlighters-for-blogs-2-highlight-js/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won’t make sense here. Refer to the <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html">original post</a>.</em><sup id="fnref-13-1"><a href="#fn-13-1" rel="footnote">1</a></sup>

Now I know the reason for failing to make highlight.js work on my blog yesterday. It is because of Blogger's dynamic view, which is the <em>real</em> thing that I'm going to give up using forever. For details, refer to <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for_4049.html">my newer post</a>.<sup id="fnref-13-2"><a href="#fn-13-2" rel="footnote">2</a></sup>

Thanks to <a href="http://blog.chrisflicker.com/post/36729926566">Chris</a>, I know more ways of embedding source code lists now.

Confucius said that we need to practice what we've learnt. So this is my sample usage of highlight.js.

In my previous post titled <a href="http://blogue-un.blogspot.hk/2013/12/fast-compilation-and-execution-of.html"><em>Fast Compilation and Execution of Source Code</em></a>, I included the following sample <code>makefile</code>:

[code lang=text]
hello : hello.c
    gcc -o hello hello.c
clean:
    rm -f hello
[/code]

Note: See the note of making a makefile in the previous blog post. In order to include this list, I used Alex Gorbatchev's <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> to do this.

[code lang=text]
hello : hello.c
    gcc -o hello hello.c
clean:
    rm -f hello
[/code]

This template looks pretty, but there's some inadequacies for me:

<ol>
<li>Makefile (and other popular languages as well) support</li>
<li>Multiple language syntax detection: For example, in the second source code list, I try to explain how to write the HTML code for including a source code list of <em>another</em> language (In this case, it's makefile).</li>
</ol>

Unluckily, I can only get the background, but not the syntax highlighted. I don't know the cause of the problem. Anyways, everyone should be able to do it on a simple web page, and I've achieved my aim: to know how to make use of highlight.js. We should treasure what we already have before seeking something new. Maybe I do too many things on this template. <del>What's below shows how it fails.</del>

<pre><code>@requires_authorization
def somefunc(param1='', param2=0):
    r'''A docstring'''
    if param1 &gt; param2: # interesting
        print 'Gre\'ater'
    return (param2 - param1 + 1) or None

class SomeClass:
    pass

&gt;&gt;&gt; message = '''interpreter
... prompt'''</code></pre>

Code copied from <a href="http://highlightjs.org/static/test.html">the live demo of highlight.js</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-13-1">
Updated on 07/02/14 22:18:24 HKT&#160;<a href="#fnref-13-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-13-2">
Updated on 08/01/14 09:45:00 GMT&#160;<a href="#fnref-13-2" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2014-01-07 15:52:00</wp:post_date>
  <wp:post_date_gmt>2014-01-07 07:52:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-2-highlight-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="highlight-js"><![CDATA[highlight.js]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[7714778862686160893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A More User-Friendly and Dynamic View in Blogger</title>
  <link>http://blogueun.wordpress.com/2014/01/06/a-more-user-friendly-and-dynamic-view-in-blogger/</link>
  <pubDate>Mon, 06 Jan 2014 09:03:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/06/a-more-user-friendly-and-dynamic-view-in-blogger/</guid>
  <description/>
  <content:encoded><![CDATA[As you can see now, I no longer use the dynamic view in Blogger. For a more detailed reason, refer to <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for_4049.html">my newer post</a>.<sup id="fnref-14-1"><a href="#fn-14-1" rel="footnote">1</a></sup>

The dynamic view template in Blogger can already switch its modes according to the users' needs. The containers in "flipcard" and "mosaic" views can be enlarged by a click on them. However, the default "sidebar" view still has its supporters, despite its inadequacies. <sup id="fnref-14-2"><a href="#fn-14-2" rel="footnote">2</a></sup>

Last Saturday, I changed the template from a dark one to a dynamic one withe sidebar. However, when I'd like to scroll down to my earlier essays, I found out that I need to go through some passages in between my current position and my target in the scrollbar. This is quite troublesome since a considerable amount of time is needed to load the contents of a blog entry.

Luckily, I could find out how Yoga changed his code in "Add CSS" in his template so as to get the sidebar on the left scrollable. I just copy the code from him for your reference.

[code lang=css]
.sidebar #sidebar, .ss{
margin-top: 12px !important;
overflow-y: scroll !important;
}
[/code]

Note: Later, I found out that <em>without</em> the scrollbar, the sidebar is still scrollable.

<div class="footnotes">
<hr />
<ol>

<li id="fn-14-1">
Updated on 8/1/14 10:22 GMT&#160;<a href="#fnref-14-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-14-2">
<a href="http://www.southernspeakers.net/2012/09/scrollbar-for-sidebar-posts-in-blogger.html">http://www.southernspeakers.net/2012/09/scrollbar-for-sidebar-posts-in-blogger.html</a>&#160;<a href="#fnref-14-2" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2014-01-06 17:03:00</wp:post_date>
  <wp:post_date_gmt>2014-01-06 09:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-more-user-friendly-and-dynamic-view-in-blogger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8650814447263949246]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing Online Code Syntax Highlighters for Blogs (1): SyntaxHighlighter</title>
  <link>http://blogueun.wordpress.com/2014/01/06/testing-online-code-syntax-highlighters-for-blogs-1-syntaxhighlighter/</link>
  <pubDate>Mon, 06 Jan 2014 00:41:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/06/testing-online-code-syntax-highlighters-for-blogs-1-syntaxhighlighter/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won't make sense here. Refer to the <a href="http://blogue-un.blogspot.hk/2014/01/testing-syntaxhighlighter_5977.html">original post</a>.</em>

This is a test of <a href="http://geektalkin.blogspot.hk/2009/11/embed-code-syntax-highlighting-in-blog.html">a guide for embedding code</a> on Blogger found on Geed Talkin Siebel. I've some code that I'd like to share.

When I first learnt Java, I saw these few lines of code.
[code language="java" highlight="3"]
public class Hello {
    public static void main(String args[]) {
        System.out.println(&quot;Hello world!&quot;);
    }
}
[/code]
When I was still in secondary school, one of my classmates complained about the syntactic and conceptual complexity of the <code>print</code> method in Java. He said that it was a lot simpler in C++.
[code language="cpp" highlight="5"]
#include &lt;iostream&gt;
using namespace std;
int main(void)
{
    cout &amp;lt;&amp;lt; &quot;Hello world!&quot; &amp;lt;&amp;lt; endl;
    return 0;
}
[/code]
Deeply impressed by what I've done using Java, I didn't took his words. After several years, I looked at the code for handling zipped files in Apache Tomcat 2.5, and I understand him a little bit.

A year ago, when I looked at the official web page of Apache Commons FileUpload impatiently, I could get nothing from the sample code there. Fortunately, with the debugger in Eclipse, I managed to apply the knowledge on the user guide on that site. I'm sure that without any debugging tools, I can <em>never</em> get the job done!

Recently, when <a href="http://blogue-un.blogspot.com/2014/01/gnus-powerful-data-recovery-tool.html">I backed up my files</a>, I browsed <a href="http://www.codejava.net/java-se/file-io/programmatically-extract-a-zip-file-using-java">a tutorial about extracting a zipped file</a> on CodeJava and looked at the code there, and I've found out that even though I managed to use the <code>ZipInputStream</code> class to handle zipped archives, I still have no idea on how the machine works because the language is too high level. The story ends here.

In the past few months, without any knowledge and effort to get a good display of the source code, I just typed the following codes directly into the HTML view of the WYSIWYG editor of Blogger.

<pre><code>#include &lt;iostream&gt;
using namespace std;
int main(void)
{
cout &lt;&lt; "Hello world!" &lt;&lt; endl;
return 0;
}
</code></pre>

By doing so, the output is like this:

<pre><code>#include &lt;iostream&gt;
using namespace std;
int main(void)

cout &lt;&lt; "Hello world!" &lt;&lt; endl;
return 0;
}
</code></pre>

Apart from unattractive appearance, the above list doesn't have line numbers. Though one can easily select and copy and code into a text editor, this is inefficient, when compared to SyntaxHighlighter.

After motivation, what's needed is action.

Following the guide mentioned above, I clicked the "copy to clipboard" icon at the top right-hand corner of relevant blocks of source code, and pasted them into the HTML of the template.

<table class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;" cellspacing="0" cellpadding="0" align="center">
    <tbody>
    <tr>
        <td style="text-align:center;"><img alt="" src="http://blogueun.files.wordpress.com/2014/01/2ea26-template.png?w=300" width="640" height="259" border="0" /></td>
    </tr>
    <tr>
        <td class="tr-caption" style="text-align:center;">*Don't* worry about the single quotes in line 219. It works *fine*.</td>
    </tr>
    </tbody>
</table>

Without a successful experience of getting it work, I thought that the above guide <em>didn't</em> work and had treated it as another guide that I can't make use of. (After getting things work, I think I <em>was</em> unfair to its author by simply saying that "it <em>doesn't</em> work!")

I suspected that Blogger's dynamic view templates inhibits the use of SyntaxHighlighter, just like <a href="http://blogue-un.blogspot.hk/2014/01/giving-up-testing-mathjax-on-blogger.html">the case in MathJax</a>, and would like to change the template of this blog. However, the space of displaying figures would be reduced. After that, I gave up this idea and tried to find some way to get SyntaxHighlighter work with the dynamic view. Then I found <a href="http://blog.cruxframework.org/2011/10/easy-code-syntax-highlight-on-blogger.html">a detailed but a little bit complicated guide</a> for impatient users on Crux Framework. Luckily, I managed to find <a href="http://kevin-junghans.blogspot.hk/2013/01/adding-syntaxhighlighter-to-blogger.html">another post</a> on doing the same thing. It really saves the day! Pasting the three lines of code at the bottom, it finally works! Yes, there's just three lines.

After getting things done, I've realised that for dynamic views, there's only one missing step in the first guide, which is the last part of the last guide.

I can now start embedding source code into my blog posts. For an angled block <code>&lt;&gt;</code>, they need to be converted to <code>&lt;tag&gt;</code> so that the JavaScript will run <em>without</em> errors. It is better to leave it to <a href="http://www.string-functions.com/htmlencode.aspx">an online HTML encoder</a> to do this tedious task.

One final note: for indentation of source code with tabs, it's better to convert it to whitespaces first because toggling between the "Compose" and "HTML" modes of the online editor on Blogger will lead to disappearance of the tabs. The replacement is not difficult in Vim. Issuing the command <code>:[range]s:^\t: [num_of_times]:</code> will do. (It depends on the tabstop option on Vim. Adapt it according to your needs.)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2014-01-06 08:41:00</wp:post_date>
  <wp:post_date_gmt>2014-01-06 00:41:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-online-code-syntax-highlighters-for-blogs-1-syntaxhighlighter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <category domain="post_tag" nicename="syntaxhighlighter"><![CDATA[SyntaxHighlighter]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1704941251165755812]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>d8435-matlab_correct</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages/d8435-matlab_correct/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:11 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/d8435-matlab_correct.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2014-01-10 18:28:11</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>d8435-matlab_correct</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>8</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/d8435-matlab_correct.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-fiV1BYISOFI/Us7O6S_jQOI/AAAAAAAAAHQ/TzzUTwtA9oM/s1600/matlab_correct.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>GNU ddrescue—A Powerful Data Recovery Tool</title>
  <link>http://blogueun.wordpress.com/2014/01/04/gnu-ddrescue-a-powerful-data-recovery-tool/</link>
  <pubDate>Sat, 04 Jan 2014 09:45:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/04/gnu-ddrescue-a-powerful-data-recovery-tool/</guid>
  <description/>
  <content:encoded><![CDATA[3 days ago, I encountered an error while moving a folder of about 3 GB from my USB stick to my hard disk using GUI. After 1.2 GB of the files are moved, the progress bar of the program just remained unchanged. I left the seat in front of my computer and did something else. Returning to the seat after half an hour, the situation had NOT been better. The displayed remaining time was still "unknown".

The I clicked the cancel button to stop the process, but it simply hangs. After terminating the process from the "System Monitor" (another GUI program), the read/write speed of the USB stick became extremely low. Instead of blinking frequently, the light bulb inside the USB stick went on and off slowing during a read/write operation.
In <code>/var/log/syslog.1</code>, it says
[code highlight="3,6,8"]
[  627.152020] usb 2-1: reset high-speed USB device number 4 using ehci_hcd
[  658.128020] usb 2-1: reset high-speed USB device number 4 using ehci_hcd
[  658.493165] sd 3:0:0:0: [sdf] Unhandled error code
[  658.493169] sd 3:0:0:0: [sdf]  Result: hostbyte=DID_ABORT driverbyte=DRIVER_OK
[  658.493174] sd 3:0:0:0: [sdf] CDB: Write(10): 2a 00 00 54 e9 30 00 00 01 00
[  658.493188] end_request: I/O error, dev sdf, sector 5564720
[  658.494531] quiet_error: 39 callbacks suppressed
[  658.494533] Buffer I/O error on device sdf1, logical block 5564658
[  658.495808] lost page write due to I/O error on sdf1
[/code]
Oh! I need to recover the data! And I've found GNU ddrescue an excellent tool for the task. No expensive recovery plans are needed. Just ddrescue on a bootable media and some free space in a storage device will do.

It's important to note that the data recovery program should <em>never</em> be run on the <em>damaged</em> device. Otherwise, further damage will be done to the damaged device.<sup id="fnref-17-1"><a href="#fn-17-1" rel="footnote">1</a></sup> In addition, I <em>don't</em> recommend running the data rescue tool on the operating system(s) installed on your hard disk. The process takes a long time, so "patience is key".<sup id="fnref-17-2"><a href="#fn-17-2" rel="footnote">2</a></sup>

Booted into the command line interface (CLI) of Ubuntu Rescue Remix 12.04, I first formatted the <code>D</code> drive into an empty NTFS partition after backing up the data on that device. (i.e. <code>/dev/sda5</code>)
After that , I ran the following command:<sup id="fnref-17-3"><a href="#fn-17-3" rel="footnote">3</a></sup>

[code highlight="1" gutter="false"]
$ ddrescue -r1 -n -S -v /dev/sdxm /dev/sdyn [logfile]
# Substitute x with the appropriate partition letter of the source partition
# Substitute y with the appropriate partition letter of the destination partition
# Substitute m with the appropriate partition number of the source partition
# Substitute n with the appropriate partition number of the destination partition
[/code]

Note: <em>This process is irreverisible so do it carefully.</em>

In the screenshot below, <code>x=f</code>, <code>y=a</code>, <code>m=1</code>, <code>n=5</code>, and <code>logfile='backup1.log'</code>.

But the program refused to work, so I have to <code>--force</code> it to work.

<table class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;" cellspacing="0" cellpadding="0" align="center">
<tbody>
<tr>
<td style="text-align:center;"><a style="margin-left:auto;margin-right:auto;" href="http://blogueun.files.wordpress.com/2014/01/a64c1-trail.png"><img alt="" src="http://blogueun.files.wordpress.com/2014/01/a64c1-trail.png?w=300" width="640" height="512" border="0" /></a></td>
</tr>
<tr>
<td class="tr-caption" style="text-align:center;">Captured using `screendump`.</td>
</tr>
</tbody>
</table>

The program read the blocks fast initially but it gradually slowed down. After running the command for over 20 hours, over 3700 MB of the data had been read. Although there's just about 400 MB to go, according to the average speed at that moment, it was an hour to recover 10 MB of the data. What's worse, the average speed was getting slower and slower! (Later, from GeekyProjects, I realised that the heat of the devices inhibits the process<sup id="fnref-17-4"><a href="#fn-17-4" rel="footnote">4</a></sup>, and the logfile file feature enables users to pause the job.<sup id="fnref-17-5"><a href="#fn-17-5" rel="footnote">5</a></sup>) Therefore, <em>always use a logfile</em>.<sup id="fnref-17-6"><a href="#fn-17-6" rel="footnote">6</a></sup>

Without adequate knowledge on GNU ddrescue, I stopped the task with ``, but it took the computer several minutes to receive this input. But what's next for an <em>incomplete</em> task? The files <em>don't</em> occupy the whole USB stick. It might took me another day if I waited for some while and then resumed the task. At that moment, I decided to try mounting the destination partition <code>/dev/sdyn</code>. Thinking that the destination was a NTFS partition from the partition table rendered by <code>fdisk -l</code>, I tried <code>mount -t ntfs /dev/sdyn</code>, but the computer wouldn't let me go. I was fortunate to be stopped by this error. Otherwise, I think I would do another harm to the file system. This time, I let <code>mount</code> to automatically decide the partition type by removing the <code>-t</code> flag. It worked! I could browse and open the file there. After that, I copied the files to a safe place (i.e. a <em>normal</em> data storage device) Finally, I've found that <em>most</em> of the files were salvaged, despite some corruption of the multimedia files.

Since then, I've <em>really</em> learnt a lesson: <em>don't</em> to use GUI for copying big files, <em>always</em> use commands. Secondly, <em>never</em> use <code>mv</code> for big files, use <code>cp</code> instead.

<div class="footnotes">
<hr />
<ol>

<li id="fn-17-1">
<a href="http://techmuck.blogspot.hk/2012/03/data-recovery-with-gnu-ddrescue.html">http://techmuck.blogspot.hk/2012/03/data-recovery-with-gnu-ddrescue.html</a>&#160;<a href="#fnref-17-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-17-2">
Ibid.&#160;<a href="#fnref-17-2" rev="footnote">&#8617;</a>
</li>

<li id="fn-17-3">
Ibid.&#160;<a href="#fnref-17-3" rev="footnote">&#8617;</a>
</li>

<li id="fn-17-4">
<a href="http://geekyprojects.com/storage/how-to-recover-data-even-when-hard-drive-is-damaged/">http://geekyprojects.com/storage/how-to-recover-data-even-when-hard-drive-is-damaged/</a>&#160;<a href="#fnref-17-4" rev="footnote">&#8617;</a>
</li>

<li id="fn-17-5">
<a href="https://www.gnu.org/software/ddrescue/ddrescue.html">https://www.gnu.org/software/ddrescue/ddrescue.html</a>&#160;<a href="#fnref-17-5" rev="footnote">&#8617;</a>
</li>

<li id="fn-17-6">
<a href="http://manpages.ubuntu.com/manpages/raring/man1/ddrescue.1.html">http://manpages.ubuntu.com/manpages/raring/man1/ddrescue.1.html</a>&#160;<a href="#fnref-17-6" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2014-01-04 17:45:00</wp:post_date>
  <wp:post_date_gmt>2014-01-04 09:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gnu-ddrescue-a-powerful-data-recovery-tool</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ddrescue"><![CDATA[ddrescue]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3162151111362886749]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>CUHK's Poor Guide for Password Generation</title>
  <link>http://blogueun.wordpress.com/2014/01/04/cuhks-poor-guide-for-password-generation/</link>
  <pubDate>Sat, 04 Jan 2014 08:31:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/04/cuhks-poor-guide-for-password-generation/</guid>
  <description/>
  <content:encoded><![CDATA[I usually suggest users who refuse to use long passwords (&gt;10 characters) for their online accounts to look at news on GPU password cracking.<sup id="fnref-19-1"><a href="#fn-19-1" rel="footnote">1</a></sup> Setting a sufficiently long password is just the first step. The variety of characters to be chosen is also crucial to increasing the time taken for a brute force attack on the password. This idea is supported by the CUHK's <a href="http://www.cuhk.edu.hk/itsc/security/gpis/guidestrongpw.html"><em>Guidelines for Setting a Strong Password</em></a>, which is the main concern in the post.

The problem is <em>not</em> large if the user has some common sense on how the Internet works. However, as a guide for common end users of online services, the last section "Useful tools" is a little bit misleading. If you know some engineering students, he/she will tell you that making things work is their main goal. They can come up with fancy ways to hide standard errors from users. According to our naked eyes, the so called "random password generator" <em>seems</em> to be able to generate random passwords. However, you <em>don't</em> actually know the algorithm used.<sup id="fnref-19-2"><a href="#fn-19-2" rel="footnote">2</a></sup> Are they random enough? Are there any ways of predicting the output of the online password generators? The Community Ubuntu Documentation provides us a three-pronged reason for <em>not</em> actually using the "secure password generators" listed in the last section of CUHK's guide.

By saying that those tools "<em>may assist</em> you to set a strong password", the guide is far from wrong, but also <em>far</em> from good. For a <em>proper</em> introduction to a decent password policy for common users, go to the section titled "Write Your Passwords Down" on the same page on Ubuntu's community guide.<sup id="fnref-19-3"><a href="#fn-19-3" rel="footnote">3</a></sup>

P.S. The CUHK's guide have been writen for a long time. As I've mentioned above, a GPU cracks passwords much faster than before, so the figures need to be either updated or simply replaced with a link to a web page introducing recent technology on brute force password attacks.

<div class="footnotes">
<hr />
<ol>

<li id="fn-19-1">
<a href="http://www.linuxjournal.com/content/hack-and-password-cracking-gpus-part-i-setup">http://www.linuxjournal.com/content/hack-and-password-cracking-gpus-part-i-setup</a>&#160;<a href="#fnref-19-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-19-2">
<a href="https://help.ubuntu.com/community/StrongPasswords#Don.27t_use_online_password_generators">Don't use online password generators</a>&#160;<a href="#fnref-19-2" rev="footnote">&#8617;</a>
</li>

<li id="fn-19-3">
<a href="https://help.ubuntu.com/community/StrongPasswords#Write_Your_Passwords_Down">Write Your Passwords Down</a>&#160;<a href="#fnref-19-3" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2014-01-04 16:31:00</wp:post_date>
  <wp:post_date_gmt>2014-01-04 08:31:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cuhks-poor-guide-for-password-generation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apg"><![CDATA[apg]]></category>
  <category domain="category" nicename="information-security"><![CDATA[information security]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1227438849295188479]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Giving up Testing MathJax and Anchors on Blogger</title>
  <link>http://blogueun.wordpress.com/2014/01/04/giving-up-testing-mathjax-and-anchors-on-blogger/</link>
  <pubDate>Sat, 04 Jan 2014 02:33:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/04/giving-up-testing-mathjax-and-anchors-on-blogger/</guid>
  <description/>
  <content:encoded><![CDATA[In dynamic view, though the code for dynamic loading of MathJax contents has been pasted into the HTML code for the template, things just work in a strange way: in the class mode, MathJax works the best; in other modes, it may not work or it works partially. For example, in a mode, the dollar sign in the code tag is interpreted, and the script file for MathJax is loaded. But when you click a blog entry for a popup frame containing some MathJax code, then it simply won't load. Nonetheless, anchors don't work in a desired way in the dynamic view—after clicking an anchor, I am immediately directed to the destination, which is covered by the header. Finally, to ensure that the contents are correctly interpreted, the best way is to use the <code>tex2jax_ignore</code> class. <sup id="fnref-20-1"><a href="#fn-20-1" rel="footnote">1</a></sup> Anyways, if readers are also writers of HTML, $latex \LaTeX$, etc, they'll know what I intend to write by testing the HTML code, and for the remaining readers, I just apologize for the inconvenience caused and suggest them to right click the article in the default "Sidebar" view and press `` to reload for the correctly rendered contents. I've forgotten about anchors since toggling between the "Compose" and "HTML" modes while writing a new post will cause some strange change in the <code>href</code> attribute of the <code>a</code> tag.

<div class="footnotes">
<hr />
<ol>

<li id="fn-20-1">
<a href="http://github.com/mathjax/mathjax-docs/wiki/How-to-prevent-rendering:-use-tex2jax_ignore">How to prevent rendering: use tex2jax_ignore</a>&#160;<a href="#fnref-20-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>20</wp:post_id>
  <wp:post_date>2014-01-04 10:33:00</wp:post_date>
  <wp:post_date_gmt>2014-01-04 02:33:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giving-up-testing-mathjax-and-anchors-on-blogger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="mathjax"><![CDATA[MathJax]]></category>
  <category domain="category" nicename="web-technologies"><![CDATA[web technologies]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[7783804654440310874]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Escaping '$' in MathJax</title>
  <link>http://blogueun.wordpress.com/2014/01/04/escaping-in-mathjax/</link>
  <pubDate>Sat, 04 Jan 2014 02:09:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2014/01/04/escaping-in-mathjax/</guid>
  <description/>
  <content:encoded><![CDATA[Anyone who are used to $latex \LaTeX$'s <code>$</code> character<code>$</code> for switching to inline math mode would like to use the same command for the same thing on MathJax, which suggests the use of backslashed parentheses to enclose an inline math equation.  As a result, in <a href="http://docs.mathjax.org/en/latest/start.html#tex-and-latex-input" target="_blank">the very first part</a> of MathJax's official documentation, it contains several lines code for that.<br />After pasting the code inside the <code>head</code> tag, the above problem is solved, but this method creates <i>another</i> problem.<br />Imagine that you want to compare the price of a product of different companies.  You then typed <i>two prices on the same line</i>.
[code language="html" firstline="10" highlight="12"]
&lt;p&gt;...&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;Nowadays, it costs nearly $500. In the past, it only costs around $300. It's too expensive!&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;...&lt;/p&gt;
[/code]
Then the web browser will interpret the contents in this way:<br /><br />

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2014/01/5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904.png" style="margin-left:auto;margin-right:auto;"><img border="0" height="294" src="http://blogueun.files.wordpress.com/2014/01/5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904.png?w=300" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Wrongly interpreted contents</td></tr></tbody></table>

In order to get the problem fixed, I searched "mathjax escape dollar sign" and found Stack Overflow <a href="http://stackoverflow.com/questions/8773586/mediawiki-mathjax-need-to-use-escape-x" target="_blank">question 8773586</a> very useful.  Following the first answer for the question, I managed to get it right. That is, to change the it like this:
[code language="html" firstline="10" highlight="12"]
&lt;p&gt;...&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;Nowadays, it costs nearly &lt;span class=&quot;tex2jax_ignore&quot;&gt;$&lt;/span&gt;500. In the past, it only costs around &lt;span class=&quot;tex2jax_ignore&quot;&gt;$&lt;/span&gt;300. It's too expensive!&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;...&lt;/p&gt;
[/code]

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2014/01/5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805.png" style="margin-left:auto;margin-right:auto;"><img border="0" height="294" src="http://blogueun.files.wordpress.com/2014/01/5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805.png?w=300" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Correctly interpreted contents</td></tr></tbody></table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2014-01-04 10:09:00</wp:post_date>
  <wp:post_date_gmt>2014-01-04 02:09:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>escaping-in-mathjax</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="mathjax"><![CDATA[MathJax]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[2720518796742211131]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>C++ Hello World Using clang_complete and Vim</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/</link>
  <pubDate>Sun, 29 Dec 2013 09:52:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/</guid>
  <description/>
  <content:encoded><![CDATA[Many posts on the advantages of <a href="https://github.com/Rip-Rip/clang_complete">clang&#095;complete</a> have already been posted. For example, there's <a href="http://www.zwiener.org/vimautocomplete.html#sec2">a demonstration of the plugin</a> on Mac. If you can understand Chinese (or you have a translator that <em>truly</em> understands it), you may even look at more sites, such as <a href="http://aknow-work.blogspot.hk/2013/04/vim-clangcomplete.html">Chen's post</a>.

The authors of the above posts are likely to work in the IT sector. For new comers of programming, they may like to start from zero. On which platform can they start from? I'd recommend popular &#042;nix distributions (e.g. Debian-based/Fedora-based ones) due to their package managing tools like APT or YUM. For a M$ Vis&#042; Stu&#042; like code completion on Vim, clang_complete is the right answer, but it is often hard to install on M$ Win&#042;<sup id="fnref-22-1"><a href="#fn-22-1" rel="footnote">1</a></sup>, but the installation is incredibly easy on &#042;nix.<sup id="fnref-22-2"><a href="#fn-22-2" rel="footnote">2</a></sup>

Many writers of posts on clang_complete installation stopped writing further after completing the whole installation and configuration of the plugin, and I haven't seen any post that uses "hello world" as an example. This is alright since many users of Vim are experienced programmers who would like to demonstrate some advanced features of the editor with the additional plugin (e.g. jumping between Ctags), and a simple <code>hello.cpp</code> can't be used for that. Moreover, many teachers would teach programming on M$ Win&#042;, and even if a &#042;nix desktop is used, the work is most likely done using an IDE on GUI (Emacs is a text editor and IDE that runs on command line.) ... The concept of modal editing may be too hard for newbies to accept it, and you need to get several commands right before entering any text into a buffer. The steep learning curve might frighten learners away from Vim... Some computer users believe in the myth that Vim and Emacs are too old and nobody use them.

Anyways, the mixed use of both the built-in omni-complete function of Vim (invoked by <code>&lt;C-n&gt;</code> or <code>&lt;C-p&gt;</code>) and the popup menu of clang_complete (invoked by <code>&lt;C-x&gt;&lt;C-u&gt;</code>)to write a "hello world" program is a productive way of doing the job. However, due to the limitations of human mind, we can remember very few unfamiliar things at a time. This is not the case in storage devices. They can capture every word that come out of our mind, though many physical means of storage of information are subject to aging, especially those in the past... Luckily, information technology allows words, and even fonts, to be replicated efficiently and almost identically. This has brought the human race a variety of new subjects, such as web &#042;ng, and has extended our old knowledge into many fields, such as typography... In addition, the advancement of technology enables us to capture visible images and copy it rapidly, and I've recorded my experience of "hello world" using clang_complete with Vim on a series of screenshots.

In addition to adding Wu's custom vimrc configuration for clang_complete<sup id="fnref-22-3"><a href="#fn-22-3" rel="footnote">3</a></sup>, I've also installed vim-snipmate and vim-snippets for more auto-complete mappings.

Before actually beginning the steps for writing a "hello world", we should know that we <em>won't</em> learn anything from successes. It's <em>failures</em> that help us reflect on the mistakes in our understand of theories. Therefore, I'll <em>deliberately</em> find something wrong, and elaborate on that using some ideas. In other words, that's "to blow water" in Cantonese.

<h3>1. Comparison between clang_complete and the editor's built-in completion in typing <code>#include&lt;iostream&gt;</code></h3>

<h4>1.1 The editor's built-in completion</h4>

The following "hello world" procedure contains some <em>wrong</em> steps.

<a href="http://blogueun.files.wordpress.com/2013/12/55e7d-inc_complete.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/55e7d-inc_complete.gif?w=300" width="640" height="512" border="0" /></a>

<ol>
    <li>Type <code>inc&lt;Tab&gt;</code>.</li>
    <li>Vim-snippet completes the code, with <code>stdio.h</code> as default. The file name of the included file is selected so that you can input something else.</li>
    <li>Since <code>cout</code> is used later, we need to <code>#include&lt;iostream&gt;</code>. First type <code>io</code> to override the default input.</li>
    <li>Type <code>&lt;C-n&gt;</code> or <code>&lt;C-p&gt;</code> to get a completion list.</li>
    <li>Select <code>iostream</code> (without 's').</li>
    <li>Continue typing the whole program, and compile it.</li>
    <li>The source code fails!</li>
</ol>

Obviously, there's a syntax error at the line <code>#include&lt;iostream&gt;</code>. Thinking about the auto-completion function again, one will notice that the correct step is to press <code>&lt;Esc&gt;</code> after step 1, and use <code>ci&lt;</code> to clear the code inside the <code>&lt;&gt;</code> block, that's a good try, but I personally think that the steps can be more beautiful.

<h4>1.2 clang_complete's solution</h4>

This is just a <i>part</i> of correct steps. I leave the remaining parts of codes of this simple program into later sections.

<a href="http://blogueun.files.wordpress.com/2013/12/2b888-inc_complete_clang.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/2b888-inc_complete_clang.gif?w=300" width="640" height="512" border="0" /></a>

This time, after typing <code>#</code> at the beginning of the line, press <code>&lt;C-x&gt;&lt;C-u&gt;</code> to use the automatic completion list, and choose the <code># include</code> option with the <code>$`header'</code> surrounded by a <code>&lt;&gt;</code> block, <i>not</i> a double quote. Use <code>&lt;Alt-Tab&gt;</code> to select the inner <code>&lt;&gt;</code> block and type <code>io&lt;C-n&gt;</code> to use the built-in (<i>not</i> plugin) function to complete the code. (The <code>&lt;Alt-Tab&gt;</code> keystroke doesn't work in GUI, since it means changing the window on focus.)

Note: In this method, <code>stdio.h</code> needs to be included. Otherwise, the built-in insert completion popup menu containing <code>iostream</code> will not be shown.

<h3>2. Completion of <code>using namespace std;</code></h3>

<ol>
    <li>Without clang_complete: Directly type in everything, or use <code>&lt;C-n&gt;</code> for <i>word-by-word completion</i>.</li>
    <li>With clang_complete:  The completion menu can complete the whole line.</li>
</ol>

Analysis: Finding an item from a menu requires coordination of our eyes and hands, while typing the code directly requires more memory. For a newbie, the former should be easier since he/she doesn't waste time to recall his/her memory. For a geek, the later should be faster since the process has been repeated for many time. Luckily, being the second in the popup list, the problem of reaction time does not matter much if one looks at the list from the top to the bottom. Moreover, typing the code directly may lead to syntax errors. This problem can be overcome if one has the capability to read the error message from the compiler and to browse code quickly.

<table class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;" cellspacing="0" cellpadding="0" align="center">
<tbody>
<tr>
<td style="text-align:center;"><a style="margin-left:auto;margin-right:auto;" href="http://blogueun.files.wordpress.com/2013/12/a6c2d-using_complete.png"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/a6c2d-using_complete.png?w=300" width="640" height="512" border="0" /></a></td>
</tr>
<tr>
<td class="tr-caption" style="text-align:center;">Without clang_complete: word-by-word completion</td>
</tr>
</tbody>
</table>

<table class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;" cellspacing="0" cellpadding="0" align="center">
<tbody>
<tr>
<td style="text-align:center;"><a style="margin-left:auto;margin-right:auto;" href="http://blogueun.files.wordpress.com/2013/12/be5ee-using_clang.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/be5ee-using_clang.gif?w=300" width="640" height="512" border="0" /></a></td>
</tr>
<tr>
<td class="tr-caption" style="text-align:center;">With clang_complete: completion of the whole line</td>
</tr>
</tbody>
</table>

The remaining parts of this post <i>doesn't</i> make use of the clang_complete plugin.

<h3>3. The main method</h3>

Just typing <code>main&lt;Tab&gt;</code> will do. That's from vim-snippets.

<a href="http://blogueun.files.wordpress.com/2013/12/a640c-prog.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/a640c-prog.gif?w=300" width="640" height="512" border="0" /></a>

<h3>4. Greeting the world!</h3>

If you type <code>cout&lt;Tab&gt;</code>, you'll get <code>std::cout&lt;&lt;&nbsp;&nbsp;&lt;&lt;std::endl;</code>, with the cursor located in between the two whitespace characters in the middle. Using a regular expression to delete the <code>std::</code> in front of <code>cout</code> and <code>endl</code>.

<a href="http://blogueun.files.wordpress.com/2013/12/e2a4d-cout.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/e2a4d-cout.gif?w=300" width="640" height="512" border="0" /></a>

<h3>5. Getting the indentation correct</h3>

Modifying the c.snippet file maybe a bit troublesome, and may bring strange consequences to the plugin. If you don't have time to study the plugin, you may not like to bother it. Manually decreasing the indentation of the line <code>return 0;</code> each time is not likely to be an elegant solution for Vim Lovers. The actual way to fix the problem (using the command <code>gg=G</code> in the normal mode) is on p. 73 of the book Vi iMproved—Vim.<sup id="fnref-22-4"><a href="#fn-22-4" rel="footnote">4</a></sup>

<a href="http://blogueun.files.wordpress.com/2013/12/0b8fb-cindent.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/0b8fb-cindent.gif?w=300" width="640" height="512" border="0" /></a>

<h3>6. Running the program</h3>

For some newbies, it might be too much for them to digest if I discuss more on the creation of a sample makefile, which automatically executes more complicated compiling commands with a simple <code>make</code> command, searching "makefile tutorial" on the web will do. If you don't like the clang compiler, just substitute <code>clang++</code> with <code>g++</code>.

According to Henri Poincaré, a French mathematician, things are beautiful if they are simple. Repetition of facts build up our understanding. I end this post with a short and simple command that can be repeatedly used to compile .cpp source files with different file names. For more details about that, refer to my earlier post titled <i><a href="http://blogue-un.blogspot.hk/2013/12/fast-compilation-and-execution-of.html" target="_blank">Fast Compilation and Execution of Source Code</a></i>.

<a href="http://blogueun.files.wordpress.com/2013/12/ba443-run.gif"><img alt="" src="http://blogueun.files.wordpress.com/2013/12/ba443-run.gif?w=300" width="640" height="512" border="0" /></a>

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-22-1">
<a href="http://blog.chinaunix.net/uid-53564-id-3558537.html" target="_blank">http://blog.chinaunix.net/uid-53564-id-3558537.html</a>&#160;<a href="#fnref-22-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-22-2">
<a href="http://changyy.pixnet.net/blog/post/31706673-%5Bvim%5D-using-clang_complete-plugin-@-ubuntu-12.04" target="_blank">http://changyy.pixnet.net/blog/post/31706673-%5Bvim%5D-using-clang_complete-plugin-@-ubuntu-12.04</a>&#160;<a href="#fnref-22-2" rev="footnote">&#8617;</a>
</li>

<li id="fn-22-3">
<a href="http://blog.wuwon.id.au/2011/10/vim-plugin-for-navigating-c-with.html" target="_blank">http://blog.wuwon.id.au/2011/10/vim-plugin-for-navigating-c-with.html</a>&#160;<a href="#fnref-22-3" rev="footnote">&#8617;</a>
</li>

<li id="fn-22-4">
<a href="ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf" target="_blank">ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf</a>&#160;<a href="#fnref-22-4" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2013-12-29 17:52:00</wp:post_date>
  <wp:post_date_gmt>2013-12-29 09:52:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>c-hello-world-using-clang_complete-and-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cc"><![CDATA[C/C++]]></category>
  <category domain="post_tag" nicename="clang_complete"><![CDATA[clang_complete]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[4771222369266180269]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Don't Kill a Fly with a Cannon—Console Creation of GIF Files</title>
  <link>http://blogueun.wordpress.com/2013/12/29/dont-kill-a-fly-with-a-cannon-console-creation-of-gif-files/</link>
  <pubDate>Sun, 29 Dec 2013 00:30:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/29/dont-kill-a-fly-with-a-cannon-console-creation-of-gif-files/</guid>
  <description/>
  <content:encoded><![CDATA[As the saying goes, a picture is worth a thousand words. Some netizens believe that if a picture tells the truth.

If you want to take a screenshot in Linux text mode, you may use <code>fbgrab</code> to get a PNG file (<code>fbcat</code> gives you a PPM file).

If you want to illustrate a process with a series of pictures, then you'll probably need a GIF file. GIMP provides an easy way of creating GIF files by selecting menu items and clicking a few buttons, but for geeks who are used to command line interfaces (CLI), this is not the final answer for them.

With reference to Unix &amp; Linux Stack Exchange question 24014<sup id="fnref-23-1"><a href="#fn-23-1" rel="footnote">1</a></sup>, if your source PNG files are named as <code>[name]%s.png</code>, then the right command is:

[code lang=bash]
$ convert $(for ((a=0; a&lt;700; a++)); do printf -- &quot;-delay 10 [name]%s.png &quot; $a; done;) [result].gif
# `-delay 10&#039; means that each image is displayed for 0.1s.
# [name]: file name of the source PNG files without the ordinal number.
# `%s&#039;: the n-th PNG file.
# [result]: file name of the target GIF file.
[/code]

Without the whitespace between <code>png</code> and the ending <code>"</code>, things <em>won't</em> work.
If the GIF animation has not been finished and intermediate files need to be saved, <em>don't</em> use the .gif format, use .miff instead.<sup id="fnref-23-2"><a href="#fn-23-2" rel="footnote">2</a></sup>

<div class="footnotes">
<hr />
<ol>

<li id="fn-23-1">
<a href="https://unix.stackexchange.com/questions/24014/creating-a-gif-animation-from-png-files">Creating a GIF animation from PNG files</a>&#160;<a href="#fnref-23-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-23-2">
<a href="http://www.imagemagick.org/Usage/anim_basics/#gif_anim">GIF Animations and Animation Meta-data</a>&#160;<a href="#fnref-23-2" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2013-12-29 08:30:00</wp:post_date>
  <wp:post_date_gmt>2013-12-29 00:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dont-kill-a-fly-with-a-cannon-console-creation-of-gif-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="imagemagick"><![CDATA[ImageMagick]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[7497070610372483686]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My Experience of Using Vim.js</title>
  <link>http://blogueun.wordpress.com/2013/12/23/my-experience-of-using-vim-js/</link>
  <pubDate>Mon, 23 Dec 2013 07:56:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/23/my-experience-of-using-vim-js/</guid>
  <description/>
  <content:encoded><![CDATA[To use Vim in other computers, the official website of PortableApps has already provided users <a href="http://portableapps.com/apps/development/gvim_portable">a satisfactory solution</a>. The installation size is about 28 MB (according to the released figure). If you won't have it installed in a portable device and don't want to download and install it into a new machine each time, maybe you can try <a href="http://coolwanglu.github.io/vim.js/web/vim.html">Vim.js</a>. However, I've found it slow, when compared to a Vim program.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2013-12-23 15:56:00</wp:post_date>
  <wp:post_date_gmt>2013-12-23 07:56:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-experience-of-using-vim-js</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim-js"><![CDATA[Vim.js]]></category>
  <category domain="category" nicename="web-technologies"><![CDATA[web technologies]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8926163767951838263]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>465ff-add_gadget</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-4-giving-up-using-bloggers-dynamic-view/465ff-add_gadget/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:12 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/465ff-add_gadget.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2014-01-10 18:28:12</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>465ff-add_gadget</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>11</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/465ff-add_gadget.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-p0F26IopjQM/Us0rWQXBjwI/AAAAAAAAAGw/58EyqoB_SXw/s1600/add_gadget.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vi Key Bindings in Emacs</title>
  <link>http://blogueun.wordpress.com/2013/12/23/vi-key-bindings-in-emacs/</link>
  <pubDate>Mon, 23 Dec 2013 07:40:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/23/vi-key-bindings-in-emacs/</guid>
  <description/>
  <content:encoded><![CDATA[From Wikipedia's post on the Editor's War, we can see some nicknames of GNU Emacs, such as "EMACS Makes All Computers Slow", "Esc Meta Alt Ctrl Shift", etc. I found the second one true. I tried using Viper, but it's inconvenient to browse info files since the <code>&lt;C-]&gt;</code> button doesn't work. As a result, I need to toggle Viper using <code>&lt;C-z&gt;</code> all the time. Nevertheless, it's too inconvenient.  Maybe that's because of my low level of Viper set (level 1), and there are other plug-ins that enables users to use Vi(m)'s key bindings in Emacs, but I'm tired of this sort of tedious work.

After overcoming a steep slope in the very first part of the learning curve of a powerful tool, maybe you'll find out that there's some other more productive tool for doing the job. That's not something new and that's the reason for so many different tools to come up. For example, Vim is originally intended to be part of the shell, and you've spent hours to get a Vim plug-in for GDB integration (e.g. pyclewn). Finally you found out that you forgot that both Emacs and GDB are developed by GNU, and they are the early famous softwares from GNU, so they should work well together. Otherwise, how can GNU encourage users to use free softwares? Therefore, it's sensible to expect that Emacs has a built-in support for GDB (and it does!).

<em>Hence, the best way is to be flexible and use suitable tools to do different jobs.</em>

After realising the use of both of the two most famous text editors for *nix users, it's important for us to get use to them. As a Vim user, reading the official Emacs tutorial available on the homepage of Emacs, I've found out that it's too long if what I need is to do some basic editing work. Some introductory web pages on elementary Emacs commands from some tertiary educational institutions can help some newbies of Emacs, but if you can link up new knowledge with any previously known ideas, it'll be even better to refer to <a href="http://www.elmindreda.org/emacs.html">this post</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2013-12-23 15:40:00</wp:post_date>
  <wp:post_date_gmt>2013-12-23 07:40:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vi-key-bindings-in-emacs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
  <category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="viper"><![CDATA[Viper]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5292250360407989136]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Writing Vim's Output to Files</title>
  <link>http://blogueun.wordpress.com/2013/12/12/writing-vims-output-to-files/</link>
  <pubDate>Thu, 12 Dec 2013 09:01:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/12/writing-vims-output-to-files/</guid>
  <description/>
  <content:encoded><![CDATA[<h3>Changing environment variables in vimrc</h3>

Refer to <a href="http://vim.wikia.com/wiki/Environment_variables">Vim Wiki's page on environment variables</a>. The tips uses paths in <em>nix in the examples. However, for Win</em>, some inexperienced users don't know whether slashes or backslashes should be used. In fact, backslashes should be used, and the string should be enclosed by a pair of single quote (I don't know if double quotes work.) Then things should run. If you're unlucky and receive a runtime error in the next time you start Vim, then it may be due to the missing space characters around the equal sign.

<h3>Writing external commands to files</h3>

It's easy! (<code>:r ![command]</code> will do.)

<h3>Writing variables to files</h3>

Use the <code>=</code> register. First get into normal mode, then type the following commands.
[code gutter="false"]
&quot;=[sth_to_eval]p
[/code]
The <code>p</code> have to be typed before any further changes of contents. Otherwise, it may not work. For details, see <a href="http://unix.stackexchange.com/questions/8101/how-to-insert-the-result-of-a-command-into-the-text-in-vim">Unix &amp; Linux Stack Exchange question 8101</a>.

<h3>Writing internal commands to files</h3>

A forum post has answered my doubt. I redirect interested readers to <a href="http://objectmix.com/editors/786190-how-redirect-vim-internal-command-output-current-buffer.html">here</a>.

<h3>Quick reference lists of some easy Vim commands</h3>

There's "<a href="http://www.catswhocode.com/blog/100-vim-commands-every-programmer-should-know">100 Vim commands every programmers should know</a>". Another page: <a href="http://php.dzone.com/articles/130-essential-vim-commands">130+ Essential Vim Commands</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2013-12-12 17:01:00</wp:post_date>
  <wp:post_date_gmt>2013-12-12 09:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>writing-vims-output-to-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[2825688346851952092]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>a64c1-trail</title>
  <link>http://blogueun.wordpress.com/2014/01/04/gnu-ddrescue-a-powerful-data-recovery-tool/a64c1-trail/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:12 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/a64c1-trail.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2014-01-10 18:28:12</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a64c1-trail</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>17</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/a64c1-trail.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-FLWfIdvnZtA/UshISVKbvOI/AAAAAAAAAGA/etPzYDNpLVA/s1600/trail.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/</link>
  <pubDate>Wed, 11 Dec 2013 09:01:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/</guid>
  <description/>
  <content:encoded><![CDATA[<span class="important_notice"><i>Note: In Stack Overflow question 12339415, it is suggested that clang is better. For its installation, refer to its another fan's <a href="http://aknow-work.blogspot.hk/2013/04/vim-clangcomplete.html" target="_blank">blog</a>.</i></span><br />Background: OmniCppComplete is a great Vim plugin that has the popup menu like many big IDEs. <a href="http://youtu.be/MQy2rVOf-z0" target="_blank">A Youtube video</a> can show the power of OmniCppComplete.<br />Download: OmniCppComplete requires ctags.<br />

<ol><li>OmniCppComplete: <a href="https://github.com/FromtonRouge/OmniCppComplete" target="_blank">GitHub Repository</a> (To avoid mixing up of files from different plugins, use one plugin management plugin like Pathogen or Vundle.)</li><li>Ctags: <a href="http://ctags.sourceforge.net/" target="_blank">Official homepage</a> on SourceForge (The .zip file for Win* 2**0 is fine.)</li></ol>

For more detailed information on the installation of ctags, please refer to my earlier blog post <a href="http://blogue-un.blogspot.hk/2013/12/links-to-good-posts.html" target="_blank"><i>Links to Good Posts</i></a>.<br />Problem: Reading the OmniCppComplete's documentation only, you won't be able to understand how to use this plugin, so follow some tutorials, and the most viewed one should be on <a href="http://vim.wikia.com/wiki/C%2B%2B_code_completion" target="_blank">Vim Tips Wiki</a>. Followed its guidance, I got error in typing <code>std::</code> in a new .cpp file. Omni completion told me something like "pattern not  match". I spent nearly 2 hours to figure out what's wrong, and finally  managed to fully understand the contents of <a href="http://carl830.pixnet.net/blog/post/67681043-vim-omnicppcomplete%2Bstl-support" target="_blank">this blog entry</a>.<br />Now, I'm going to make <u>a Win* version of Vim Tips Wiki's tutorial</u>, using the ideas from Carl.<br />Solution: <br />

<ol><li>I suppose OmniCppComplete and ctags are installed properly.</li><ul><li>OmniCppComplete does not mix up with other plugins.<br />Note: For gVimPortable, do store files under the Data folder, but NOT the $VIMRUNTIME file. Otherwise the settings will be lost after upgrading gVimPortable.</li><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/7d448-pathogen.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/7d448-pathogen.png?w=300" height="499" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">The folder for different plugins are separated (except the plugin management plugin itself).</td></tr></tbody></table><li>Typing <code>:h omnicppcomplete</code> in Vim normal mode gives up the help file for OmniCppComplete. </li><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/c9495-omnicpp.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/c9495-omnicpp.png?w=300" height="480" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Typing <code>:h omnicppcomplete</code> gives you the corresponding help file.</td></tr></tbody></table><li>The folder for ctags is in the PATH environment variable.<br />Follow <a href="http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx" target="_blank">this page</a> for setting the PATH variable.<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/a8039-ctags.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/a8039-ctags.png?w=300" height="313" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">C:\ctags58 should be in the PATH variable.</td></tr></tbody></table></li></ul><li>Download the <a href="http://www.vim.org/scripts/script.php?script_id=2358" target="_blank">modified libstdc++ headers</a> from <a href="https://github.com/vim-scripts/tags-for-std-cpp-STL-streams-..." target="_blank">GitHub</a>.</li><li>Unzip the folder and place it under "somewhere meaningful to you"<br />My suggestion: <code>C:\Users\[your-user-name]\.vim</code><br />Here you can substitute <code>[your user name]</code> with your <u>real</u> user name on Win*.<br />Note: In the dialogue (in case you use GUI), DON'T input <code>tags</code> at the end. Otherwise, you'll get <code>C:\Users\[your-user-name]\.vim<b><span class="wrong_code">\tags</span></b>\tags</code></li><li>If things go right, you should have <code>C:\Users\[your-user-name]\.vim\tags</code><br />Go to that directory by typing <code>cd .vim\tags</code> in Win*'s Command Prompt, which can be involked by typing <code>cmd</code> in the "Start" menu. (For XP, choose "Run" and type "cmd" in the popup dialogue. If you like choosing from the menu, follow <a href="http://windows.microsoft.com/en-hk/windows-vista/open-a-command-prompt-window" target="_blank">the way on the official website</a>.)<br />At first, a commad prompt should be like this.<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/5e9bc-cmd.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/5e9bc-cmd.png?w=300" height="417" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">The current directory is <code>C:\Users\Owner</code>.</td></tr></tbody></table><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/6ef3f-cmd2.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/6ef3f-cmd2.png?w=300" height="420" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Change the current directory to <code>C:\Users\Owner\.vim\tags</code>.</td></tr></tbody></table>The contents should be shown by typing <code>dir</code> (There're so many files that I use the <code>/w</code> option to save space.)</li><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float:left;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/c8f73-dir1.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/c8f73-dir1.png?w=278" height="640" width="593" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">The contents are in the right place, so we may proceed.</td></tr></tbody></table><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/24629-ctags1.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/24629-ctags1.png?w=300" height="419" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Get a list of ctags.</td></tr></tbody></table>To get a list of ctags, the correct command:
[code gutter="false"]
&amp;gt;ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ -f cpp .
[/code]
The one you see on Vim Tips Wiki:
[code gutter="false"]
&amp;gt;ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ -f cpp cpp_src
[/code]
<li>Then you should have a huge list of ctags with the file name cpp. Not adding the additional tags for OpenGL, etc, is OK.</li><li>Finally, adding the lines found in the Vim Tips Wiki into your vimrc will do.<br />Note: If you don't add the additional tags in step 5, then the following lines should NOT be added.
[code gutter="false"]
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl
set tags+=~/.vim/tags/qt4
[/code]
</li></ol>

<h3>Testing</h3>

A picture can illustrate the feature well. Typing <code>std::</code>, you'll get a popup list. <br />

<div class="separator" style="clear:both;text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/2260b-omni.png" style="margin-left:1em;margin-right:1em;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/2260b-omni.png?w=300" height="419" width="640" /></a></div>

<h3>Incompatibility with clang_complete</h3>

Note that Omnicppcomplete is <i>incompatible</i> with another Vim plugin called clang_complete, due to its "unconditional popup of completion list". To understand this, the following pictures give a good interpretation.<br /><br />In Omnicppcomplete, after typing <code>std::</code>, the completion list will pop up.<br />However, in clang_complete, since the information is from the clang compiler, you need to give the syntax in the right position for the compiler so as to let the completion list to show up.<br /><br />

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/a4439-std_err.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/a4439-std_err.png?w=300" height="430" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Missing <code>#include</code></td></tr></tbody></table>

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png?w=300" height="430" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Still wrong position of the input</td></tr></tbody></table>

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png" style="margin-left:auto;margin-right:auto;"><img border="0" src="http://blogueun.files.wordpress.com/2013/12/04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png?w=300" height="430" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">Right position</td></tr></tbody></table>

In Ubuntu, it's easy to install. Note that you need <code>clang-dev</code> as well. For Win*, maybe you need to download the source. (I hope there will be a <i>compiled version of the compiler</i>.)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2013-12-11 17:01:00</wp:post_date>
  <wp:post_date_gmt>2013-12-11 09:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cc"><![CDATA[C/C++]]></category>
  <category domain="post_tag" nicename="clang_complete"><![CDATA[clang_complete]]></category>
  <category domain="post_tag" nicename="omnicppcomplete"><![CDATA[OmniCppComplete]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[2857421189648751971]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Choosing a Font for gVim</title>
  <link>http://blogueun.wordpress.com/2013/12/11/choosing-a-font-for-gvim/</link>
  <pubDate>Wed, 11 Dec 2013 03:39:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/11/choosing-a-font-for-vim/</guid>
  <description/>
  <content:encoded><![CDATA[Unclear difference in appearance between 1 with l, 0 with O can be a source of inconvenience for computer users. This summer, I've found <a href="http://hivelogic.com/articles/top-10-programming-fonts" target="_blank">this site</a> informative, but I quickly forgot it.<br />Installation of many fonts in some popular Linux distributions can be done in GUI just like Win*, so I attempted to change my default font on Vim, and a picture is worth a thousand words. <br />The following command from <a href="http://vim.wikia.com/wiki/VimTip632" target="_blank">Vim Tips Wikia</a> will do: <code>:set guifont=[font-name]:h[font-size]</code>. (Escape the whitespace character with a backslash, i.e. use <code>\ </code> to represent a whitespace.)<br /><br />

<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left:auto;margin-right:auto;text-align:center;"><tbody><tr><td style="text-align:center;"><a href="http://blogueun.files.wordpress.com/2013/12/15b84-gvim.png" style="margin-left:auto;margin-right:auto;"><img alt="gVim with Inconsolata 12pt" border="0" height="427" src="http://blogueun.files.wordpress.com/2013/12/15b84-gvim.png?w=300" title="gVim with Inconsolata 12pt" width="560" /></a></td></tr><tr><td class="tr-caption" style="text-align:center;">gVim with Inconsolata 12pt</td></tr></tbody></table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2013-12-11 11:39:00</wp:post_date>
  <wp:post_date_gmt>2013-12-11 03:39:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>choosing-a-font-for-gvim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gvim"><![CDATA[gVim]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[4228093789112193086]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[choosing-a-font-for-vim]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>23c75-paint</title>
  <link>http://blogueun.wordpress.com/2014/01/09/write-blog-offline/23c75-paint/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:13 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/23c75-paint.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2014-01-10 18:28:13</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>23c75-paint</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>7</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/23c75-paint.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-yC0PT7bl02o/Us6MF4t325I/AAAAAAAAAHA/FgZyPHiqPRs/s1600/paint.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Links to Good Posts</title>
  <link>http://blogueun.wordpress.com/2013/12/11/links-to-good-posts/</link>
  <pubDate>Wed, 11 Dec 2013 03:03:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/11/links-to-good-posts/</guid>
  <description/>
  <content:encoded><![CDATA[<h3>Taglist installation</h3>

<a title="Taglist" href="http://github.com/vim-scripts/taglist.vim" target="_blank">Taglist</a> is a popular Vim plugin and it requires <a title="Exuberant Ctags" href="http://ctags.sourceforge.net/" target="_blank">Ctags</a>. c9s has given <a href="http://c9s.blogspot.hk/2007/07/setting-up-ctags-gvim-in-windows.html" target="_blank">a detailed description of the installation of Ctags</a>. I've found out that putting the whole <code>ctags58</code> folder under the <code>C</code> drive and adding it to the <code>PATH</code> environment variable will do. You don't need to copy <code>ctags.exe</code> under the <code>C</code> drive or <code>$VIMRUNTIME</code>.

TheGeekStuff has <a href="http://vim.wikia.com/wiki/VimTip632" target="_blank">a web page</a> which described numerous powerful functions of Taglist.

<h3>Some VIMRC settings</h3>

I've learnt something about vim keyboard mappings by reading <a href="http://alexanderle.com/blog/2012/my-vimrc.html" target="_blank">Le's post on customized VIMRC settings</a>.Using this knowledge, I can do something that I couldn't do last month.

<h3>Automatic completion of unclosed braces/brackets</h3>

Unmatched brackets/braces are the cause of a host of syntax errors in source code. Some novices probably spend hours to find it out, and then say something that their high school teachers will never approve. <a href="http://vim.wikia.com/wiki/Automatically_append_closing_characters" target="_blank">A Vim Tips</a> contains a simple solution that enable users to get the job done. However, I'm not accustomed to its differences with Vim-$latex \LaTeX$, so I decided to add the following lines of code into my VIMRC file:

[code firstline="64"]
inoremap (      ()&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap (&lt;CR&gt;  (&lt;CR&gt;)&lt;Esc&gt;O
inoremap ((     (
inoremap ()     ()&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap [      []&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap [&lt;CR&gt;  [&lt;CR&gt;]&lt;Esc&gt;O
inoremap [[     [
inoremap []     []&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap {      {}&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap {&lt;CR&gt;  {&lt;CR&gt;}&lt;Esc&gt;O
inoremap {{     {
inoremap {}     {}&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
[/code]

After the user types <code>&lt;C-j&gt;</code>, the cursor will jump to the position of the placeholder <code>&lt;++&gt;</code> and the whole placeholder will disappear, just like $latex \LaTeX$-Suite.

<h3>New keyboard shortcuts of my gVim</h3>

Finally, I decided to use <code>&lt;F3&gt;</code> and <code>&lt;F12&gt;</code> in normal mode for toggling NERDTree and Taglist respectively.

[code firstline="76"]
nnoremap &lt;F3&gt; :NERDTreeToggle
nnoremap &lt;F12&gt; :TlistToggle
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2013-12-11 11:03:00</wp:post_date>
  <wp:post_date_gmt>2013-12-11 03:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>links-to-good-posts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ctags"><![CDATA[Ctags]]></category>
  <category domain="post_tag" nicename="taglist"><![CDATA[Taglist]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[4462930454414739992]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904</title>
  <link>http://blogueun.wordpress.com/2014/01/04/escaping-in-mathjax/5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:13 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2014-01-10 18:28:13</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>21</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/5b4b0-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175904.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-5Fpv8GgfNwQ/Usfcz1zaIyI/AAAAAAAAAFo/WgGYzxvQDC0/s1600/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2014-01-04+17:59:04.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2e8d5-template</title>
  <link>http://blogueun.wordpress.com/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-4-giving-up-using-bloggers-dynamic-view/2e8d5-template/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:13 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/2e8d5-template.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2014-01-10 18:28:13</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2e8d5-template</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>11</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/2e8d5-template.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-nrlXwRSi2aA/UsmQx2MtoEI/AAAAAAAAAGU/s8xvZjRCqA8/s1600/template.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2ea26-template</title>
  <link>http://blogueun.wordpress.com/2014/01/06/testing-online-code-syntax-highlighters-for-blogs-1-syntaxhighlighter/2ea26-template/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:13 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/2ea26-template.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>36</wp:post_id>
  <wp:post_date>2014-01-10 18:28:13</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2ea26-template</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>15</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/2ea26-template.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-JqIpJVBXSuo/UsmXsLppuXI/AAAAAAAAAGg/rHaNjkhY5U8/s1600/template.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805</title>
  <link>http://blogueun.wordpress.com/2014/01/04/escaping-in-mathjax/5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:14 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2014-01-10 18:28:14</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>21</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/5b673-e89ea2e5b995e693b7e59c96e5ad98e782ba2014-01-04175805.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-Px7Zj2RTk6U/UsfdEFKcm1I/AAAAAAAAAFw/kU1gYFVQVj4/s1600/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2014-01-04+17:58:05.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vim File Name Modifier</title>
  <link>http://blogueun.wordpress.com/2013/12/11/vim-file-name-modifier/</link>
  <pubDate>Tue, 10 Dec 2013 21:19:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/11/vim-file-name-modifier/</guid>
  <description/>
  <content:encoded><![CDATA[Typing <code>:h %:p</code> will give you a list of file name modifiers in <code>cmdline.txt</code>, and the section below <code>filename-modifiers</code> is <code>extension-removal</code>. The list maybe too detailed, especially for users who don't have much time to learn it. Bram Moolenaar, the father of Vim once said that trying to learn all the things in his lecture called <a href="http://www.moolenaar.net/habits.html" target="_blank">7 Habits of Effective Text Editing</a> (see habit 7). (The video is on <a href="http://youtu.be/p6K4iIMlouI" target="_blank">Youtube</a>.) Fortunately, there're some examples below the list. I found some useful in the following cases. <br />

<h3>Case 1: Executing compiled programs</h3>

See <a href="http://blogue-un.blogspot.hk/2013/12/fast-compilation-and-execution-of.html" target="_blank">my another blog post on programming with Vim</a> for details.! <br />

<h3>Case 2: Finding old files</h3>

<ol><li>Type <code>:old</code> for a list of recently opened files (some may not appear)</li><li>If you can find a right file, note its corresponding line number on the list and type <code>:e #&lt;[num]</code> to open the file.</li></ol>

<h3>Case 3: Searching contents of <i>The User Manual</i></h3>

In the very first section of the user manual, it's said that users should read the user manual "from the beginning to the end like a book". However, you sometimes don't have much time to do so and you need to quickly perform some tasks not covered in the sections of the user manual that you've read, such as compiling programs. Using the command <code>:![compiler] [src-file] ...</code> and <code>:![command-to-run-prog]</code> is already good since you don't have to leaving Vim, but you may want to see if Vim has some special features. Searching something like "vim c programming" probably gives users links to an array of GitHub repositories for Vim plugins. Even though you have <a href="https://github.com/tpope/vim-pathogen" target="_blank">Pathogen</a> or <a href="https://github.com/gmarik/vundle" target="_blank">Vundle</a>, if things are in conflict with each other, you need a lot of time to figure out the culprits and fix the problem. If there's already something written on the official manual, why don't read them first?<br />The official manual has 2 parts, namely the user manual and the reference manual. For the former, the contents are easier to learn, but the parts are often hard to locate with <code>:h howto</code> and search commands. For the latter, it's easier to locate with <code>:h [sth]</code> since you can pass the <code>[command]</code> that you don't know to <code>[sth]</code> before reaching a relevant section that is too hard for you to keep reading. Therefore, <i>searching contents in the user manual is needed</i>.<br />Then you have to extract the path of the documentation files, which in under some folders that you don't know. Searching it with a file browser will certainly be ineffective, which using searching commands in the terminal needs time and may not guarantee a success due to the possibility of making syntax errors. A more efficient approach is, assuming that the reference manual is <i>near</i> to the user manual, to first open only page in the reference manual in order to make use of <code>%</code> in Vim commands for the extraction of the path of the user manual. Of course you need to check the <i>actual</i> contents inside the directory. (I have <a href="https://github.com/scrooloose/nerdtree" target="_blank">NERDTree</a> installed so I use <code>:NERDTree %</code> for a popup file tree and <code>cd</code> for a change of current directory.)<br />Thus, with some knowledge in the reference manual (I learn this from <code>:h %:p</code>.), one will find out that the modifier needed is <code>:h</code>. In <em>nix, the command <code>grep</code> can find contents in a file; in Win</em>, I'm too lazy to something new so I use something like Cygwin for <code>grep</code>.<br />

<h3>Case 4: More about extraction of path of the current file</h3>

In the previous case, <code>%</code> and its modifiers enables you to refer to the path of the file, but you don't <i>see</i> its full path. In order to do so, type <code>:echo expand("%")</code>. <br />

<h3>Conclusion: Stop repeatedly typing the same long thing</h3>

Leave machines to machines since they can efficiently replicate long things. That's another tip from Bram Moolenaar (<a href="http://www.moolenaar.net/habits.html" target="_blank">Tip 2</a>).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2013-12-11 05:19:00</wp:post_date>
  <wp:post_date_gmt>2013-12-10 21:19:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vim-file-name-modifier</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8700870392199343593]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Something about Win* batch files</title>
  <link>http://blogueun.wordpress.com/2013/12/11/something-about-win-batch-files/</link>
  <pubDate>Tue, 10 Dec 2013 19:10:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/11/something-about-win-batch-files/</guid>
  <description/>
  <content:encoded><![CDATA[<h3>Get drive letter</h3>

If you run portable devices from a USB stick, sometimes you need to refer to other files that is in the same USB drive. Their relative position is stable, but the drive letter is not. Thus, referring to those files by absolute path doesn't work, unless you do the tedious modifications every time.
- Method 1: <code>set var=%cd:~0,3%</code>
- Method 2: <code>set var=%~d0</code> (preferred) Use variable: <code>%var%</code>

<h3>Alias on Win&#042;</h3>

If you're familiar with &#042;nix and use M$-DOS, you may unconsciously type the <code>ls</code> command in DOS; or if you have a portable version of a software and you need to launch it by command, you will discover the difference between the name of the programs—one has <code>portable</code> at the end while the other one doesn't.

Copy and paste the following lines of code into any text editor.
[code gutter="false"]
@ECHO OFF
[command] %*
[/code]
Save the whole file as <code>[alias].bat</code> and put the file under any folder found on <code>PATH</code> environment variable.

Run <code>[alias]</code> in the command prompt to see the effect.

Note: <code>%</code> <em>in Win&#042;</em> is the same as <code>$*</code> in &#042;nix.<sup id="fnref-43-1"><a href="#fn-43-1" rel="footnote">1</a></sup>

<div class="footnotes">
<hr />
<ol>

<li id="fn-43-1">
<a href="http://windowsitpro.com/windows-server/how-can-i-output-all-batch-files-arguments">How can I output all of a batch file's arguments?</a>&#160;<a href="#fnref-43-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2013-12-11 03:10:00</wp:post_date>
  <wp:post_date_gmt>2013-12-10 19:10:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>something-about-win-batch-files</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bat"><![CDATA[.bat]]></category>
  <category domain="category" nicename="m-win"><![CDATA[M$ Win*]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[3303306152780556646]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Vim Keystrokes in Web Browser</title>
  <link>http://blogueun.wordpress.com/2013/12/10/using-vim-keystrokes-in-web-browser/</link>
  <pubDate>Tue, 10 Dec 2013 12:01:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/10/using-vim-keystrokes-in-web-browser/</guid>
  <description/>
  <content:encoded><![CDATA[Vim fans will be delighted and amazed for knowing this the first time: Vimperator is the plugin for Vim-like behaviour on Firefox. It's the original one and it focuses on usability. Following the hints with <code>f</code> is great! Here're some useful keystrokes:

<ul>
    <li>To open a link in a new tab, type <code>F</code> and follow the hints</li>
    <li>To move the [num]-th tab, type <code>[num]gt</code> (applicable to Vim also)</li>
    <li>To go to another page, type <code>o</code></li>
    <li>To go to another page with similar URL, type <code>O</code></li>
    <li>To open another tab, type <code>t</code></li>
    <li>To open another tab with similar URL, type <code>T</code></li>
    <li>To open another window, type <code>w</code></li>
    <li>To open another window with similar URL, type <code>W</code></li>
    <li>To copy the URL of the current page (including "#*"), type <code>y</code></li>
    <li>To copy the URL of the targeted link, type <code>;y</code></li>
    <li>To copy the current selection, type <code>Y</code></li>
    <li>To copy the labeling text of a link, type <code>;Y</code></li>
    <li>To disable Vimperator for one instance, type <code>i</code></li>
    <li>To toogle Vimperator, type <code>&lt;S-Esc&gt;</code></li>
    <li>To move the last edited text field, type <code>gi</code></li>
    <li>To open Vim for editing input in a textfield/textarea, type <code>&lt;C-i&gt;</code> in insert mode</li>
    <li>To exit the insert mode of a textfield/textarea, the key is the same as the one you use for Vim.</li>
    <li>To enter the insert mode of a textfield/textarea from the normal mode, either follow the suitable hint or use <code>c</code> to re-enter there (may fail and enter into the caret mode).</li>
    <li>To search the history, type <code>:hist [anything] </code></li>
    <li>In a pop-up browsing history list, press <code>&lt;CR&gt;</code> and <code>;o</code> to follow a hint. You can type more to filter the suitable one. Typing a capital O instead of a small letter o gives you <code>:open [wanted_link]</code></li>
</ul>

More keystrokes from <a href="http://chudq.wordpress.com/2009/01/24/my-favourite-vimperator-keys/" target="_blank">here</a>, and a cheat sheet <a href="http://sheet.shiar.nl/vimperator" target="_blank">there</a>.

<h3>Another useful plugin</h3>

Google/Yandex search link fix enables true copying of the link's URL in Google's search results.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>44</wp:post_id>
  <wp:post_date>2013-12-10 20:01:00</wp:post_date>
  <wp:post_date_gmt>2013-12-10 12:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>using-vim-keystrokes-in-web-browser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vimperator"><![CDATA[Vimperator]]></category>
  <category domain="category" nicename="web-technologies"><![CDATA[web technologies]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1850639215871726345]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fast Compilation and Execution of Source Code</title>
  <link>http://blogueun.wordpress.com/2013/12/10/fast-compilation-and-execution-of-source-code/</link>
  <pubDate>Tue, 10 Dec 2013 11:23:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/10/fast-compilation-and-execution-of-source-code/</guid>
  <description/>
  <content:encoded><![CDATA[Possible software: Vim.

<h3>Why?</h3>

In a heavy IDE, you need to click a button or some keyboard shortcuts.  Unless you frequently use the keystrokes, you'll likely forget them since they are usually non-transferable IT skills.

It's different in Vim. Since it's an F/OSS programmable editor, you can add whatever plugins and extra functions you like. You can adjust you .vimrc file so that the editing environment won't have too many <em>undesirable</em> changes.

Vim is lightweight. If your computer collapses (or even gives you the notorious BoD before RiP) due to loading IDE, Vim is your choice since it may still work with some good design and functions.

What are the good things?

<ol>
<li>Diminished role of mouse and more use of keyboard due to modes</li>
<li>Syntax highlighting and file type detection</li>
</ol>

<h3>How? (Doesn't need c.vim)</h3>

<ol>
<li>Set up <code>makefile</code> (<a href="http://kevincrazy.pixnet.net/blog/post/29780477-makefile%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8...">simple tutorial about makefile</a>)</li>
<li>Run <code>:make</code></li>
<li>Run <code>:!./%&lt;</code> on &#042;nix (or simply <code>:!%&lt;</code> on M$ Win&#042;)</li>
</ol>

Notes:
1.  <code>set makeprg=mingw32-make</code> in vimrc for MinGW make (<a href="https://sites.google.com/site/jamespandavan/Home/c-c/getting-started-with-c-c-programming-with-vim">more details about <code>makeprg</code></a>)
2.  <code>%</code> stands for the current file, and <code>&lt;</code> stands for the file name without extension.

Advantages:
-   In the whole process, you don't have to leave Vim and keyboard.
-   <em>The commands are the same whatever your files are</em> (already determined by <code>makefile</code>), so you <em>don't waste time to think and type</em> in the correct name.

2 quotes from Sharpe (I don't remember the exact wordings):

<blockquote>
  "The battle is not in the hands of who give the most shots. It should be those who shot the best."
  "A good soldier can fire 3-4 rounds a minute."
</blockquote>

<h3>My sample <code>makefile</code>:</h3>

[code lang=text]
hello : hello.c
    gcc -o hello hello.c
clean:
    rm -f hello
[/code]

Note: Insert <em>tabs</em> for indentation, <em>not</em> whitespaces. If the compiled program is <code>hello.exe</code>, perhaps the extension name is also needed for <code>rm</code>. (I have <em>never</em> tested it.)

<h3>With c.vim</h3>

Follow the menu and you'll be also good.<sup id="fnref-45-1"><a href="#fn-45-1" rel="footnote">1</a></sup>

<div class="footnotes">
<hr />
<ol>

<li id="fn-45-1">
<a href="http://stackoverflow.com/questions/2627886/how-do-i-run-a-c-program-from-vim">How do I run a C program from Vim?</a>&#160;<a href="#fnref-45-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2013-12-10 19:23:00</wp:post_date>
  <wp:post_date_gmt>2013-12-10 11:23:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fast-compilation-and-execution-of-source-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="makefile"><![CDATA[makefile]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[5554178456999851635]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>55e7d-inc_complete</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/55e7d-inc_complete/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:17 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/55e7d-inc_complete.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2014-01-10 18:28:17</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>55e7d-inc_complete</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/55e7d-inc_complete.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-Ctl6XcObMYA/UsAx5rxhu8I/AAAAAAAAAD0/s8nHv28rqDg/s1600/inc_complete.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vim-LaTeX's \lv command with Sumatra PDF</title>
  <link>http://blogueun.wordpress.com/2013/12/10/vim-rm-latexs-lv-command-with-sumatra-pdf/</link>
  <pubDate>Tue, 10 Dec 2013 10:07:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/12/10/vim-rm-latexs-lv-command-with-sumatra-pdf/</guid>
  <description/>
  <content:encoded><![CDATA[<h3>Why do I switch my PDF viewer?</h3>

<ul><li>Ado* Read* is proprietary. (<b>EULA</b>) </li><li>Sumatra PDF is free. (<b>GPLv3</b>)</li></ul>

Go for FLOSS! Go for freedom! <br />

<h3>Actual process</h3>

Original settings for Ado* Read*: let <code>g:Tex_ViewRuleComplete_dvi='C:/.../AcroRd32'</code> in <code>_vimrc</code> (No extension name)<br />Problem: How to change Vim-$latex \LaTeX$'s setting of <code>\lv</code>?<br />Trial 1: Set <code>g:Tex_ViewRuleComplete_dvi='C:/.../SumatraPDF'</code> in <code>_vimrc</code> (No effect)<br />Trial 2: Set <code>g:Tex_ViewRule_dvi='C:/.../SumatraPDF'</code> and disable <code>g:Tex_ViewRuleComplete_dvi</code> in <code>_vimrc</code> (No effect)<br />Trial 3: Set <code>g:Tex_ViewRule_pdf='C:/.../SumatraPDF'</code> and keep <code>g:Tex_ViewRuleComplete_dvi='C:/.../AcroRd32'</code> in <code>_vimrc</code> (Ado* Read* launched instead)<br />...<br />Trial n: Set <code>g:Tex_ViewRule_pdf='C:/.../SumatraPDF'</code> and disable <code>g:Tex_ViewRuleComplete_dvi='C:/.../AcroRd32'</code> in <code>_vimrc</code> (No effect)<br />Solution:<br />

<ol><li>Change <code>PATH</code> environment variable. (You can change it for vim runtime and keep the original one in other programs. See <a href="http://blogue-un.blogspot.hk/2013/12/writing-vims-output-to-files.html" target="_blank">my newer post</a> for details.)</li><li>Set <code>g:Tex_ViewRule_pdf='SumatraPDF'</code></li><li>Disable <code>g:Tex_ViewRuleComplete_dvi</code> in <code>_vimrc</code> </li></ol>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2013-12-10 18:07:00</wp:post_date>
  <wp:post_date_gmt>2013-12-10 10:07:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vim-rm-latexs-lv-command-with-sumatra-pdf</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gvim"><![CDATA[gVim]]></category>
  <category domain="category" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <category domain="post_tag" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <category domain="post_tag" nicename="m-win"><![CDATA[M$ Win*]]></category>
  <category domain="post_tag" nicename="sumatra-pdf"><![CDATA[Sumatra PDF]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[867256124560290376]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2b888-inc_complete_clang</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/2b888-inc_complete_clang/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:17 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/2b888-inc_complete_clang.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2014-01-10 18:28:17</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2b888-inc_complete_clang</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/2b888-inc_complete_clang.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-3oNf5PiLc_Q/UsBCtfg0YuI/AAAAAAAAAEE/nsX7_kZE28c/s1600/inc_complete_clang.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Error of the Font of the Cited URL in Bibliography Using BibLaTeX in APA Style</title>
  <link>http://blogueun.wordpress.com/2013/11/05/error-of-the-font-of-the-cited-url-in-bibliography-using-bibrm-latex-in-apa-style/</link>
  <pubDate>Tue, 05 Nov 2013 10:36:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/11/05/error-of-the-font-of-the-cited-url-in-bibliography-using-bibrm-latex-in-apa-style/</guid>
  <description/>
  <content:encoded><![CDATA[This midnight, I tried to compile my $latex \LaTeX$ document with a so-called "bibliography", which contains a URL. The link should be in typewriter font after using the command <code>\urlstyle{tt}</code> under adding the <code>url</code> package to the preamble. I googled for almost 2 hours, but the blog posts suggested that using this method should work. I even tried to copy some minimum working examples from the web to test if they work. They really worked and so I'm puzzled. Ten&nbsp;minutes ago, I just find out what's going wrong: the <code>url</code> package should never go before the several lines in the preamble that are responsible for adding an APA-style bibliography.
The <code>\ll</code> command in Vim-$latex \LaTeX$ seems not doing well with <code>Biber</code>. Whenever the AUX file exists, <code>\ll</code> won't execute <code>Biber</code>, causing the resulting PDF file to have no change in the bibliography.

I hope I can use less time to figure out any mistake next time.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2013-11-05 18:36:00</wp:post_date>
  <wp:post_date_gmt>2013-11-05 10:36:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>error-of-the-font-of-the-cited-url-in-bibliography-using-bibrm-latex-in-apa-style</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="latex"><![CDATA[LaTeX]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1230811592514127941]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>This Weekend's Work on Vim</title>
  <link>http://blogueun.wordpress.com/2013/11/05/this-weekends-work-on-vim/</link>
  <pubDate>Tue, 05 Nov 2013 10:22:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/11/05/this-weekends-work-on-vim/</guid>
  <description/>
  <content:encoded><![CDATA[<ol>
    <li>Installed some useful Vim plugins, such as <a title="Vundle" href="http://github.com/gmarik/vundle" target="_blank">Vundle</a> (Vim plugins management tool), <a title="NERDTree" href="http://github.com/scrooloose/nerdtree" target="_blank">NERDTree</a> (file browser), <a title="Easymotion" href="http://github.com/Lokaltog/vim-easymotion" target="_blank">Easymotion</a>, <a title="Loremipsum" href="http://github.com/vim-scripts/loremipsum" target="_blank">Loremipsum</a> (random text generator), <a title="Vim-surround" href="http://github.com/tpope/vim-surround" target="_blank">Vim-surround</a> (surround text with brackets), <a title="Vim-snipmate" href="http://github.com/msanders/snipmate.vim" target="_blank">Vim-snipmate</a> (for autogenerated code), <a title="Vim-addon-mw-utils" href="http://github.com/marcweber/vim-addon-mw-utils" target="_blank">Vim-addon-mw-utils</a>, <a title="Tlib_vim" href="http://github.com/tomtom/tlib_vim" target="_blank">Tlib_vim</a> (dependency for Vim-snipmate), <a title="FuzzyFinder" href="http://github.com/vim-scripts/FuzzyFinder" target="_blank">FuzzyFinder</a> (quick finding tool for files, etc) and <a title="L9" href="http://github.com/vim-scripts/L9" target="_blank">L9</a> (dependency for FuzzyFinder).</li>
    <li>Do some custom insert mode keyboard mapping. (<a href="http://vim.wikia.com/wiki/Automatically_append_closing_characters">automatical completion of brackets</a>)</li>
</ol>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2013-11-05 18:22:00</wp:post_date>
  <wp:post_date_gmt>2013-11-05 10:22:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>this-weekends-work-on-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="fuzzyfinder"><![CDATA[FuzzyFinder]]></category>
  <category domain="post_tag" nicename="l9"><![CDATA[L9]]></category>
  <category domain="post_tag" nicename="nerdtree"><![CDATA[NERDTree]]></category>
  <category domain="post_tag" nicename="snipmate"><![CDATA[Snipmate]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim-surround"><![CDATA[Vim-surround]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6294520249882013496]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Bug in Vim-LaTeX</title>
  <link>http://blogueun.wordpress.com/2013/10/18/a-bug-in-vim-rm-latex/</link>
  <pubDate>Fri, 18 Oct 2013 06:26:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/10/18/a-bug-in-vim-rm-latex/</guid>
  <description/>
  <content:encoded><![CDATA[It's a small syntax error, and can be easily fixed with the addition of a space character. I found it from <a href="http://www.mail-archive.com/vim-latex-devel@lists.sourceforge.net/msg00083.html">a Google search result</a>. (I've forgotten the query string.)

This shows to good things of free and open source software:

<ul>
<li>Find bugs quickly through effective communication between users and developers</li>
<li>Fix bugs quickly through hands-on configuration of source code</li>
</ul>

From the <a href="http://github.com/vim-scripts/">Vim plugins on the GitHub</a>, you'll discover even more good points of FLOSS:

<ul>
<li>Everyone can tune the software to adapt to his/her needs.</li>
<li>Everyone can share and contribute their changes.</li>
</ul>

<em>and more ...</em>

The more the FLOSS developers, the better our free software!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2013-10-18 14:26:00</wp:post_date>
  <wp:post_date_gmt>2013-10-18 06:26:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-bug-in-vim-rm-latex</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <category domain="post_tag" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[8377991048087720957]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>15b84-gvim</title>
  <link>http://blogueun.wordpress.com/2013/12/11/choosing-a-font-for-gvim/15b84-gvim/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:17 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/15b84-gvim.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2014-01-10 18:28:17</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>15b84-gvim</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>31</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/15b84-gvim.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-pTf3hlm712A/UqhMxi36nDI/AAAAAAAAABE/BtT22fuAh9k/s1600/gvim.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>a6c2d-using_complete</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/a6c2d-using_complete/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:17 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/a6c2d-using_complete.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2014-01-10 18:28:17</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a6c2d-using_complete</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/a6c2d-using_complete.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-LqQ7alku0t8/UsBQxb1yKmI/AAAAAAAAAEk/VnOgTALQA0w/s1600/using_complete.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Why Vim?</title>
  <link>http://blogueun.wordpress.com/2013/08/16/why-vim/</link>
  <pubDate>Fri, 16 Aug 2013 07:03:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/08/16/why-vim/</guid>
  <description/>
  <content:encoded><![CDATA[Searching something like "vim best editor", "vim vs IDE" Google, you can find too <i>many</i> results, and it's <i>impossible</i> to finish reading all those articles. Therefore, I selected some and post the link here.

<h3>Programmers</h3>

The video below is a talk given by Bram Moolenaar, creator of Vim. The <a href="http://www.moolenaar.net/habits_2007.pdf" target="_blank">handout for this talk</a> is found on his website. However, he assumed that the audience had some basic knowledge on movements in Vim. For Chinese users, the slides below may help you. Otherwise, please go down to <a href="http://www.blogger.com/blogger.g?blogID=2411490572864667702#quickjump">here</a>
[youtube http://www.youtube.com/watch?v=p6K4iIMlouI?html5=1][slideshare id=1870859&amp;style=border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 427px;&amp;sc=no]

<div style="margin-bottom:5px;"><b> <a title="Vim Hacks" href="https://www.slideshare.net/c9s/vim-hacks" target="_blank">Vim Hacks</a> </b> from <b><a href="http://www.slideshare.net/c9s" target="_blank">Yo-An Lin</a></b></div>

<ol>
    <li id="quickjump">Quick jumping of text: e.g. <code>5w</code>,<code>2(</code>
<ul>
    <li><a href="http://joe-dev.blogspot.hk/2012/10/vim.html" target="_blank">The First Year of Using Vim</a></li>
    <li><a href="http://bullium.com/support/vim.html" target="_blank">Vim Commands Cheat Sheet</a></li>
</ul>
</li>
    <li>Text objects: e.g. <code>da&lt;</code>,<code>ci"</code>,<code>di{</code>
<ul>
    <li><a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/" target="_blank">Vim Text Objects: The Definitive Guide</a></li>
</ul>
</li>
    <li><a href="http://www.thegeekstuff.com/2009/01/vi-and-vim-macro-tutorial-how-to-record-and-play/" target="_blank">Vim-Macro</a>: e.g. <code>5@a</code><code></code></li>
    <li>Folds: seeing structures and moving quickly
<ul>
    <li><a href="http://nerd-hacking.blogspot.hk/2006/05/vim-folding-tips.html" target="_blank">Vim Folding Tips</a> @ Hacker's Blog</li>
    <li><a href="http://rickey-nctu.blogspot.hk/2009/02/vim-folding.html" target="_blank">Make your own Vim folds (Chinese)</a></li>
</ul>
</li>
</ol>

<h3>Writers</h3>

With many keyboard shortcuts, Vim enables you to move quickly between words, sentences and paragraphs, and thus focus on writing.
See Randall Wood's <cite>Vim for Writers</cite> <a href="http://therandymon.com/woodnotes/vim-for-writers/node3.html" target="_blank">blog entry</a> as well as his <a href="http://therandymon.com/woodnotes/vim-for-writers/node3.html" target="_blank">notes</a>.

<h3>Vim Advocacy</h3>

<ol>
    <li><a href="http://www.viemu.com/a-why-vi-vim.html" target="_blank">Why, oh WHY, do those #?@! nutheads use vi?</a></li>
    <li><a href="http://thomer.com/vi/vi.html" target="_blank">Vi Lovers</a></li>
</ol>

<h3>Vim Game</h3>

<ol>
    <li><a href="http://vim-adventures.com/" target="_blank">VIM Adventures</a></li>
</ol>

<h3>Vim E-Book</h3>

<ol>
    <li><a href="ftp://ftp.vim.org/pub/vim/doc/book/vimbook-OPL.pdf" target="_blank">Vi iMproved—Vim</a> by Steve Oualline</li>
</ol>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2013-08-16 15:03:00</wp:post_date>
  <wp:post_date_gmt>2013-08-16 07:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>why-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6379605264487785397]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>be5ee-using_clang</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/be5ee-using_clang/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/be5ee-using_clang.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>be5ee-using_clang</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/be5ee-using_clang.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-m6fMHp2_QVQ/UsBQrj5EocI/AAAAAAAAAEc/PuKQyeF96dI/s1600/using_clang.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>APA Citing</title>
  <link>http://blogueun.wordpress.com/2013/08/16/apa-citing/</link>
  <pubDate>Fri, 16 Aug 2013 00:51:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/08/16/apa-citing/</guid>
  <description/>
  <content:encoded><![CDATA[Typing in the APA reference list entries are tedious. Therefore, use the <code>biblatex-apa</code> package.

[youtube http://www.youtube.com/watch?v=ly8BlePO4ws?feature=player_detailpage&amp;html5=1&amp;w=640&amp;h=360]For the sample files, please click the above "Youtube" button.

Why <code>biblatex</code> instead of Bib$latex \TeX$?
Apart from the support of <code>@online</code> tag, see <a href="http://codydunne.blogspot.hk/2011/03/better-apa-style-working-around.html" target="_blank">this blog post</a> on the comparison between the <code>apacite</code> and <code>biblatex-apa</code> packages.

For writing scientific reports, refer to <a href="http://schneider.ncifcrf.gov/latex.html" target="_blank">$latex \LaTeX$ Style and Bib$latex \TeX$ Bibliography Formats for Biologists: $latex \TeX$ and $latex \LaTeX$ Resources</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2013-08-16 08:51:00</wp:post_date>
  <wp:post_date_gmt>2013-08-16 00:51:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>apa-citing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apa"><![CDATA[APA]]></category>
  <category domain="post_tag" nicename="biber"><![CDATA[Biber]]></category>
  <category domain="post_tag" nicename="biblatex"><![CDATA[BibLaTeX]]></category>
  <category domain="post_tag" nicename="bibtex"><![CDATA[BibTeX]]></category>
  <category domain="category" nicename="latex"><![CDATA[LaTeX]]></category>
  <category domain="post_tag" nicename="latex"><![CDATA[LaTeX]]></category>
  <category domain="post_tag" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[6806456842604884278]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>a640c-prog</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/a640c-prog/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/a640c-prog.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>58</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a640c-prog</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/a640c-prog.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-ZLIA5AXynjU/UsBWBDW425I/AAAAAAAAAE0/RX2nuATQ_wE/s1600/prog.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>7d448-pathogen</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/7d448-pathogen/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/7d448-pathogen.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>7d448-pathogen</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/7d448-pathogen.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-G_RjAg-QqHo/Uqh_qgRZ4II/AAAAAAAAABg/73u2-gw8zhw/s1600/pathogen.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Edit LaTeX equations in Vim</title>
  <link>http://blogueun.wordpress.com/2013/08/16/edit-latex-equations-in-vim/</link>
  <pubDate>Thu, 15 Aug 2013 22:56:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/08/16/edit-rm-latex-equations-on-vim/</guid>
  <description/>
  <content:encoded><![CDATA[With the Vim-$latex \LaTeX$ plugin, it's possible to edit $latex \LaTeX$ equations with Vim quickly without making syntax errors. (e.g. undefined control sequence caused by mismatched braces '{}')

[youtube http://www.youtube.com/watch?v=y67t-05nFD0?html5=1]For the sample files, please click the above "Youtube" button.

Why use Vim? Please refer to <a href="http://blogue-un.blogspot.hk/2013/08/why-vim.html" target="_blank">my post on Vim</a>.

For a quick startup guide, see the <a href="http://vim-latex.sourceforge.net/documentation/latex-suite-quickstart/">official tutorial</a>. If you've learnt those keyboard mappings, here's <a href="http://www.cheat-sheets.org/saved-copy/vimlatexqrc.pdf">a quick review</a> of some commands. For detailed list of all keyboard shortcuts and customizations (e.g. custom compile rule: use <code>pdflatex</code> instead of <code>latex</code> and <code>dvipdfm</code>), you can refer to <a href="http://vim-latex.sourceforge.net/documentation/latex-suite.html">the user manual</a>.

There're many blog entries about how to install $latex \LaTeX$ on Vim/GVim on UNIX/Linux and M$. Searching "vim latex" gives you millions of search results. Summarizing the articles, the three major components are:

<ol>
    <li>Editor
    <ul>
        <li>Vim (found on <i>almost every distribution of *nix</i>)</li>
        <li>GVim (on GUI of any platform)</li>
    </ul>
    </li>
    <li>$latex \LaTeX$
    <ul>
        <li>$latex \TeX$Live (found in package manager on *nix)</li>
        <li>Mik$latex \TeX$ (have a $latex \LaTeX$ package manager)</li>
    </ul>
    </li>
    <li>Vim plugin for writing $latex \LaTeX$: Latex-Suite</li>
</ol>

For *nix, you may find some GUI tools for installing packages. (especially in some popular distributions)

<figure>
    <a href="http://3.bp.blogspot.com/-A1dL6glQUy0/Ug3tkw3QuUI/AAAAAAAAAAk/FPKShR_nPJs/s1600/software_center.png">
        <img border="0" src="http://blogueun.files.wordpress.com/2013/08/e5202-software_center.png" />
        <figcaption>Software Centre in Ubuntu 12.04 LTS</figcaption>
    </a>
</figure>

<figure>
    <a href="http://2.bp.blogspot.com/-5TnQxFKw9JU/Ug30nTc_pWI/AAAAAAAAAA0/Vl9Ynhmp-f8/s1600/Screenshot+from+2013-08-16+17:44:21.png">
        <img border="0" src="http://blogueun.files.wordpress.com/2013/08/d2503-screenshotfrom2013-08-16174421.png" />
        <figcaption>PackageKit in Fedora 17</figcaption>
    </a>
</figure>

You can also type the install commands for these packages on the terminal. For example:

<ol>
    <li>Ubuntu
[code gutter="false"]
# Also include `vim-gnome' if you'd like to install GVim.
$ sudo apt get install vim-gnome vim-latexsuite texlive
[/code]
    </li>
    <li>Fedora
[code gutter="false"]
# Also include `vim-X11' if you'd like to install GVim.
[root@localhost]# yum install vim-latex latex[/code]
    </li>
</ol>

Unlike M$, the dependencies will be automatically resolved.

For M$, the installation procedures for GVim (portable), Vim-$latex \LaTeX$ and Mik$latex \TeX$ (portable) are as followed: <br />

<ol>
    <li>Go to the official websites of GVim and Mik$latex \TeX$ (or equivalent packages) and download the packages.</li>
    <li>Put Mik$latex \TeX$ portable and GVim portable to any folder you like
    <ul>
        <li>e.g. <code>C:\Temp</code></li>
        <li>DON'T put them under <code>C:\Program Files</code></li>
    </ul>
    </li>
    <li>Download Vim-$latex \LaTeX$ from SourceForge</li>
    <li>Follow the steps <a href="http://vim-latex.sourceforge.net/index.php?subject=download&amp;title=Download" target="_blank">here</a></li>
</ol>

Remarks: The installation of Vim-$latex \LaTeX$ (items 3 and 4) is the same for portable and non-portable versions of GVim.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>60</wp:post_id>
  <wp:post_date>2013-08-16 06:56:00</wp:post_date>
  <wp:post_date_gmt>2013-08-15 22:56:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>edit-latex-equations-in-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="latex"><![CDATA[LaTeX]]></category>
  <category domain="category" nicename="latex-suite"><![CDATA[Latex-Suite]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[1897014266504967102]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[edit-rm-latex-equations-on-vim]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>e2a4d-cout</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/e2a4d-cout/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/e2a4d-cout.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>61</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>e2a4d-cout</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/e2a4d-cout.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-ibTa6aoJCW0/UsBYERUoG7I/AAAAAAAAAFA/neZWrtEvpO0/s1600/cout.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing MathJax</title>
  <link>http://blogueun.wordpress.com/2013/08/16/testing-mathjax/</link>
  <pubDate>Thu, 15 Aug 2013 22:00:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/2013/08/16/testing-mathjax/</guid>
  <description/>
  <content:encoded><![CDATA[<em>Note: This post won't make sense here. For refer to <a href="http://www.blogue-un.blogspot.hk/2013/08/testing-mathjax.html" target="_blank">my original post</a>.</em>

Following the instructions <a href="http://irrep.blogspot.hk/2011/07/mathjax-in-blogger-ii.html" target="_blank">here</a>, MathJax works on Blogpost.

I typed
[code language="latex" gutter="false"]
$\cos^2\theta-\sin^2\theta=\cos 2\theta$
[/code]
and here's the result: $latex \cos^2\theta-\sin^2\theta=\cos 2\theta$

Antoher equation:<br />
$latex ax+\frac{b}{y}=1$<br />
This time, the equation is in display mode.

How about the inline verbatim environment? Googling "mathjax verbatim", we have<br />
[code language="latex" gutter="false"]\verb*$x^2\sqrt y[/code]
yields $latex x^2\sqrt y$ on <a href="http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm" target="_blank">$latex \TeX$ Commands available in MathJax</a>. Nevertheless, it only works in display mode.

<del>Finally, let's get some equations numbered, just like <a href="http://cdn.mathjax.org/mathjax/latest/test/sample-eqnum.html" target="_blank">an example on MathJax</a>.</del><br />
$latex \int_{0}^{\frac{\pi}{2}} \sin x \, \mathrm d x = 1$]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2013-08-16 06:00:00</wp:post_date>
  <wp:post_date_gmt>2013-08-15 22:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-mathjax</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="mathjax"><![CDATA[MathJax]]></category>
  <wp:postmeta>
    <wp:meta_key>blogger_blog</wp:meta_key>
    <wp:meta_value><![CDATA[blogue-un.blogspot.com]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_author</wp:meta_key>
    <wp:meta_value><![CDATA[GNU Supporter]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blogger_1eaf86a56675bbc178889c22ff4d7193_permalink</wp:meta_key>
    <wp:meta_value><![CDATA[86814626006199031]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>0b8fb-cindent</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/0b8fb-cindent/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/0b8fb-cindent.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>63</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0b8fb-cindent</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/0b8fb-cindent.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-_HZfc9kYeic/UsBbs8r4b5I/AAAAAAAAAFM/WE83iWqcXRQ/s1600/cindent.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ba443-run</title>
  <link>http://blogueun.wordpress.com/2013/12/29/c-hello-world-using-clang_complete-and-vim/ba443-run/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/ba443-run.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>64</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ba443-run</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>22</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/ba443-run.gif</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-mZcEzRiLAb4/UsBgU-Wf64I/AAAAAAAAAFY/hGAJRXEEyHQ/s1600/run.gif]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>c9495-omnicpp</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/c9495-omnicpp/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:18 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/c9495-omnicpp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2014-01-10 18:28:18</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>c9495-omnicpp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/c9495-omnicpp.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-9DQ5LUlc2DI/Uqh9gvrT71I/AAAAAAAAABU/4K1pyETEF0U/s1600/omnicpp.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-2/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/pathogen.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/pathogen.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-G_RjAg-QqHo/Uqh_qgRZ4II/AAAAAAAAABg/73u2-gw8zhw/pathogen.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Edit $rm LaTeX{}$ equations on Vim</title>
  <link>http://blogueun.wordpress.com/2013/08/16/edit-latex-equations-in-vim/edit-rm-latex-equations-on-vim-2/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/08/software_center.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>68</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>edit-rm-latex-equations-on-vim-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>60</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/08/software_center.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-A1dL6glQUy0/Ug3tkw3QuUI/AAAAAAAAAAk/FPKShR_nPJs/software_center.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-3/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/omnicpp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/omnicpp.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-9DQ5LUlc2DI/Uqh9gvrT71I/AAAAAAAAABU/4K1pyETEF0U/omnicpp.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Edit $rm LaTeX{}$ equations on Vim</title>
  <link>http://blogueun.wordpress.com/2013/08/16/edit-latex-equations-in-vim/edit-rm-latex-equations-on-vim-3/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/08/screenshotfrom2013-08-16174421.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>edit-rm-latex-equations-on-vim-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>60</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/08/screenshotfrom2013-08-16174421.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-5TnQxFKw9JU/Ug30nTc_pWI/AAAAAAAAAA0/Vl9Ynhmp-f8/Screenshot+from+2013-08-16+17:44:21.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-4/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/ctags.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/ctags.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-8ZgJL2Krz84/UqiMtz0OeWI/AAAAAAAAACA/HZ16xDaKpLw/ctags.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>e5202-software_center</title>
  <link>http://blogueun.wordpress.com/2013/08/16/edit-latex-equations-in-vim/e5202-software_center/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:19 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/08/e5202-software_center.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>73</wp:post_id>
  <wp:post_date>2014-01-10 18:28:19</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>e5202-software_center</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>60</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/08/e5202-software_center.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://3.bp.blogspot.com/-A1dL6glQUy0/Ug3tkw3QuUI/AAAAAAAAAAk/FPKShR_nPJs/s320/software_center.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>a8039-ctags</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/a8039-ctags/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/a8039-ctags.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a8039-ctags</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/a8039-ctags.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-8ZgJL2Krz84/UqiMtz0OeWI/AAAAAAAAACA/HZ16xDaKpLw/s1600/ctags.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-5/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/cmd.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/cmd.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-RrPamOfLz_M/UqiKIRraCRI/AAAAAAAAABw/gAXxa4oWdyk/cmd.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-6/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/cmd2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/cmd2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-RQqRZaxc1bc/UqiPB30GYnI/AAAAAAAAACM/3Tv5JrWR1R8/cmd2.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>5e9bc-cmd</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/5e9bc-cmd/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/5e9bc-cmd.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>5e9bc-cmd</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/5e9bc-cmd.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-RrPamOfLz_M/UqiKIRraCRI/AAAAAAAAABw/gAXxa4oWdyk/s1600/cmd.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>d2503-screenshotfrom2013-08-16174421</title>
  <link>http://blogueun.wordpress.com/2013/08/16/edit-latex-equations-in-vim/d2503-screenshotfrom2013-08-16174421/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/08/d2503-screenshotfrom2013-08-16174421.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>78</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>d2503-screenshotfrom2013-08-16174421</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>60</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/08/d2503-screenshotfrom2013-08-16174421.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-5TnQxFKw9JU/Ug30nTc_pWI/AAAAAAAAAA0/Vl9Ynhmp-f8/s320/Screenshot+from+2013-08-16+17:44:21.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-7/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/dir1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2014-01-10 18:28:20</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-7</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/dir1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-HsOah3qg-64/UqiRipn1FcI/AAAAAAAAACU/pdpX-44OXUY/dir1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6ef3f-cmd2</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/6ef3f-cmd2/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/6ef3f-cmd2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>81</wp:post_id>
  <wp:post_date>2014-01-10 18:28:21</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6ef3f-cmd2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/6ef3f-cmd2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-RQqRZaxc1bc/UqiPB30GYnI/AAAAAAAAACM/3Tv5JrWR1R8/s1600/cmd2.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-8/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/ctags1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2014-01-10 18:28:21</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-8</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/ctags1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-FOpePO5O_Pg/UqiT2YyQjaI/AAAAAAAAACg/3Pf-hLlo6aM/ctags1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-9/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/omni.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2014-01-10 18:28:21</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-9</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/omni.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-epO-oEzcExY/UqiZiJNqrPI/AAAAAAAAACw/5VjnillAZww/omni.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-10/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/std_err.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2014-01-10 18:28:21</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-10</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/std_err.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-coPF05ZtKMs/Uq3lzbNIdNI/AAAAAAAAADA/rN0-qq7_Oss/std_err.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-11/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>85</wp:post_id>
  <wp:post_date>2014-01-10 18:28:21</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-11</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-V_egnuvzUrs/Uq3m_RvJMrI/AAAAAAAAADM/4A5Wk408-6Y/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2013-12-16+01:21:51.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>c8f73-dir1</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/c8f73-dir1/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:22 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/c8f73-dir1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2014-01-10 18:28:22</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>c8f73-dir1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/c8f73-dir1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-HsOah3qg-64/UqiRipn1FcI/AAAAAAAAACU/pdpX-44OXUY/s1600/dir1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OmniCppComplete Installation for Dummies</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/omnicppcomplete-installation-for-dummies-12/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:22 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>87</wp:post_id>
  <wp:post_date>2014-01-10 18:28:22</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>omnicppcomplete-installation-for-dummies-12</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>blogger_attachment</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-ymOM8Sq_jmQ/Uq3nPlXQeaI/AAAAAAAAADU/9MdZxoUBFtU/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2013-12-16+01:22:21.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>24629-ctags1</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/24629-ctags1/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:22 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/24629-ctags1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2014-01-10 18:28:22</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>24629-ctags1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/24629-ctags1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-FOpePO5O_Pg/UqiT2YyQjaI/AAAAAAAAACg/3Pf-hLlo6aM/s1600/ctags1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2260b-omni</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/2260b-omni/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:23 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/2260b-omni.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>90</wp:post_id>
  <wp:post_date>2014-01-10 18:28:23</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2260b-omni</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/2260b-omni.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://2.bp.blogspot.com/-epO-oEzcExY/UqiZiJNqrPI/AAAAAAAAACw/5VjnillAZww/s1600/omni.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>a4439-std_err</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/a4439-std_err/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:23 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/a4439-std_err.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>91</wp:post_id>
  <wp:post_date>2014-01-10 18:28:23</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a4439-std_err</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/a4439-std_err.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://1.bp.blogspot.com/-coPF05ZtKMs/Uq3lzbNIdNI/AAAAAAAAADA/rN0-qq7_Oss/s1600/std_err.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:24 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2014-01-10 18:28:24</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/abab6-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012151.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-V_egnuvzUrs/Uq3m_RvJMrI/AAAAAAAAADM/4A5Wk408-6Y/s1600/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2013-12-16+01:21:51.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221</title>
  <link>http://blogueun.wordpress.com/2013/12/11/omnicppcomplete-installation-for-dummies/04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221/</link>
  <pubDate>Fri, 10 Jan 2014 18:28:25 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2013/12/04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>93</wp:post_id>
  <wp:post_date>2014-01-10 18:28:25</wp:post_date>
  <wp:post_date_gmt>2014-01-10 18:28:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>30</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2013/12/04fd9-e89ea2e5b995e693b7e59c96e5ad98e782ba2013-12-16012221.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>auto_import</wp:meta_key>
    <wp:meta_value><![CDATA[http://4.bp.blogspot.com/-ymOM8Sq_jmQ/Uq3nPlXQeaI/AAAAAAAAADU/9MdZxoUBFtU/s1600/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA+2013-12-16+01:22:21.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>http://blogueun.wordpress.com/?p=97</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=97</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>97</wp:post_id>
  <wp:post_date>2014-01-10 18:48:01</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[97]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://blogueun.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1389379681]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://blogueun.wordpress.com/?p=98</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=98</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>98</wp:post_id>
  <wp:post_date>2014-01-10 18:48:01</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1389379682]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Migrated from Blogger</title>
  <link>http://blogueun.wordpress.com/2014/01/11/migrated-from-blogger/</link>
  <pubDate>Fri, 10 Jan 2014 23:10:58 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=103</guid>
  <description/>
  <content:encoded><![CDATA[I tried finding a way to blog using Vim, and <code>blogger.vim</code> is what I've found. I've tried this plugin but it <em>doesn't</em> work for my computer. <em>Without</em> Vim, writing code is <em>painful</em> for me. Read the authors' last Blogger post, which was, ironically, about <em>his switch to WordPress</em>, I followed his footstep. Note: For posts about online syntax highlighting and Mathjax on Blogger, they <em>won't</em> make sense here, so refer to <a href="http://blogue-un.blogspot.hk/">my original blog</a> if necessary.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>103</wp:post_id>
  <wp:post_date>2014-01-11 07:10:58</wp:post_date>
  <wp:post_date_gmt>2014-01-10 23:10:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>migrated-from-blogger</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My First Post Using UltraBlog.vim</title>
  <link>http://blogueun.wordpress.com/2014/01/12/my-first-post-using-ultrablog-vim/</link>
  <pubDate>Sat, 11 Jan 2014 16:22:13 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=117</guid>
  <description/>
  <content:encoded><![CDATA[Hello world! This is the <em>first</em> post I've ever written in UltraBlog.vim.

I love writing with Vim for many reasons, such as it's pointers, marks, macros, keyword completion, etc.

I've tried VimRepress, but this plugin gives me a host of errors that I, as a mediocre GNU/Linux user, <strong>can't</strong> understand. Hope UltraBlog works fine!

<h3>Markdown</h3>

It's already late today, so I'll practice this new and fascinating markup language next week.

<h3>Image uploading</h3>

According to the official manual, the <code>:UBUpload</code> command "can only be executed in a post edit view".

This is the first sample image that I've uploaded.

<img src="http://blogueun.files.wordpress.com/2014/01/sample.png" alt="$(file)s" />
That's how the plugin works. Leaving an empty line after the link for the image does <em>not</em> work.

<img src="http://blogueun.files.wordpress.com/2014/01/testing1.png" alt="$(file)s" />
You need to use the concept of <code>id</code> in the official markdown documentation to do a bit of modification in order to get things work.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>117</wp:post_id>
  <wp:post_date>2014-01-12 00:22:13</wp:post_date>
  <wp:post_date_gmt>2014-01-11 16:22:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-first-post-using-ultrablog-vim</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="ultrablog-vim"><![CDATA[UltraBlog.vim]]></category>
  <category domain="post_tag" nicename="vimrepress"><![CDATA[VimRepress]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[first-post-using-ultrablog-vim]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>http://blogueun.wordpress.com/?p=152</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=152</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>152</wp:post_id>
  <wp:post_date>2014-01-12 18:11:29</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[152]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://blogueun.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1389521490]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://blogueun.wordpress.com/?p=153</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=153</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>153</wp:post_id>
  <wp:post_date>2014-01-12 18:11:30</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1389521491]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sample.png</title>
  <link>http://blogueun.wordpress.com/2014/01/12/my-first-post-using-ultrablog-vim/sample-png/</link>
  <pubDate>Fri, 17 Jan 2014 18:51:44 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/sample.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>203</wp:post_id>
  <wp:post_date>2014-01-18 02:51:44</wp:post_date>
  <wp:post_date_gmt>2014-01-17 18:51:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sample-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>117</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/sample.png</wp:attachment_url>
</item>
<item>
  <title>testing.png</title>
  <link>http://blogueun.wordpress.com/2014/01/12/my-first-post-using-ultrablog-vim/testing-png/</link>
  <pubDate>Fri, 17 Jan 2014 19:29:51 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/testing1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>216</wp:post_id>
  <wp:post_date>2014-01-18 03:29:51</wp:post_date>
  <wp:post_date_gmt>2014-01-17 19:29:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>117</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/testing1.png</wp:attachment_url>
</item>
<item>
  <title>Google Form Usage</title>
  <link>http://blogueun.wordpress.com/2014/01/18/google-form-usage/</link>
  <pubDate>Sat, 18 Jan 2014 06:07:29 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=220</guid>
  <description/>
  <content:encoded><![CDATA[For what you <em>can</em> do using Google Form, you can refer to those online forms that are created by Google.

The focus of this post is what you <em>shouldn't</em> do while using online forms that are accessible to the public, like Google Form and other platforms that enable users to easily create questionnaire, and the contents of this post is simple: a link to <a href="http://cloud.itsc.cuhk.edu.hk/enewsasp/app/article-details.aspx/26D533F3B5CF28FBE498826C239038FD/">a relevant notice from CUHK</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>220</wp:post_id>
  <wp:post_date>2014-01-18 14:07:29</wp:post_date>
  <wp:post_date_gmt>2014-01-18 06:07:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>google-form-usage</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="information-security"><![CDATA[information security]]></category>
  <category domain="post_tag" nicename="online-forms"><![CDATA[online forms]]></category>
  <category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Standards for C++ Naming</title>
  <link>http://blogueun.wordpress.com/2014/01/19/standards-for-c-naming/</link>
  <pubDate>Sun, 19 Jan 2014 05:31:35 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=224</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.nws.noaa.gov/oh/hrl/ihfs/standards/html/C++_naming.htm">This site</a> is what I've longed for. What makes it even better is that it's a website from a domain that ends in <code>.gov</code>, making it a reliable source of information.

Having a good naming convention can greatly reduce the number of syntax errors in the source code and improve its readability.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>224</wp:post_id>
  <wp:post_date>2014-01-19 13:31:35</wp:post_date>
  <wp:post_date_gmt>2014-01-19 05:31:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>standards-for-c-naming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cc"><![CDATA[C/C++]]></category>
  <category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>dislin_compile.140119.png</title>
  <link>http://blogueun.wordpress.com/2014/01/19/compilation-of-c-programs-that-depends-on-dislin-on-cli/dislin_compile-140119-png/</link>
  <pubDate>Sun, 19 Jan 2014 08:20:51 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/dislin_compile-140119.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>240</wp:post_id>
  <wp:post_date>2014-01-19 16:20:51</wp:post_date>
  <wp:post_date_gmt>2014-01-19 08:20:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dislin_compile-140119-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>226</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/dislin_compile-140119.png</wp:attachment_url>
</item>
<item>
  <title>posted_via_ultrablog.png</title>
  <link>http://blogueun.wordpress.com/2014/01/19/ultrablog-wordpress-edit/posted_via_ultrablog-png/</link>
  <pubDate>Sun, 19 Jan 2014 12:00:47 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>265</wp:post_id>
  <wp:post_date>2014-01-19 20:00:47</wp:post_date>
  <wp:post_date_gmt>2014-01-19 12:00:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>posted_via_ultrablog-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>262</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog.png</wp:attachment_url>
</item>
<item>
  <title>posted_via_ultrablog3.png</title>
  <link>http://blogueun.wordpress.com/2014/01/19/ultrablog-wordpress-edit/posted_via_ultrablog3-png/</link>
  <pubDate>Sun, 19 Jan 2014 12:07:43 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>266</wp:post_id>
  <wp:post_date>2014-01-19 20:07:43</wp:post_date>
  <wp:post_date_gmt>2014-01-19 12:07:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>posted_via_ultrablog3-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>262</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog3.png</wp:attachment_url>
</item>
<item>
  <title>ultrablog.png</title>
  <link>http://blogueun.wordpress.com/2014/01/30/1st-wp-post-using-gist/ultrablog-png/</link>
  <pubDate>Thu, 30 Jan 2014 15:15:33 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/ultrablog.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>302</wp:post_id>
  <wp:post_date>2014-01-30 23:15:33</wp:post_date>
  <wp:post_date_gmt>2014-01-30 15:15:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ultrablog-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>291</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/ultrablog.png</wp:attachment_url>
</item>
<item>
  <title>interpreted.png</title>
  <link>http://blogueun.wordpress.com/2014/01/30/1st-wp-post-using-gist/interpreted-png/</link>
  <pubDate>Thu, 30 Jan 2014 15:34:22 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/01/interpreted.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>304</wp:post_id>
  <wp:post_date>2014-01-30 23:34:22</wp:post_date>
  <wp:post_date_gmt>2014-01-30 15:34:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>interpreted-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>291</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/01/interpreted.png</wp:attachment_url>
</item>
<item>
  <title>digraphs.png</title>
  <link>http://blogueun.wordpress.com/2014/02/01/my-first-markdown-table-on-wordpress/digraphs-png/</link>
  <pubDate>Sat, 01 Feb 2014 10:59:33 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/digraphs.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>339</wp:post_id>
  <wp:post_date>2014-02-01 18:59:33</wp:post_date>
  <wp:post_date_gmt>2014-02-01 10:59:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>digraphs-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>333</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/digraphs.png</wp:attachment_url>
</item>
<item>
  <title>ub_q1.png</title>
  <link>http://blogueun.wordpress.com/2014/02/04/my-error-while-using-ultrablog/ub_q1-png/</link>
  <pubDate>Tue, 04 Feb 2014 12:04:46 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/ub_q1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>411</wp:post_id>
  <wp:post_date>2014-02-04 20:04:46</wp:post_date>
  <wp:post_date_gmt>2014-02-04 12:04:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ub_q1-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>414</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/ub_q1.png</wp:attachment_url>
</item>
<item>
  <title>ub_q2.png</title>
  <link>http://blogueun.wordpress.com/2014/02/04/my-error-while-using-ultrablog/ub_q2-png/</link>
  <pubDate>Tue, 04 Feb 2014 12:06:44 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/ub_q2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>412</wp:post_id>
  <wp:post_date>2014-02-04 20:06:44</wp:post_date>
  <wp:post_date_gmt>2014-02-04 12:06:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ub_q2-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>414</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/ub_q2.png</wp:attachment_url>
</item>
<item>
  <title>ub_error.png</title>
  <link>http://blogueun.wordpress.com/2014/02/04/my-error-while-using-ultrablog/ub_error-png/</link>
  <pubDate>Tue, 04 Feb 2014 12:08:27 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/ub_error.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>413</wp:post_id>
  <wp:post_date>2014-02-04 20:08:27</wp:post_date>
  <wp:post_date_gmt>2014-02-04 12:08:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ub_error-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>414</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/ub_error.png</wp:attachment_url>
</item>
<item>
  <title>my_gvim.png</title>
  <link>http://blogueun.wordpress.com/2014/02/06/testing-wordpress-footnotes/my_gvim-png/</link>
  <pubDate>Wed, 05 Feb 2014 16:52:50 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/my_gvim.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>520</wp:post_id>
  <wp:post_date>2014-02-06 00:52:50</wp:post_date>
  <wp:post_date_gmt>2014-02-05 16:52:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my_gvim-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>503</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/my_gvim.png</wp:attachment_url>
</item>
<item>
  <title>rvm_install_iconv.png</title>
  <link>http://blogueun.wordpress.com/2014/02/16/installing-ruby-again/rvm_install_iconv-png/</link>
  <pubDate>Sun, 16 Feb 2014 09:23:01 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/rvm_install_iconv.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>650</wp:post_id>
  <wp:post_date>2014-02-16 17:23:01</wp:post_date>
  <wp:post_date_gmt>2014-02-16 09:23:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rvm_install_iconv-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>652</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/rvm_install_iconv.png</wp:attachment_url>
</item>
<item>
  <title>rvm_install_ruby1.png</title>
  <link>http://blogueun.wordpress.com/2014/02/16/installing-ruby-again/rvm_install_ruby1-png/</link>
  <pubDate>Sun, 16 Feb 2014 09:25:57 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.files.wordpress.com/2014/02/rvm_install_ruby1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>651</wp:post_id>
  <wp:post_date>2014-02-16 17:25:57</wp:post_date>
  <wp:post_date_gmt>2014-02-16 09:25:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>rvm_install_ruby1-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>652</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://blogueun.files.wordpress.com/2014/02/rvm_install_ruby1.png</wp:attachment_url>
</item>
<item>
  <title>Compilation of C++ Programs that Depends on DISLIN on CLI</title>
  <link>http://blogueun.wordpress.com/2014/01/19/compilation-of-c-programs-that-depends-on-dislin-on-cli/</link>
  <pubDate>Sun, 19 Jan 2014 06:59:15 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=226</guid>
  <description/>
  <content:encoded><![CDATA[As a supporter of <a href="http://www.gnu.org/" target="_blank">the GNU Project</a>, I am not so happy to use <a href="http://www.dislin.de/" target="_blank">DISLIN</a>, which comes with an <em>EULA</em>, but I don't have time to find out another alternative to the plotting library suggested by Prof. Yevick in his book <a href="http://www.cambridge.org/ec/academic/subjects/physics/computational-science-and-modelling/short-course-computational-science-and-engineering-c-java-and-octave-numerical-programming-free-software-tools" target="_blank"><em>A Short Course in Computational Science and Engineering: C++, Java and Octave Numerical Programming with Free Software Tools</em></a>.

<a href="http://linux4research.blogspot.hk/2007/05/install-and-use-dislin-under-linuxe.html" target="_blank">A DISLIN installation guide on Ubuntu</a> found on the blog <a href="http://linux4research.blogspot.hk"><em>Linux for Research</em></a> was written more than six years ago, so I am a bit dubious that if steps 2 and 3 are still needed for the installation using a DEB file. Therefore, I overlooked an important command and I regret this after wasting about two hours on <a href="http://www.google.com" target="_blank">Google</a>.

As a result, I just downloaded the DEB file from the DISLIN official website and use the GUI tool "Ubuntu Software Centre" to install the library. Then I directly copied the code from the book and tried to compile the program (I named it <code>first_graphics_prog.cpp</code>.).

[code language="cpp" highlight="13"]
// Author: David Yevick
// Source: A Short Course in Computational Science and Engineering
#include &lt;iostream&gt;
#include &lt;dislin.h&gt;

using namespace std;

int main(int argc, const char *argv[])
{
    // Some code for defining variables
    // Omitted to avoid copyright problems
    // An example of using DISLIN methods
    qplot(array1,array2,numOfPts);
}
[/code]

However, the compiler gave me the message that I had used an "undefined reference to qplot".

I googled for two hours and found nothing that I can understand. I even tried compiling the following sample code found in section 2.7 of <a href="http://www2.mps.mpg.de/dislin/contents.html" target="_blank">the official DISLIN online manual</a>.

[code language="cpp"]
// Author: Helmut Michels
// Source: DISLIN 10.4—A Data Plotting Library
#include &lt;iostream&gt;
#include &quot;discpp.h&quot;

main()
{ Dislin g;
  g.disini ();
  g.messag (&quot;This is a test&quot;, 100, 100);
  g.disfin ();
}
[/code]

I have <em>no</em> hope on published books because their authors would expect their students to do something easy—Use <a href="http://www.bloodshed.net/devcpp.html" target="_blank">Dev-C++</a> on M$ Win*, or *nix GUI IDE like <a href="http://www.eclipse.org">Eclipse</a>. However, some geeks <em>won't</em> be satisfied because GUI buttons/objects hide the commands away from users. As a result, they <em>don't</em> know what tasks are invoked by clicking the button/object. In other words, they <em>don't</em> know what they are <em>actually</em> doing. Therefore, they have the motivation to find out the <em>real</em> command for the compilation of C++ programs that <code>#include "dislin.h"</code>.

<a href="http://stackoverflow.com" target="_blank">Stack Overflow</a> has <em>a few or no</em> questions on the compilation of C++ programs that use DISLIN. The most relevant one that I managed to find is <a href="http://stackoverflow.com/questions/19118465/compiling-dislin-gfortran">question 19118465</a>. It's titled <em>Compiling dislin gfortran</em>. I glanced at the answers quickly. They have some commands like

[code language="bash" gutter="false"]
gfortran EX11_1.f90 -o progrname -ldislin -I/path/to/DISLIN/modules
[/code]

Then I guessed that I need the <code>-ldislin</code> flag as well. I <em>can't</em> truly figure out the usage of <code>-l</code>, <code>-L</code> and <code>-I</code> flags by just looking at the man page of <code>g++</code>, so I just tried everything. I searched for some new pages, and returned to some web pages that I've <em>already visited</em>, and continued this <em>unproductive</em> process...

I googled the websites and I saw the post on Linux for Research mentioned before. I looked at the command that begins with <code>g++</code> and tried to adapt it to my needs, but it simply <em>failed</em>.

I thought that the official README maybe useful, so I browsed the contents in <code>/usr/local/dislin/README</code>. Some websites that teach users to install DISLIN from a gzip tarball contain code that manipulate the environment variables like <code>DISLIN</code>, <code>PATH</code> and <code>LD_LIBRARY_PATH</code>. But in the <code>README</code>, it's clearly stated that I don't need to do so.

[code highlight="11,12" gutter="false"]
f) To make DISLIN available for general use, write the following com-
mands to your .profile or to /etc/profile

DISLIN=directory                     
export DISLIN
PATH=${PATH}:${DISLIN}/bin

LD_LIBRARY_PATH=$DISLIN:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH

Note: The environment variable DISLIN is not necessary if DISLIN
is installed in the default directory '/usr/local/dislin'.
[/code]

I think that I <em>don't</em> need to do the above settings, but I am <em>not</em> sure about that. Luckily, the following part that immediately follows the above section gave me some hint on what I, as a newcomer to DISLIN, can do.

[code highlight="7" gutter="false"]
4.) Compiling, Linking and Running the Example Programs

   Now you can compile, link and run the example programs in the
   directory $DISLIN/examples with the commands:

                    clink     -a exa_c      (for gcc)
                    cpplink   -a exa_cpp    (for g++)
                    iclink    -a exa_c      (for Intel icc)
                    sclink    -a exa_c      (Sun Studio cc)
...
[/code]

Thus, I <em>really</em> went to <code>/usr/local/dislin/example</code> and compiled <code>exa_cpp.cpp</code> using <code>cpplink</code> with the <code>-a</code> flag. <em>It works! No complaints from <code>g++</code>!</em> It seemed that I could give <code>cpplink</code> a try, but it quickly turned out that my idea failed to work. <code>g++</code> either complained that <code>dislin.h</code> was <em>not</em> found, or there's "undefined reference" to a DISLIN function.

After that, I returned to Google again, and was redirected to the <em>same</em> post on Linux for Research again. I glanced through the <em>same</em> command that started with <code>g++</code>.

[code language="bash" gutter="false"]
g++ test.cpp -lXt -ldislin -lm
[/code]

This time, I could read the sentence below the above command.

<blockquote>
    Don't forget the <code>-lXt</code>
</blockquote>

I finally realised that I had forgotten an important principle in programming: <em>Don't</em> do too much at one time. At the very first stage, I need to get things done, though the approach is <em>not</em> elegant.

With the above principle in my mind, I could merely compile a C++ program that made use of DISLIN by making the following changes in both the source file and the command that I issued.

[code language="cpp" highlight="4"]
// Author: David Yevick
// Source: A Short Course in Computational Science and Engineering
#include &lt;iostream&gt;
#include &quot;/usr/local/dislin/dislin.h&quot;

using namespace std;

int main(int argc, const char *argv[])
{
    // Some code for defining variables
    // Omitted to avoid copyright problems
    // An example of using DISLIN methods
    qplot(array1,array2,numOfPts);
}
[/code]

In the terminal, I typed the following command.

[code language="bash" gutter="false"]
g++ foo.cpp -lXt -ldislin -lm
[/code]

<em>It works!</em> Critical readers will complain about the way that I include <code>dislin.h</code>. I'm not satisfied with this either. Another obvious missing part for those who want to customise the name of the output executable file is the <code>-o</code> flag. I <em>delibrately</em> did this so as to keep things <em>simple and clear</em>.

After trying the <code>-l</code>, <code>-L</code> and <code>-I</code> flags of the command <code>g++</code>, I realised that the <code>-I</code> flag will do.

However, when I tried to do the <em>same</em> task for another time, it surprisingly <em>failed</em>. Looking closely at the two versions, we can draw the following conclusion.

[code language="bash" gutter="false"]
# `DISLIN' is a variable that represents the path of DISLIN.
# In the default case, it is `/usr/local/dislin'.
g++ -lXt -ldislin -lm -I$(DISLIN) foo.cpp -o foo.out # Wrong!
g++ foo.cpp -o foo.out -lXt -ldislin -lm -I$(DISLIN) # Correct!
[/code]
<br />
<img src="http://blogueun.files.wordpress.com/2014/01/dislin_compile-140119.png" alt="message_from_g++" />

I conclude this post with the fact that the flags <code>-g -Wall</code> can be put either before or after <code>foo.cpp</code>.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/" target="_blank">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>226</wp:post_id>
  <wp:post_date>2014-01-19 14:59:15</wp:post_date>
  <wp:post_date_gmt>2014-01-19 06:59:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>compilation-of-c-programs-that-depends-on-dislin-on-cli</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cc"><![CDATA[C/C++]]></category>
  <category domain="post_tag" nicename="cc"><![CDATA[C/C++]]></category>
  <category domain="post_tag" nicename="dislin"><![CDATA[DISLIN]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Cross-Platform Blog Editing with UltraBlog and WordPress</title>
  <link>http://blogueun.wordpress.com/2014/01/19/ultrablog-wordpress-edit/</link>
  <pubDate>Sun, 19 Jan 2014 11:21:21 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=262</guid>
  <description/>
  <content:encoded><![CDATA[I suspect that after I write the blog with UltraBlog in Vim and editing the contents with the online editor, the changes done using the online editor will be lost. (Typed with UltraBlog.vim in Vim.)

Let's see how it works. (Typed on <a href="http://wordpress.com" target="_blank">WordPress.com</a>.)

When I reopened the <em>same</em> post in Vim, I realised that the second paragraph is gone! I <em>was</em> disappointed for a while, and googled "ultrablog update database". However, there are too few websites about UltraBlog.vim. Its ineffective to use Google to solve this problem.

<img src="http://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog.png" alt="screenshot of the first Google search result" />

From the above figure, it seems that there's 544 search results that contain the <em>entire</em> string "posted via ultrablog.vim".

<img src="http://blogueun.files.wordpress.com/2014/01/posted_via_ultrablog3.png" alt="screenshot of the last Google search result" />

However, I go to the third page and find out that hundreds of search results have been omitted.

The above two screenshots show that the number of users of UltraBlog.vim is <em>not</em> as many as other free softwares, libraries or plugins. One may need to wait for the adoption of this plugin by more Vim users before being able to find a forum post on problems using this plugin, provided that he/she doesn't start a new thread on the plugin.

Although there's only a few UltraBlog.vim users, it's still an incredibly excellent blogging plugin.

How can I solve my doubts about updating the local database with the remote one?

When Google <em>doesn't</em> work, then it's sensible for one to go for the official documentation. Geeks will find it informative, but I, as a mediocre <a href="https://www.gnu.org/gnu/gnu-users-never-heard-of-gnu.html" target="_blank"><em>GNU/Linux</em></a> user, often find it hard to retrieve information from manuals.

For example, I searched UltraBlog's official documentation for "sync", but failed. Luckily, in the help for the command <code>:UBList</code> (in <code>UltraBlog.txt</code>), I've found something useful:

[code gutter="false"]
:UBList post remote 50

This command lists the latest 50 posts in the blog.

Pressing the ENTER key in a remote post list will open the post under 
cursor and save it to the local database if it is not in it, otherwise, 
the local copy will be opened instead of the remote one. This enables 
users to modify markdown source and update the remote post.

The remote post list doesn't support paging.
[/code]

This solves the problem: I just delete my local copy before downloading the remote copy if the local copy is older than the remote copy.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/" target="_blank">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>262</wp:post_id>
  <wp:post_date>2014-01-19 19:21:21</wp:post_date>
  <wp:post_date_gmt>2014-01-19 11:21:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ultrablog-wordpress-edit</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="ultrablog-vim"><![CDATA[UltraBlog.vim]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Working with Vim's Autocommand Groups</title>
  <link>http://blogueun.wordpress.com/2014/01/26/working-with-vims-autocommand-groups/</link>
  <pubDate>Sat, 25 Jan 2014 18:07:02 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=287</guid>
  <description/>
  <content:encoded><![CDATA[Before including the autocommand group, I'd write about the reason of using it.

In my post titled <a href="http://blogueun.wordpress.com/links-to-good-posts" target="_blank"><em>Links to Good Posts</em></a>, I've included some custom autocompletion keyboard mappings for the automatic completion of <code>{}</code>, <code>[]</code> and <code>()</code> blocks in my VIMRC file.

Last Thursday, I extended them to blocks enclosed by single or double quotes.

[code firstline="82"]
inoremap &quot; &quot;&quot;&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap &quot;&quot; &quot;
inoremap ' ''&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
inoremap '' '
[/code]

<a href="http://github.com/honza/vim-Snippets" target="_blank">Vim-Snippets</a> has saved me a lot of time while writing blogs in <a href="http://www.vim.org" target="_blank">Vim</a>. With Vim-snippets and <a href="http://github.com/tpope/vim-surround" target="_blank">Vim-surround</a>, the following question is <em>not</em> so useful.

How can Vim do the same type of job for angled block <em>for HTML files only</em>?

It is possible that you can find the <code>&lt;</code> character in $latex \LaTeX$ source files which contains an inequality. In this case, we <em>don't</em> want the <code>&gt;</code> character to be Automatically inserted to the right-hand side of the <code>&lt;</code> character. Therefore, we need to enable this completion <em>only for the files with the right extension name(s)</em>.

From some web pages that include some autocommands that deal with some specific type(s) of files, one can easily learn what to do, instead of reading the long Reference Manual. The events needed are <code>BufNewFile</code> and <code>BufRead</code>.

[code firstline="86"]
aug specialCompletion
	au BufNewFile,BufRead *.htm,*.html inoremap &lt; &lt;&lt;Left&gt;&lt;Right&gt;&gt;&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
	au BufNewFile,BufRead *.htm,*.html inoremap &lt;&lt; &lt;
	au BufNewFile,BufRead *.tex set spell
	au BufLeave *.tex set nospell
aug END
[/code]

In line 87, I initially tried using a whitespace character to separate the two extension names. After that, I tried to edit an HTML file with the command <code>:e testing.html</code>, but the autocompletion didn't work. For the command <code>:e testing.htm</code>, Vim threw me an error. It took me a short while to figure out that commas should be used instead of whitespaces. I know that the problem can be beautifully solved by using regular expressions, but I'm <em>not</em> sure if <code><em>.htm[l]</em></code> is correct, and I lack time to test it. I'd like to insert an angled block with empty content, but after I inserted the string <code>&lt;&gt;</code> into my VIMRC file, the syntax highlighter of Vim told me that Vim perceived the empty angled block as the surrounding parts of a literal string which represents a keystroke. To solve this problem, I inserted the literal string that represents a <code>&lt;Left&gt;</code> key followed by a <code>&lt;Right&gt;</code> key inside the originally empty angled block <code>&lt;&gt;</code>. This is what you can see in line 87. With the aid of the syntax highlighter of Vim, the new autocommand has "revealed its colour" in my VIMRC, indicating the success of this change.

Despite the uselessness of this autocommand, I thought I had found out a way to switch Vim's spell check on for $latex \LaTeX$ source files. However, moved to a buffer for $latex \LaTeX$ source files to another buffer for an HTML file, I discovered that the <code>spell</code> option is <em>still</em> on, which is <em>not</em> desired for editing an HTML file. Fortunately, I succeeded in finding the correct autocommand event—BufLeave.

P.S. While writing HTML code in Vim, if you need to include the <code>&lt;</code> character, you can record the encoded string of this character into a register. (say, <code>l</code>, which stands for "<strong>l</strong>ess than") To use the register, type <code>&lt;C-r&gt;</code> in the insert mode first. Then input the name of the register. (a lowercase alphabet) In addition, I use the <code>t</code> register for inserting a hyperlink which opens the target in a new tabbed page in an HTML file.

Last edited on 3/2/2014 19:45:06 HKT:<br />
It seems that what I need is the <code>Filetype</code> event.

[code firstline="86"]
aug specialCompletion
	au Filetype html inoremap &lt; &lt;&lt;Left&gt;&lt;Right&gt;&gt;&lt;++&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;
	au Filetype html inoremap &lt;&lt; &lt;
	au Filetype tex setlocal spell
aug END
[/code]

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>287</wp:post_id>
  <wp:post_date>2014-01-26 02:07:02</wp:post_date>
  <wp:post_date_gmt>2014-01-25 18:07:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>working-with-vims-autocommand-groups</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My First WordPress Post using Gist</title>
  <link>http://blogueun.wordpress.com/2014/01/30/1st-wp-post-using-gist/</link>
  <pubDate>Thu, 30 Jan 2014 08:25:03 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=291</guid>
  <description/>
  <content:encoded><![CDATA[Note: I can now figure out a way to work with <em>both</em> UltraBlog and WordPress.com's built-in online code highlighter. See my <a href="http://blogueun.wordpress.com/2014/02/06/another-testing-page-for-wordpress-coms-built-in-syntaxhighlighter-and-ultrablog/">newer post</a> for details.

<a href="http://daringfireball.net/projects/markdown" title="Markdown">Markdown</a> is easy to write. <del>However, writing code with <code>code</code> tag (surrounded with <code>[]</code>) using UltraBlog in Vim <em>doesn't</em> work. In order to post some code, one needs to <a href="http://en.support.wordpress.com/markdown/" title="WordPress' Markdown Support">use 3 backticks</a>.</del> (I've found a way to use the built-in SyntaxHighlighter now because I've realised that a blank line in Markdown will be changed to a <code>&lt;p&gt;</code> tag in HTML. Thus, <strong><em>don't</em></strong> put any blank lines right above and below the the <code>code</code> tags will do.)
[code gutter="false" language="javascript"]
element1 = document.getElementById(&quot;foo&quot;);
element1.innerHTML = &quot;Hello world!&quot;;
[/code]
There's some shortcomings of the above method. If you need to copy a list of source code, you'll need to browse the source code, provided that the "gutter" option of the code list is "true", <a href="http://en.support.wordpress.com/code/posting-source-code/#configuration-parameters" title="Configuartion Parameters">which is the default</a>. Moreover, if you include source code that consists of <code>&lt;angled blocks&gt;</code> in a blog post written in Markdown using the UltraBlog plugin, then the angled block may be interpreted as an HTML tag element, such as the statement <code>#include &lt;iostream&gt;</code> in a C++ program. <em>More importantly, I've found out that <a href="http://en.support.wordpress.com/markdown/" title="WordPress' Markdown Support">this apporach</a> <strong>doesn't</strong> work with UltraBlog.</em> <del>The above code list verifies this assertion. </del>

<img src="http://blogueun.files.wordpress.com/2014/01/ultrablog.png" alt="Screenshot of the &quot;code list&quot; in UltraBlog.vim" />
Figure 1: This is a screenshot of the "code list" in UltraBlog.vim. <a href="http://en.support.wordpress.com/markdown-quick-reference/" title="Markdown quick reference">Markdown quick reference</a> suggests the use of 3 backticks.

<img src="http://blogueun.files.wordpress.com/2014/01/interpreted.png" alt="Screenshot of the interpreted code in WordPress.com's online editor" />
Figure 2: The above figure shows how the source code for the "code list" (in lines 12–15 in UltraBlog.vim, see Figure 1) is interpreted.

If you're a <a href="http://www.blogger.com" title="Blogger">Blogger</a> user who has made use of <a href="http://alexgorbatchev.com/SyntaxHighlighter/" title="Alex Gorbatchev's SyntaxHighlighter">SyntaxHighlighter</a> to share your source code online, you'll know that the copy function depends on <a href="http://www.adobe.com/products/flash/" title="Adobe Flash">Adobe Flash</a>. I <em>don't</em> have time to figure out if this is <a href="http://www.gnu.org/philosophy/javascript-trap.html">a JavaScript trap</a>, but it's <em>better</em> if I can find a way to avoid proprietary softwares.

Moreover, the <a href="http://en.support.wordpress.com/code/posting-source-code/" title="Supported Languages">languages supported</a> by <a href="http://www.wordpress.com" title="WordPress">WordPress.com</a> is <em>not as much as</em> <a href="http://gist.github.com/" title="Gist">Gist</a>. For instance, <a href="http://gist.github.com/" title="Gist">Gist</a> can highlight code in a VIMRC file, but the plugin used by <a href="http://www.wordpress.com" title="WordPress">WordPress.com</a> <em>can't</em>.

According to <a href="http://en.support.wordpress.com/gist/" title="WordPress' Gist Support">WordPress' official support</a>, using <a href="http://gist.github.com/" title="Gist">Gist</a> should be much easier. The following is the result.

[gist]8703067[/gist]

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>291</wp:post_id>
  <wp:post_date>2014-01-30 16:25:03</wp:post_date>
  <wp:post_date_gmt>2014-01-30 08:25:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1st-wp-post-using-gist</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="online-code-highlighter"><![CDATA[online code highlighter]]></category>
  <category domain="post_tag" nicename="ultrablog"><![CDATA[UltraBlog]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Comparison of LaTeX's "quote" and "quotation" Environments</title>
  <link>http://blogueun.wordpress.com/2014/01/31/latex-quote-and-quotation-env-comparison/</link>
  <pubDate>Thu, 30 Jan 2014 16:25:10 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=307</guid>
  <description/>
  <content:encoded><![CDATA[To quote another one's words, one can paraphrase the words. For some reason(s), (Perhaps being too lazy, or want to accurately reflect another one's words.) one would like to directly quote what another one has said.

To show the difference in $latex \LaTeX$, I've made a PDF file a year ago. It's now on Google Docs.

[googleapps domain="docs" dir="file/d/0B04KfPVI9QNeanNSYmc2RlE3VmM/preview" query="" width="640" height="480" /]

I created the above PDF document using <code>quote.tex</code>. (Refer to the Gist below.)

For many computer users who <em>aren't</em> familiar with $latex \LaTeX$'s syntax but HTML's, they should find <a href="http://daringfireball.net/projects/markdown" title="Markdown">Markdown</a> easy to write, and <a href="http://johnmacfarlane.net/pandoc/" title="Pandoc">pandoc</a> easy to use.
[code gutter="false"]
$ pandoc -s --mathjax=http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full foo.markdown foo.tex
[/code]
The result is shown in <code>quote.markdown</code>. (Refer to the Gist below.)

[gist]8703633[/gist]

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>307</wp:post_id>
  <wp:post_date>2014-01-31 00:25:10</wp:post_date>
  <wp:post_date_gmt>2014-01-30 16:25:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>latex-quote-and-quotation-env-comparison</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="latex"><![CDATA[LaTeX]]></category>
  <category domain="post_tag" nicename="pandoc"><![CDATA[pandoc]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Posting Code to Gist Efficiently</title>
  <link>http://blogueun.wordpress.com/2014/01/31/posting-code-to-gist-efficiently/</link>
  <pubDate>Thu, 30 Jan 2014 18:15:01 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=321</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://gist.github.com" title="Gist">Gist</a> enables computer users to post their source code online. Since Gist is a <a href="https://github.com" title="GitHub">GitHub</a> repository, they can view each change to the code.

However, it is inconvenient to use the online editor in the homepage of Gist, especially for geeks. For example, a programmer believes that <a href="http://aknow-work.blogspot.hk/2013/04/programmer-code-gist-vim.html" title="[Aknow::Work]">it's <em>not</em> good to manually type or paste the code onto Gist</a>. I directly quote Aknow::Work's words here.

<blockquote>
  但是阿，如果你是手動把 code 弄到 gist 上面，那這樣就太遜了，基本上各大
  編輯器都有跟 gist 互動的 plugin，如果你用 Vim，可以使用 gist-vim，可以
  讓你直接在 Vim 裡生成、編輯、讀取 gist，完成後還可以幫你把連結開起來。
</blockquote>

This can be explained in this way: it's unproductive to use a mouse for text editing. <a href="http://stackoverflow.com/questions/1088387/what-specific-productivity-gains-do-vim-emacs-provide-over-gui-text-editors" title="Vim vs Mouse">A relevant question on Stack Overflow</a> was answered by many users. Mark Rushakoff finds Vim's keyboard commands <em>"almost priceless"</em> since your fingers don't have to leave the keyboard and grab the mouse. Jeremy Smyth describes this as the "biggest gain" of using Vim or Emacs.

As suggested by Aknow::Work's words above, we can use <a href="https://github.com/mattn/gist-vim" title="Gist.vim">Gist.vim</a> so that we can make use of the advantages of Vim while writing code, and post the code onto <a href="https://gist.github.com" title="Gist">Gist</a> quickly.

Except the official <code>README.mkd</code>, there's <a href="http://www.serverwatch.com/tutorials/article.php/3931076/Get-More-Out-of-Git-Use-Gist-With-Vim.htm" title="Gist Tutorial">a tutorial on ServerWatch</a> for <a href="https://github.com/mattn/gist-vim" title="Gist.vim">Gist.vim</a> newbies. This article shortens the time needed to find the useful command <code>Gist -l</code>.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>321</wp:post_id>
  <wp:post_date>2014-01-31 02:15:01</wp:post_date>
  <wp:post_date_gmt>2014-01-30 18:15:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>posting-code-to-gist-efficiently</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My Choice of Vim Alignment Plugin</title>
  <link>http://blogueun.wordpress.com/2014/02/01/my-choice-of-vim-alignment-plugin/</link>
  <pubDate>Sat, 01 Feb 2014 03:16:53 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=325</guid>
  <description/>
  <content:encoded><![CDATA[This post is nothing more than a link to <a href="http://ruby-china.org/topics/13350" title="Vim 插件推薦">a post on Ruby China</a>, which recommends some Vim plugins, and I'd like to use <a href="https://github.com/junegunn/vim-easy-align" title="vim-easy-align">vim-easy-align</a> rather than <a href="http://www.drchip.org/astronaut/vim/align.html" title="Align.vim">Align.vim</a>.

For the rest of the plugins, I don't feel that I need them now, so I won't bother them. For instance, I found the ruler at the bottom of each buffer useful, and I can't see the difference between a powerline and the default ruler.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>325</wp:post_id>
  <wp:post_date>2014-02-01 11:16:53</wp:post_date>
  <wp:post_date_gmt>2014-02-01 03:16:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-choice-of-vim-alignment-plugin</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="align-vim"><![CDATA[Align.vim]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vim-easy-align"><![CDATA[vim-easy-align]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My Experience of Using Vundle</title>
  <link>http://blogueun.wordpress.com/2014/02/01/my-experience-of-using-vundle/</link>
  <pubDate>Sat, 01 Feb 2014 04:17:52 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=327</guid>
  <description/>
  <content:encoded><![CDATA[Three months ago, I gave <a href="https://github.com/gmarik/vundle" title="Vundle">Vundle</a> a try, and it's <em>much</em> more convenient than <a href="https://github.com/tpope/vim-pathogen" title="vim-pathogen">pathogen.vim</a>. With <a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/" title="Auto Installing Vundle From Your Vimrc">Zaadi's VIMRC configuration</a>, Vundle can be set up within several minutes.

I installed <a href="https://github.com/vim-scripts/FuzzyFinder" title="FuzzyFinder">FuzzyFinder</a> for opening files in other directories without leaving Vim. However, during the installation of the plugin, I carelessly forgot to download <a href="https://github.com/vim-scripts/L9" title="L9">L9</a> library first. Therefore, I put it into <code>$MYVIMRC</code>.
[code firstline="28"]
Bundle 'L9' &quot; FuzzyFinder dependency
Bundle 'FuzzyFinder'
[/code]
Then, I got the following error message.
[code gutter="false"]
$ vi
Error detected while processing /home/owner/.vimrc:
line   28:
E116: Invalid arguments for function vundle#config#bundle
line   30:
E116: Invalid arguments for function vundle#config#bundle
line   31:
E116: Invalid arguments for function vundle#config#bundle
line   32:
E116: Invalid arguments for function vundle#config#bundle
line   33:
E116: Invalid arguments for function vundle#config#bundle
line   39:
E116: Invalid arguments for function vundle#config#bundle
Error detected while processing /home/owner/.vim/bundle/FuzzyFinder/plugin/fuf.vim:
line   13:
***** L9 library must be installed! *****
Press ENTER or type command to continue
[/code]
<code>:BundleList</code> doesn't have L9, but <code>~/.vim/bundle</code> has the folder <code>L9</code>. The cause of the problem is the comment on the right of the <code>Bundle 'foo'</code> command.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>327</wp:post_id>
  <wp:post_date>2014-02-01 12:17:52</wp:post_date>
  <wp:post_date_gmt>2014-02-01 04:17:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-experience-of-using-vundle</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vundle"><![CDATA[Vundle]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My First Markdown Table in Vim</title>
  <link>http://blogueun.wordpress.com/2014/02/01/my-first-markdown-table-on-wordpress/</link>
  <pubDate>Sat, 01 Feb 2014 10:27:30 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=333</guid>
  <description/>
  <content:encoded><![CDATA[Writing tables in <a href="http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html" title="Pandoc's Markdown">pandoc's markdown</a> can be a difficult task for newbies. I hope I can give you a tutorial.

After going to a café, you may want to know the way of typing a digraph. If you want to rotate a word on web page by 180°, you can consult W3C's CSS guide. The text box inside the figure below shows I can read from <code>:digraphs</code>.

<img src="http://blogueun.files.wordpress.com/2014/02/digraphs.png" alt="Screenshot of the draft" />
From this figure, I can see that putting 6 "columns" in one row is the best.

Initially, the output of the editor command into the current buffer in gVim occupies its whole width. Obviously, it is too wide for posting it onto this blog. I need to know the maximum number of "columns" that one single line in the <code>&lt;pre&gt;</code> tag can hold. Being too lazy to find out more about pywebkitgtk, I simply use Firefox to preview the draft.

There are hundreds of digraphs! Am I going to change the layout manually? No! If one can records the correct key sequence into a register, then it'll be done! To capture the sequence, some basic knowledge in Vim's regular expression is needed.

<ol>
<li>Observe the overall structure of the formatted text.</li>
<li>Try to think of the way for the first row in the original text.</li>
<li>Move to the first character of a line.</li>
<li>Think of a pattern that matches the numbers only. (I suggest <code>[0-9]\{3,}</code> since the key sequence <code>12</code> matches <code>½</code>.)</li>
<li>Use <code>/[0-9]\{3,}</code> to <em>really</em> find a number.</li>
<li>Repeat step 3.</li>
<li>Use <code>qq6nWi&lt;CR&gt;&lt;Esc&gt;j</code> to finish the very first part of the job. Forget about the trailing whitespace characters in lines with odd line number. They can be easily wiped out by a regex substitute command.</li>
<li>From the line numbers of the text, calculate <code>[count]</code> for the command <code>[count]@q</code>.</li>
</ol>

Here's the transformed text. Without this paragraph, the following list of digraphs won't have monospaced fonts.

<pre><code>BB ¦  166    SE §  167    ': ¨  168    Co ©  169    -a ª  170    &lt;&lt; «  171
NO ¬  172    -- ­  173    Rg ®  174    'm ¯  175    DG °  176    +- ±  177
2S ²  178    3S ³  179    '' ´  180    My µ  181    PI ¶  182    .M ·  183
', ¸  184    1S ¹  185    -o º  186    &gt;&gt; »  187    14 ¼  188    12 ½  189
34 ¾  190    ?I ¿  191    A! À  192    A' Á  193    A&gt; Â  194    A? Ã  195
A: Ä  196    AA Å  197    AE Æ  198    C, Ç  199    E! È  200    E' É  201
E&gt; Ê  202    E: Ë  203    I! Ì  204    I' Í  205    I&gt; Î  206    I: Ï  207
D- Ð  208    N? Ñ  209    O! Ò  210    O' Ó  211    O&gt; Ô  212    O? Õ  213
O: Ö  214    *X ×  215    O/ Ø  216    U! Ù  217    U' Ú  218    U&gt; Û  219
U: Ü  220    Y' Ý  221    TH Þ  222    ss ß  223    a! à  224    a' á  225
a&gt; â  226    a? ã  227    a: ä  228    aa å  229    ae æ  230    c, ç  231
e! è  232    e' é  233    e&gt; ê  234    e: ë  235    i! ì  236    i' í  237
i&gt; î  238    i: ï  239    d- ð  240    n? ñ  241    o! ò  242    o' ó  243
o&gt; ô  244    o? õ  245    o: ö  246    -: ÷  247    o/ ø  248    u! ù  249
u' ú  250    u&gt; û  251    u: ü  252    y' ý  253    th þ  254    y: ÿ  255
A- Ā  256    a- ā  257    A( Ă  258    a( ă  259    A; Ą  260    a; ą  261
C' Ć  262    c' ć  263    C&gt; Ĉ  264    c&gt; ĉ  265    C. Ċ  266    c. ċ  267
C&lt; Č  268    c&lt; č  269    D&lt; Ď  270    d&lt; ď  271    D/ Đ  272    d/ đ  273
E- Ē  274    e- ē  275    E( Ĕ  276    e( ĕ  277    E. Ė  278    e. ė  279
E; Ę  280    e; ę  281    E&lt; Ě  282    e&lt; ě  283    G&gt; Ĝ  284    g&gt; ĝ  285
G( Ğ  286    g( ğ  287    G. Ġ  288    g. ġ  289    G, Ģ  290    g, ģ  291
H&gt; Ĥ  292    h&gt; ĥ  293    H/ Ħ  294    h/ ħ  295    I? Ĩ  296    i? ĩ  297
I- Ī  298    i- ī  299    I( Ĭ  300    i( ĭ  301    I; Į  302    i; į  303
I. İ  304    i. ı  305    IJ Ĳ  306    ij ĳ  307    J&gt; Ĵ  308    j&gt; ĵ  309
K, Ķ  310    k, ķ  311    kk ĸ  312    L' Ĺ  313    l' ĺ  314    L, Ļ  315
l, ļ  316    L&lt; Ľ  317    l&lt; ľ  318    L. Ŀ  319    l. ŀ  320    L/ Ł  321
l/ ł  322    N' Ń  323    n' ń  324    N, Ņ  325    n, ņ  326    N&lt; Ň  327
n&lt; ň  328    'n ŉ  329    NG Ŋ  330    ng ŋ  331    O- Ō  332    o- ō  333
O( Ŏ  334    o( ŏ  335    O" Ő  336    o" ő  337    OE Œ  338    oe œ  339
R' Ŕ  340    r' ŕ  341    R, Ŗ  342    r, ŗ  343    R&lt; Ř  344    r&lt; ř  345
S' Ś  346    s' ś  347    S&gt; Ŝ  348    s&gt; ŝ  349    S, Ş  350    s, ş  351
S&lt; Š  352    s&lt; š  353    T, Ţ  354    t, ţ  355    T&lt; Ť  356    t&lt; ť  357
T/ Ŧ  358    t/ ŧ  359    U? Ũ  360    u? ũ  361    U- Ū  362    u- ū  363
U( Ŭ  364    u( ŭ  365    U0 Ů  366    u0 ů  367    U" Ű  368    u" ű  369
U; Ų  370    u; ų  371    W&gt; Ŵ  372    w&gt; ŵ  373    Y&gt; Ŷ  374    y&gt; ŷ  375
Y: Ÿ  376    Z' Ź  377    z' ź  378    Z. Ż  379    z. ż  380    Z&lt; Ž  381
z&lt; ž  382    O9 Ơ  416    o9 ơ  417    OI Ƣ  418    oi ƣ  419    yr Ʀ  422
U9 Ư  431    u9 ư  432    Z/ Ƶ  437    z/ ƶ  438    ED Ʒ  439    A&lt; Ǎ  461
a&lt; ǎ  462    I&lt; Ǐ  463    i&lt; ǐ  464    O&lt; Ǒ  465    o&lt; ǒ  466    U&lt; Ǔ  467
u&lt; ǔ  468    A1 Ǟ  478    a1 ǟ  479    A7 Ǡ  480    a7 ǡ  481    A3 Ǣ  482
a3 ǣ  483    G/ Ǥ  484    g/ ǥ  485    G&lt; Ǧ  486    g&lt; ǧ  487    K&lt; Ǩ  488
k&lt; ǩ  489    O; Ǫ  490    o; ǫ  491    O1 Ǭ  492    o1 ǭ  493    EZ Ǯ  494
ez ǯ  495    j&lt; ǰ  496    G' Ǵ  500    g' ǵ  501    ;S ʿ  703    '&lt; ˇ  711
'( ˘  728    '. ˙  729    '0 ˚  730    '; ˛  731    '" ˝  733    A% Ά  902
E% Έ  904    Y% Ή  905    I% Ί  906    O% Ό  908    U% Ύ  910    W% Ώ  911
i3 ΐ  912    A* Α  913    B* Β  914    G* Γ  915    D* Δ  916    E* Ε  917
Z* Ζ  918    Y* Η  919    H* Θ  920    I* Ι  921    K* Κ  922    L* Λ  923
M* Μ  924    N* Ν  925    C* Ξ  926    O* Ο  927    P* Π  928    R* Ρ  929
S* Σ  931    T* Τ  932    U* Υ  933    F* Φ  934    X* Χ  935    Q* Ψ  936
W* Ω  937    J* Ϊ  938    V* Ϋ  939    a% ά  940    e% έ  941    y% ή  942
i% ί  943    u3 ΰ  944    a* α  945    b* β  946    g* γ  947    d* δ  948
e* ε  949    z* ζ  950    y* η  951    h* θ  952    i* ι  953    k* κ  954
l* λ  955    m* μ  956    n* ν  957    c* ξ  958    o* ο  959    p* π  960
r* ρ  961    *s ς  962    s* σ  963    t* τ  964    u* υ  965    f* φ  966
x* χ  967    q* ψ  968    w* ω  969    j* ϊ  970    v* ϋ  971    o% ό  972
u% ύ  973    w% ώ  974    'G Ϙ  984    ,G ϙ  985    T3 Ϛ  986    t3 ϛ  987
M3 Ϝ  988    m3 ϝ  989    K3 Ϟ  990    k3 ϟ  991    P3 Ϡ  992    p3 ϡ  993
'% ϴ  1012   j3 ϵ  1013   IO Ё  1025   D% Ђ  1026   G% Ѓ  1027   IE Є  1028
DS Ѕ  1029   II І  1030   YI Ї  1031   J% Ј  1032   LJ Љ  1033   NJ Њ  1034
Ts Ћ  1035   KJ Ќ  1036   V% Ў  1038   DZ Џ  1039   A= А  1040   B= Б  1041
V= В  1042   G= Г  1043   D= Д  1044   E= Е  1045   Z% Ж  1046   Z= З  1047
I= И  1048   J= Й  1049   K= К  1050   L= Л  1051   M= М  1052   N= Н  1053
O= О  1054   P= П  1055   R= Р  1056   S= С  1057   T= Т  1058   U= У  1059
F= Ф  1060   H= Х  1061   C= Ц  1062   C% Ч  1063   S% Ш  1064   Sc Щ  1065
=" Ъ  1066   Y= Ы  1067   %" Ь  1068   JE Э  1069   JU Ю  1070   JA Я  1071
a= а  1072   b= б  1073   v= в  1074   g= г  1075   d= д  1076   e= е  1077
z% ж  1078   z= з  1079   i= и  1080   j= й  1081   k= к  1082   l= л  1083
m= м  1084   n= н  1085   o= о  1086   p= п  1087   r= р  1088   s= с  1089
t= т  1090   u= у  1091   f= ф  1092   h= х  1093   c= ц  1094   c% ч  1095
s% ш  1096   sc щ  1097   =' ъ  1098   y= ы  1099   %' ь  1100   je э  1101
ju ю  1102   ja я  1103   io ё  1105   d% ђ  1106   g% ѓ  1107   ie є  1108
ds ѕ  1109   ii і  1110   yi ї  1111   j% ј  1112   lj љ  1113   nj њ  1114
</code></pre>

Note: <strong>Copied</strong> from Vim. You may refer to any Vim online documentation for
more information. Here's <a href="http://vimcdoc.sourceforge.net/" title="Vimcdoc—A Chinese Vim Documentation">one</a> for Chinese users who can't understand <a href="http://vimdoc.sourceforge.net/" title="Vimdoc">the official one on SourceForge</a>.

That's <em>not</em> the end. Instead, it's just the <em>beginning</em>. First, replace all whitespace characters that separate each "column" with <code>|</code> using regular expression. Then, give the correct alignment to the column containing numbers by selecting the entire column, <em>including the delimiters and the surrounding whitespaces</em>. Thanks to the built-in automatic syntax highlighter, I realise that some digraphs contain <code>&#042;</code>, which needs to be escaped by a backslash. Finally, a horizontal gridline can be created by a few steps below.

<ol>
<li>Duplicate the first row and paste it above.</li>
<li>Replace all <code>|</code> with <code>+</code>.</li>
<li>Replace all <code>[^+]</code> with <code>-</code>.</li>
</ol>

Unluckily, I <em>can't</em> find a way to post the markdown code for a table online directly via UltraBlog, therefore, I've to use pandoc to convert the selected table. I discovered this from <a href="http://connermcd.wordpress.com/2012/05/20/pandoc-table-editing-in-vim/" title="Pandoc Table Editing in Vim">McDaniel's post</a>.

<pre><code>+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| BB | ¦ | 166  | SE | § | 167  | ': | ¨ | 168  | Co | © | 169  | -a | ª | 170  | &lt;&lt; | « | 171  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| NO | ¬ | 172  | -- | ­ | 173  | Rg | ® | 174  | 'm | ¯ | 175  | DG | ° | 176  | +- | ± | 177  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| 2S | ² | 178  | 3S | ³ | 179  | '' | ´ | 180  | My | µ | 181  | PI | ¶ | 182  | .M | · | 183  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| ', | ¸ | 184  | 1S | ¹ | 185  | -o | º | 186  | &gt;&gt; | » | 187  | 14 | ¼ | 188  | 12 | ½ | 189  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| 34 | ¾ | 190  | ?I | ¿ | 191  | A! | À | 192  | A' | Á | 193  | A&gt; | Â | 194  | A? | Ã | 195  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| A: | Ä | 196  | AA | Å | 197  | AE | Æ | 198  | C, | Ç | 199  | E! | È | 200  | E' | É | 201  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| E&gt; | Ê | 202  | E: | Ë | 203  | I! | Ì | 204  | I' | Í | 205  | I&gt; | Î | 206  | I: | Ï | 207  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| D- | Ð | 208  | N? | Ñ | 209  | O! | Ò | 210  | O' | Ó | 211  | O&gt; | Ô | 212  | O? | Õ | 213  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| O: | Ö | 214  | *X | × | 215  | O/ | Ø | 216  | U! | Ù | 217  | U' | Ú | 218  | U&gt; | Û | 219  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| U: | Ü | 220  | Y' | Ý | 221  | TH | Þ | 222  | ss | ß | 223  | a! | à | 224  | a' | á | 225  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| a&gt; | â | 226  | a? | ã | 227  | a: | ä | 228  | aa | å | 229  | ae | æ | 230  | c, | ç | 231  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| e! | è | 232  | e' | é | 233  | e&gt; | ê | 234  | e: | ë | 235  | i! | ì | 236  | i' | í | 237  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| i&gt; | î | 238  | i: | ï | 239  | d- | ð | 240  | n? | ñ | 241  | o! | ò | 242  | o' | ó | 243  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| o&gt; | ô | 244  | o? | õ | 245  | o: | ö | 246  | -: | ÷ | 247  | o/ | ø | 248  | u! | ù | 249  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| u' | ú | 250  | u&gt; | û | 251  | u: | ü | 252  | y' | ý | 253  | th | þ | 254  | y: | ÿ | 255  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| A- | Ā | 256  | a- | ā | 257  | A( | Ă | 258  | a( | ă | 259  | A; | Ą | 260  | a; | ą | 261  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| C' | Ć | 262  | c' | ć | 263  | C&gt; | Ĉ | 264  | c&gt; | ĉ | 265  | C. | Ċ | 266  | c. | ċ | 267  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| C&lt; | Č | 268  | c&lt; | č | 269  | D&lt; | Ď | 270  | d&lt; | ď | 271  | D/ | Đ | 272  | d/ | đ | 273  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| E- | Ē | 274  | e- | ē | 275  | E( | Ĕ | 276  | e( | ĕ | 277  | E. | Ė | 278  | e. | ė | 279  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| E; | Ę | 280  | e; | ę | 281  | E&lt; | Ě | 282  | e&lt; | ě | 283  | G&gt; | Ĝ | 284  | g&gt; | ĝ | 285  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| G( | Ğ | 286  | g( | ğ | 287  | G. | Ġ | 288  | g. | ġ | 289  | G, | Ģ | 290  | g, | ģ | 291  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| H&gt; | Ĥ | 292  | h&gt; | ĥ | 293  | H/ | Ħ | 294  | h/ | ħ | 295  | I? | Ĩ | 296  | i? | ĩ | 297  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| I- | Ī | 298  | i- | ī | 299  | I( | Ĭ | 300  | i( | ĭ | 301  | I; | Į | 302  | i; | į | 303  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| I. | İ | 304  | i. | ı | 305  | IJ | Ĳ | 306  | ij | ĳ | 307  | J&gt; | Ĵ | 308  | j&gt; | ĵ | 309  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| K, | Ķ | 310  | k, | ķ | 311  | kk | ĸ | 312  | L' | Ĺ | 313  | l' | ĺ | 314  | L, | Ļ | 315  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| l, | ļ | 316  | L&lt; | Ľ | 317  | l&lt; | ľ | 318  | L. | Ŀ | 319  | l. | ŀ | 320  | L/ | Ł | 321  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| l/ | ł | 322  | N' | Ń | 323  | n' | ń | 324  | N, | Ņ | 325  | n, | ņ | 326  | N&lt; | Ň | 327  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| n&lt; | ň | 328  | 'n | ŉ | 329  | NG | Ŋ | 330  | ng | ŋ | 331  | O- | Ō | 332  | o- | ō | 333  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| O( | Ŏ | 334  | o( | ŏ | 335  | O" | Ő | 336  | o" | ő | 337  | OE | Œ | 338  | oe | œ | 339  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| R' | Ŕ | 340  | r' | ŕ | 341  | R, | Ŗ | 342  | r, | ŗ | 343  | R&lt; | Ř | 344  | r&lt; | ř | 345  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| S' | Ś | 346  | s' | ś | 347  | S&gt; | Ŝ | 348  | s&gt; | ŝ | 349  | S, | Ş | 350  | s, | ş | 351  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| S&lt; | Š | 352  | s&lt; | š | 353  | T, | Ţ | 354  | t, | ţ | 355  | T&lt; | Ť | 356  | t&lt; | ť | 357  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| T/ | Ŧ | 358  | t/ | ŧ | 359  | U? | Ũ | 360  | u? | ũ | 361  | U- | Ū | 362  | u- | ū | 363  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| U( | Ŭ | 364  | u( | ŭ | 365  | U0 | Ů | 366  | u0 | ů | 367  | U" | Ű | 368  | u" | ű | 369  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| U; | Ų | 370  | u; | ų | 371  | W&gt; | Ŵ | 372  | w&gt; | ŵ | 373  | Y&gt; | Ŷ | 374  | y&gt; | ŷ | 375  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| Y: | Ÿ | 376  | Z' | Ź | 377  | z' | ź | 378  | Z. | Ż | 379  | z. | ż | 380  | Z&lt; | Ž | 381  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| z&lt; | ž | 382  | O9 | Ơ | 416  | o9 | ơ | 417  | OI | Ƣ | 418  | oi | ƣ | 419  | yr | Ʀ | 422  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| U9 | Ư | 431  | u9 | ư | 432  | Z/ | Ƶ | 437  | z/ | ƶ | 438  | ED | Ʒ | 439  | A&lt; | Ǎ | 461  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| a&lt; | ǎ | 462  | I&lt; | Ǐ | 463  | i&lt; | ǐ | 464  | O&lt; | Ǒ | 465  | o&lt; | ǒ | 466  | U&lt; | Ǔ | 467  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| u&lt; | ǔ | 468  | A1 | Ǟ | 478  | a1 | ǟ | 479  | A7 | Ǡ | 480  | a7 | ǡ | 481  | A3 | Ǣ | 482  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| a3 | ǣ | 483  | G/ | Ǥ | 484  | g/ | ǥ | 485  | G&lt; | Ǧ | 486  | g&lt; | ǧ | 487  | K&lt; | Ǩ | 488  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| k&lt; | ǩ | 489  | O; | Ǫ | 490  | o; | ǫ | 491  | O1 | Ǭ | 492  | o1 | ǭ | 493  | EZ | Ǯ | 494  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| ez | ǯ | 495  | j&lt; | ǰ | 496  | G' | Ǵ | 500  | g' | ǵ | 501  | ;S | ʿ | 703  | '&lt; | ˇ | 711  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| '( | ˘ | 728  | '. | ˙ | 729  | '0 | ˚ | 730  | '; | ˛ | 731  | '" | ˝ | 733  | A% | Ά | 902  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| E% | Έ | 904  | Y% | Ή | 905  | I% | Ί | 906  | O% | Ό | 908  | U% | Ύ | 910  | W% | Ώ | 911  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| i3 | ΐ | 912  | A* | Α | 913  | B* | Β | 914  | G* | Γ | 915  | D* | Δ | 916  | E* | Ε | 917  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| Z* | Ζ | 918  | Y* | Η | 919  | H* | Θ | 920  | I* | Ι | 921  | K* | Κ | 922  | L* | Λ | 923  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| M* | Μ | 924  | N* | Ν | 925  | C* | Ξ | 926  | O* | Ο | 927  | P* | Π | 928  | R* | Ρ | 929  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| S* | Σ | 931  | T* | Τ | 932  | U* | Υ | 933  | F* | Φ | 934  | X* | Χ | 935  | Q* | Ψ | 936  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| W* | Ω | 937  | J* | Ϊ | 938  | V* | Ϋ | 939  | a% | ά | 940  | e% | έ | 941  | y% | ή | 942  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| i% | ί | 943  | u3 | ΰ | 944  | a* | α | 945  | b* | β | 946  | g* | γ | 947  | d* | δ | 948  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| e* | ε | 949  | z* | ζ | 950  | y* | η | 951  | h* | θ | 952  | i* | ι | 953  | k* | κ | 954  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| l* | λ | 955  | m* | μ | 956  | n* | ν | 957  | c* | ξ | 958  | o* | ο | 959  | p* | π | 960  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| r* | ρ | 961  | *s | ς | 962  | s* | σ | 963  | t* | τ | 964  | u* | υ | 965  | f* | φ | 966  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| x* | χ | 967  | q* | ψ | 968  | w* | ω | 969  | j* | ϊ | 970  | v* | ϋ | 971  | o% | ό | 972  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| u% | ύ | 973  | w% | ώ | 974  | 'G | Ϙ | 984  | ,G | ϙ | 985  | T3 | Ϛ | 986  | t3 | ϛ | 987  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| M3 | Ϝ | 988  | m3 | ϝ | 989  | K3 | Ϟ | 990  | k3 | ϟ | 991  | P3 | Ϡ | 992  | p3 | ϡ | 993  |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| '% | ϴ | 1012 | j3 | ϵ | 1013 | IO | Ё | 1025 | D% | Ђ | 1026 | G% | Ѓ | 1027 | IE | Є | 1028 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| DS | Ѕ | 1029 | II | І | 1030 | YI | Ї | 1031 | J% | Ј | 1032 | LJ | Љ | 1033 | NJ | Њ | 1034 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| Ts | Ћ | 1035 | KJ | Ќ | 1036 | V% | Ў | 1038 | DZ | Џ | 1039 | A= | А | 1040 | B= | Б | 1041 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| V= | В | 1042 | G= | Г | 1043 | D= | Д | 1044 | E= | Е | 1045 | Z% | Ж | 1046 | Z= | З | 1047 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| I= | И | 1048 | J= | Й | 1049 | K= | К | 1050 | L= | Л | 1051 | M= | М | 1052 | N= | Н | 1053 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| O= | О | 1054 | P= | П | 1055 | R= | Р | 1056 | S= | С | 1057 | T= | Т | 1058 | U= | У | 1059 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| F= | Ф | 1060 | H= | Х | 1061 | C= | Ц | 1062 | C% | Ч | 1063 | S% | Ш | 1064 | Sc | Щ | 1065 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| =" | Ъ | 1066 | Y= | Ы | 1067 | %" | Ь | 1068 | JE | Э | 1069 | JU | Ю | 1070 | JA | Я | 1071 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| a= | а | 1072 | b= | б | 1073 | v= | в | 1074 | g= | г | 1075 | d= | д | 1076 | e= | е | 1077 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| z% | ж | 1078 | z= | з | 1079 | i= | и | 1080 | j= | й | 1081 | k= | к | 1082 | l= | л | 1083 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| m= | м | 1084 | n= | н | 1085 | o= | о | 1086 | p= | п | 1087 | r= | р | 1088 | s= | с | 1089 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| t= | т | 1090 | u= | у | 1091 | f= | ф | 1092 | h= | х | 1093 | c= | ц | 1094 | c% | ч | 1095 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| s% | ш | 1096 | sc | щ | 1097 | =' | ъ | 1098 | y= | ы | 1099 | %' | ь | 1100 | je | э | 1101 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| ju | ю | 1102 | ja | я | 1103 | io | ё | 1105 | d% | ђ | 1106 | g% | ѓ | 1107 | ie | є | 1108 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
| ds | ѕ | 1109 | ii | і | 1110 | yi | ї | 1111 | j% | ј | 1112 | lj | љ | 1113 | nj | њ | 1114 |
+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+----+---+------+
</code></pre>

It seems that I need to use the HTML tags for tables, as suggested in the official Markdown syntax. What a big change of 360°!

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>333</wp:post_id>
  <wp:post_date>2014-02-01 18:27:30</wp:post_date>
  <wp:post_date_gmt>2014-02-01 10:27:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-first-markdown-table-on-wordpress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="post_tag" nicename="pandoc"><![CDATA[pandoc]]></category>
  <category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
  <category domain="post_tag" nicename="ultrablog"><![CDATA[UltraBlog]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>GnuPG Encryption</title>
  <link>http://blogueun.wordpress.com/2014/02/03/gnupg-encryption/</link>
  <pubDate>Mon, 03 Feb 2014 13:03:59 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=384</guid>
  <description/>
  <content:encoded><![CDATA[I've found <a href="http://blog.aboutc.net/linux/55/pgp-file-encryption-and-decryption" title="PGP 文件加解密">a page</a> which provides a brief summary of gpg commands. I think some mainland users will find it useful. I hope that I can use these commands soon.
[code gutter="false"]
$ gpg -k
$ gpg -K
[/code]
However, there are some people who find reading simplified Chinese characters hard. I think finding another guide written in Traditional Chinese is <em>much</em> harder than using whatever tool to convert the simplified Chinese characters to the Traditional ones. (e.g. Google Translate)

I've read <a href="http://ckhung0.blogspot.hk/2013/12/safe-encryption.html" title="都加密了，還怕什麼？">Prof. Hung's recent article on data encryption</a>. This article contains many links to other web pages. One of them is <a href="http://newtoypia.blogspot.tw/2013/12/gnupg-pgp.html" title="使用 GnuPG 建立你的 PGP 金鑰，讓別人能夠私密寄信給你">his article on GnuPG</a>. In the first item of the reference list in the sixth section of his article, there's a hyperlink of <a href="http://www.gentoo.org/doc/zh_tw/gnupg-user.xml" title="GnuPG Gentoo 使用者指南">a GnuPG Gentoo user guide</a> written in Traditional Chinese. This guide requires reader to read chapter 6 first, or to read chapter 2 of the GnuPG Handbook. Unluckily, the link is <em>broken</em>. Here's the correct URL:
http://www.gnupg.org/gph/en/manual.html

I think <a href="https://securityinabox.org/en/thuderbird_encryption" title="How to Use Enigmail with GnuPG in Thunderbird">this guide</a> is more useful to users of Mozilla Thunderbird, and maybe TrueCrypt can get file encryption done much faster.

<pre><code>As an Engineering student, he/she needs to get things work.
As NOT being an IT student, he/she needs to get "computer stuff" works much simpler.
</code></pre>

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>384</wp:post_id>
  <wp:post_date>2014-02-03 21:03:59</wp:post_date>
  <wp:post_date_gmt>2014-02-03 13:03:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gnupg-encryption</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gpg"><![CDATA[gpg]]></category>
  <category domain="category" nicename="information-security"><![CDATA[information security]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e56e81db2ecf1b7f073f407d0dead409</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3b15b2803bc0cde954b844c5a21a06a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d3467b0c7097de66165d2b7a81f4b772</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d681698585cfbfd29f792a8e7661af8c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Reason for My VimRepress Installation Failure</title>
  <link>http://blogueun.wordpress.com/2014/02/04/vimrepress-installation-failure/</link>
  <pubDate>Tue, 04 Feb 2014 06:11:58 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=387</guid>
  <description/>
  <content:encoded><![CDATA[In <a href="http://blogueun.wordpress.com/2014/01/12/my-first-post-using-ultrablog-vim/"><em>My First Post Using UltraBlog.vim</em></a>, I mentioned that I had tried using VimRepress. However, this plugin kept throwing errors like this.
[code]
Confirm Delete [6]: First Post Using VimRepress? [yes/NO] :yesError detected while processing :
Traceback (most recent call last):
File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
File &quot;/home/owner/.vim/bundle/VimRepress/plugin/vimrepress.py&quot;, line 41, in __check
echoerr(&quot;something wrong: %s&quot; % e)
File &quot;/home/owner/.vim/bundle/VimRepress/plugin/vimrepress.py&quot;, line 47, in &lt;lambda&gt;
echoerr = lambda s: vim.command('echoerr &quot;%s&quot;' % s)
vim.error: Vim(echoerr):something wrong: Vim(let):E461: Illegal variable name: s:user_input
[/code]
I tried browsing <code>vimrepress.py</code> starting from lines 41–50, and using something like <code>*</code>, but I couldn't understand what it was. As you can see from the last paragraph of this post, I finally decided to switch to UltraBlog.vim.

After reading the README of <a href="https://github.com/suan/vim-instant-markdown">vim-instant-markdown</a>, I can make a better <em>guess</em> now. I directly quote Suan's words here.

<blockquote>
  Make sure the ruby gems were installed under your default Ruby (i.e. if you're using RVM, use gem install and NOT sudo gem install as that might cause the gems to be installed under a non-RVM Ruby)
</blockquote>

Despite having a clue, I <em>won't</em> switch back to Blogger since WordPress.com and UltraBlog.vim work together well on my computer.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>387</wp:post_id>
  <wp:post_date>2014-02-04 14:11:58</wp:post_date>
  <wp:post_date_gmt>2014-02-04 06:11:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vimrepress-installation-failure</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogger"><![CDATA[Blogger]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="ultrablog"><![CDATA[UltraBlog]]></category>
  <category domain="category" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vimrepress"><![CDATA[VimRepress]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Firefox's Markdown Viewer</title>
  <link>http://blogueun.wordpress.com/2014/02/04/firefox-markdown-viewer/</link>
  <pubDate>Tue, 04 Feb 2014 09:10:36 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=395</guid>
  <description/>
  <content:encoded><![CDATA[This morning, I've found a Firefox Add-on called <a href="https://addons.mozilla.org/en-US/firefox/addon/markdown-viewer/">Markdown Viewer</a>. As its name suggests, it's a Firefox plugin that enables users to view Markdown documents. The screenshot provided on the home page of the add-on illustrates that it works on M$ Win*. How about GNU/Linux? I clicked the button and installed the plugin. After that, I used <code>:restart</code> in Vimperator to see what happened if I used Firefox to view a local Markdown file with extension name <code>.md</code>.

It turned out that nothing happened! With Lai's review titled <em>Work on Linux</em>, I figured out what to do. After looking at his suggested code for <code>vi ~/.mozilla/firefox/*default/mimeTypes.rdf</code>, I really tested it and it worked. Critical readers will then ask about the way to include multiple file extensions.

Browsing the code with <code>#</code> in the RDF file helps. Here's what my results.
[code firstline="123" highlight="5,6,7" language="xml"]
&lt;RDF:Description RDF:about=&quot;urn:mimetype:application/vnd.ms-excel&quot;
                 NC:value=&quot;application/vnd.ms-excel&quot;
                 NC:editable=&quot;true&quot;
                 NC:description=&quot;Microsoft Excel Worksheet&quot;&gt;
  &lt;NC:fileExtensions&gt;xls&lt;/NC:fileExtensions&gt;
  &lt;NC:fileExtensions&gt;xlb&lt;/NC:fileExtensions&gt;
  &lt;NC:fileExtensions&gt;xlt&lt;/NC:fileExtensions&gt;
  &lt;NC:handlerProp RDF:resource=&quot;urn:mimetype:handler:application/vnd.ms-excel&quot;/&gt;
&lt;/RDF:Description&gt;
[/code]

According to <a href="https://superuser.com/questions/249436/file-extension-for-markdown-files">a question on Super User</a>, we use <em>more than one</em> extension name for a Markdown file. However, a GNU/Linux user should <strong>never</strong> use <code>.md</code>.

Finally, combining Lai's and Cas' posts, I've come up with the following Gist.

[gist]8800268[/gist]

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>395</wp:post_id>
  <wp:post_date>2014-02-04 17:10:36</wp:post_date>
  <wp:post_date_gmt>2014-02-04 09:10:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>firefox-markdown-viewer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="firefox"><![CDATA[Firefox]]></category>
  <category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="post_tag" nicename="vim"><![CDATA[Vi(m)]]></category>
  <category domain="post_tag" nicename="vimperator"><![CDATA[Vimperator]]></category>
  <category domain="category" nicename="web-technologies"><![CDATA[web technologies]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>My Error While Using UltraBlog</title>
  <link>http://blogueun.wordpress.com/2014/02/04/my-error-while-using-ultrablog/</link>
  <pubDate>Tue, 04 Feb 2014 12:13:59 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=414</guid>
  <description/>
  <content:encoded><![CDATA[I'm not sure if I've installed UltraBlog.vim correctly a month ago, but it surely improves my blogging efficiency <em>a lot</em>. With Vim's keystroke, I can move the cursor quickly. Such power of "what you think is what you get" is impossible to find in other editors, either the online ones or the offline ones.

I write this post because I would like to make a record only. I can still find ways to work well with UltraBlog.

What are the errors? The following screenshots illustrate them.

I opened a local list and forgot to close it before opening another list. Then, from one of the lists, I opened a new buffer to edit a post. After I finished editing the post, I issued <code>ZQ</code> in order to close the buffer. However, the buffer didn't close. Instead, I got <em>another</em> list. It seems that the plugin doesn't want users to use an "outdated" list to link up with a post. As I tried to close the new list with <code>ZQ</code> or <code>:q</code>, I just <em>couldn't</em> do it. But there's <em>so many</em> windows. OK! Then I just use <code>&lt;C-w&gt; j</code> and <code>ZQ</code> to close the old lists. When I used UltraBlog for the first time, the plugin surprised me by giving me an <em>extra, identical and updated</em> list of contents. Since the first time, the plugin still do the same thing, of course, but I can "keep calm and continue blogging".

Today, I ran into this situation for the first time.

<img src="http://blogueun.files.wordpress.com/2014/02/ub_q1.png" alt="first UltraBlog screenshot" />
I tried to quit the new list with <code>:q</code>.

<img src="http://blogueun.files.wordpress.com/2014/02/ub_q2.png" alt="second UltraBlog screenshot" />
Vim told me to use <code>:q!</code> instead.

<img src="http://blogueun.files.wordpress.com/2014/02/ub_error.png" alt="third UltraBlog screenshot" />
UltraBlog threw a host of errors that I wouldn't be interested to find out more.

I wouldn't have time to figure out what it really is. <em>As far as I know, if I remember to close all post lists while writing or editing a post, things will be fine.</em> Anyways, just make things work, and blogging with Vim and UltraBlog is awesome!

Note: Actually, <code>:on</code> can clear the unwanted and unaccessible old lists. This can be checked using <code>:ls</code>, which is the same as <code>:buffers</code>.<sup id="fnref-414-1"><a href="#fn-414-1" rel="footnote">1</a></sup>

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-414-1">
Last changed: 05/02/14 21:50:12 HKT&#160;<a href="#fnref-414-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>414</wp:post_id>
  <wp:post_date>2014-02-04 20:13:59</wp:post_date>
  <wp:post_date_gmt>2014-02-04 12:13:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>my-error-while-using-ultrablog</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="ultrablog-vim"><![CDATA[UltraBlog.vim]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>EMACS Key Bindings in Vimperator?</title>
  <link>http://blogueun.wordpress.com/2014/02/04/emacs-key-bindings-in-vimperator/</link>
  <pubDate>Tue, 04 Feb 2014 12:54:05 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=416</guid>
  <description/>
  <content:encoded><![CDATA[I've written <a href="http://blogueun.wordpress.com/2013/12/10/using-vim-keystrokes-in-web-browser/" title="Using Vim Keystrokes in Web Browser">a post about Vimperator</a>, and also <a href="http://blogueun.wordpress.com/2013/12/23/vi-key-bindings-in-emacs/" title="Vi Key Bindings in Emacs">another one about Viper</a>. However, I've <em>never</em> seen web pages that introduce the following Vimperator insert mode commands written by fans of Vi(m) or Vimperator.
- Typing <code>&lt;C-a&gt;</code> moves the cursor to the beginning of the line.
- Typing <code>&lt;C-e&gt;</code> moves the cursor to the end of the line.
- Typing <code>&lt;C-k&gt;</code> removes the characters <em>after</em> the cursor.
They behave <em>exactly</em> like the keyboard commands in GNU Emacs!

In my opinion, they're just behaving like the commands used in a *nix terminal. Anyways, I've learnt some new commands, no matter where they're used. For a Vi(m) user, it <em>won't</em> hurt to take the official tutorial of Emacs since they can applied once you're in an Info page. For example, if you want to scroll down by one screen in an Info document, you can issue the command <code>&lt;C-v&gt;</code>. To reverse the change, you can type <code>&lt;M-v&gt;</code>.

I end this post with <code>&lt;C-j&gt;</code>, though it's behaviour in Emacs differs from the behaviour in Vimperator. It's just another way for using the search engine: moving the cursor to the search box at the top right-hand corner.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>416</wp:post_id>
  <wp:post_date>2014-02-04 20:54:05</wp:post_date>
  <wp:post_date_gmt>2014-02-04 12:54:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>emacs-key-bindings-in-vimperator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
  <category domain="post_tag" nicename="vimperator"><![CDATA[Vimperator]]></category>
  <category domain="post_tag" nicename="viper"><![CDATA[Viper]]></category>
  <category domain="category" nicename="web-technologies"><![CDATA[web technologies]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing WordPress' Footnotes</title>
  <link>http://blogueun.wordpress.com/2014/02/06/testing-wordpress-footnotes/</link>
  <pubDate>Wed, 05 Feb 2014 16:54:20 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=503</guid>
  <description/>
  <content:encoded><![CDATA[I tried to embed footnotes using UltraBlog. Maybe I've done too much things. Let me list them here.
1. On the dashboard, go to "Settings", "Writing" and check the box for using Markdown.
2. Try using UltraBlog.vim to write some footnotes by editing an existing post found by <code>:UBList</code>.
3. Send the finished post to WordPress.com and view the results, and find out that it fails.

It involves several technologies. UltraBlog. Therefore, it's unrealistic to rely on Google search engine to get the answer.

In order to quickly find out the cause of such error, I used the online editor to create a minimum working example of a post containing a footnote. Then I used UltraBlog to download that post. In gVim, I could see that the filetype is <code>html</code>, instead of <code>markdown</code>. I tried to change it to <code>markdown</code> and update the draft. However, the string <code>^1</code> enclosed in middle brackets <em>wasn't</em> interpreted. When I switch the filetype back to <code>html</code>, then things just work again. Just like the text below. I copied them from <a href="http://johnmacfarlane.net/pandoc/demo/example9/pandocs-markdown.html">the official pandoc markdown syntax guide</a>.

<blockquote>
  Here is a footnote reference,<sup id="fnref-503-1"><a href="#fn-503-1" rel="footnote">1</a></sup> and another.<sup id="fnref-503-longnote"><a href="#fn-503-longnote" rel="footnote">2</a></sup>
</blockquote>

As I can see from the above block quote, the string <code>^longnote</code> inside a pair of middle brackets will be changed to numbers. In order to let you see it, I post a screenshot of my gVim here.

<img src="http://blogueun.files.wordpress.com/2014/02/my_gvim.png" alt="screenshot of my gVim" />
Note: Remember to <code>:se ft=html</code> before <code>:UBSend</code>

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-503-1">
Here is the footnote.&#160;<a href="#fnref-503-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-503-longnote">
Here's one with multiple blocks.&#160;<a href="#fnref-503-longnote" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>503</wp:post_id>
  <wp:post_date>2014-02-06 00:54:20</wp:post_date>
  <wp:post_date_gmt>2014-02-05 16:54:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>testing-wordpress-footnotes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gvim"><![CDATA[gVim]]></category>
  <category domain="post_tag" nicename="pandoc"><![CDATA[pandoc]]></category>
  <category domain="category" nicename="ultrablog-vim"><![CDATA[UltraBlog.vim]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Another Testing Page for WordPress.com's Built-in SyntaxHighlighter and UltraBlog</title>
  <link>http://blogueun.wordpress.com/2014/02/06/another-testing-page-for-wordpress-coms-built-in-syntaxhighlighter-and-ultrablog/</link>
  <pubDate>Wed, 05 Feb 2014 17:55:52 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=516</guid>
  <description/>
  <content:encoded><![CDATA[This post contains a code block. Following what I've done in the numbered list and <em>the last paragraph</em> in one of my recent post on WordPress.com, surrounding the code block with 3 backticks should work in UltraBlog.<sup id="fnref-516-1"><a href="#fn-516-1" rel="footnote">1</a></sup>

[code lang=java]
public static void main(String[] args) {
    int i = 1;
}
[/code]

However, I tried writing an <code>&lt;html&gt;</code> tag in the online editor, and the code was stripped of. Anyways, there's <a href="https://gist.github.com">Gist</a> on GitHub, so there should be no problem.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-516-1">
<a href="http://blogueun.wordpress.com/2014/02/06/testing-wordpress-footnotes/">Testing WordPress' Footnotes</a>&#160;<a href="#fnref-516-1" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>516</wp:post_id>
  <wp:post_date>2014-02-06 01:55:52</wp:post_date>
  <wp:post_date_gmt>2014-02-05 17:55:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>another-testing-page-for-wordpress-coms-built-in-syntaxhighlighter-and-ultrablog</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="post_tag" nicename="syntaxhighlighter"><![CDATA[SyntaxHighlighter]]></category>
  <category domain="category" nicename="ultrablog-vim"><![CDATA[UltraBlog.vim]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[GNU Supporter]]></wp:comment_author>
    <wp:comment_author_email>sere@live.hk</wp:comment_author_email>
    <wp:comment_author_url>http://blogueun.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>137.189.228.1</wp:comment_author_IP>
    <wp:comment_date>2014-04-17 22:38:25</wp:comment_date>
    <wp:comment_date_gmt>2014-04-17 14:38:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm sorry for my very late response. I've removed your email while keeping the words in your comment. I hope this will do.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>18</wp:comment_parent>
    <wp:comment_user_id>59943047</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1397745505</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1397745506.26745510101318359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"gnusupporter";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1397745507</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[watch dogs key generator download]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://devconn.co/update/product-gamerstash/</wp:comment_author_url>
    <wp:comment_author_IP>88.80.21.95</wp:comment_author_IP>
    <wp:comment_date>2014-03-17 23:37:34</wp:comment_date>
    <wp:comment_date_gmt>2014-03-17 15:37:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When I initially commented I clicked the "Notify me when new comments are added" checkbox and now each time a comment 
is added I get several e-mails with the same comment.

Is there any way you can remove me from that service?
Cheers!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1395070654.59776210784912109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1397745189</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1397745189</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1397745190.4976789951324462890625;s:7:"message";s:51:"gnusupporter changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"gnusupporter";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[primal pit paste code]]></wp:comment_author>
    <wp:comment_author_email>juniormcquade@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://weat.co.uk/blogs/2758/3019/what-is-android-programming</wp:comment_author_url>
    <wp:comment_author_IP>66.118.156.101</wp:comment_author_IP>
    <wp:comment_date>2014-02-14 10:54:13</wp:comment_date>
    <wp:comment_date_gmt>2014-02-14 02:54:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's great that you are getting thoughts from this post as 
well as from our argument made here.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1392346453.6230990886688232421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1392386851</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1392386851</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1392386852.2536370754241943359375;s:7:"message";s:51:"gnusupporter changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"gnusupporter";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[Knights N Squires Hack iOS download]]></wp:comment_author>
    <wp:comment_author_email>conradmaygar@freenet.de</wp:comment_author_email>
    <wp:comment_author_url>http://www.youtube.com/watch?v=O1wLrzmmRrY</wp:comment_author_url>
    <wp:comment_author_IP>89.47.23.35</wp:comment_author_IP>
    <wp:comment_date>2014-05-09 09:01:14</wp:comment_date>
    <wp:comment_date_gmt>2014-05-09 01:01:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[fantastic issues altogether, you simply gained a brand 
new reader. What would you recommend about your submit that you made a few days in the past?
Any certain?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1400837135</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1400837135.4819240570068359375;s:7:"message";s:51:"gnusupporter changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"gnusupporter";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1399597274.5147418975830078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1400837135</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Don't Allow Pingbacks</title>
  <link>http://blogueun.wordpress.com/2014/02/06/dont-allow-pingbacks/</link>
  <pubDate>Wed, 05 Feb 2014 17:27:57 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=524</guid>
  <description/>
  <content:encoded><![CDATA[This noon, I received some pingback notifications. It is possible that I get these messages because I included some hyperlinks that link back to my own posts. After viewing the contents, I found them meaningless and wanted to delete them. Harrison provides the reasons for <em>not</em> allowing pingbacks.<sup id="fnref-524-1"><a href="#fn-524-1" rel="footnote">1</a></sup>

As the author has said, he will simply delete the pingbacks on his blog pages. Moreover, I <em>don't</em> want to bother the authors of posts to which I has linked. Therefore, I've found the last part of the official support page useful.<sup id="fnref-524-2"><a href="#fn-524-2" rel="footnote">2</a></sup>

<blockquote>
  <h3>Disabling Pingbacks</h3>
  
  You can easily disable pingbacks on individual posts via the Discussion module on your Add New or Edit Post page:
  
  <img src="http://en.support.files.wordpress.com/2009/05/discussionmodule.jpg" alt="Wordpress.com's interface" title="Figure 1" />
</blockquote>

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-524-1">
<a href="http://www.wpdoctors.co.uk/with-wordpress-whats-a-pingback-should-i-approve-them">Dan Harrison's post on WP Doctors</a>&#160;<a href="#fnref-524-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-524-2">
<a href="http://en.support.wordpress.com/comments/pingbacks/#disabling-pingbacks">WordPress.com's support page on pingbacks</a>&#160;<a href="#fnref-524-2" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>524</wp:post_id>
  <wp:post_date>2014-02-06 01:27:57</wp:post_date>
  <wp:post_date_gmt>2014-02-05 17:27:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dont-allow-pingbacks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Installing Ruby Again!</title>
  <link>http://blogueun.wordpress.com/2014/02/16/installing-ruby-again/</link>
  <pubDate>Sun, 16 Feb 2014 09:32:23 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=652</guid>
  <description/>
  <content:encoded><![CDATA[It seems that the installation of Ruby through rvm is <em>not</em> as easy as I think. The following two commands have failed.

[code lang=bash]
$ rvm pkg install iconv
[/code]

<img src="http://blogueun.files.wordpress.com/2014/02/rvm_install_iconv.png" alt="failure of installing iconv" />
[code lang=bash]
$ rvm install 1.9.2 -C --with-openssl-dir=$HOME/.rvm/usr,--with-iconv-dir=$HOME/.rvm/usr
[/code]

<img src="http://blogueun.files.wordpress.com/2014/02/rvm_install_ruby1.png" alt="failure of compiling ruby 1.9.2" />
The <a href="http://www.lennu.net/2012/05/11/octopress-installation-in-ubuntu-12-dot-04-with-rsync/">Octopress official documentation</a> as well as <a href="http://whbzju.github.io/blog/2013/02/02/octopress-peizhi/">a Chinese page</a> have those commands. Luckily, <a href="https://gist.github.com/aahan/5226975">Krish's approach</a> works on my computer.

I created this post to see if this affects UltraBlog.vim.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>652</wp:post_id>
  <wp:post_date>2014-02-16 17:32:23</wp:post_date>
  <wp:post_date_gmt>2014-02-16 09:32:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>installing-ruby-again</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Including a Bibliography in Pandoc Markdown on Ubuntu 12.04 LTS</title>
  <link>http://blogueun.wordpress.com/2014/02/23/including-a-bibliography-in-pandoc-markdown-on-ubuntu-12-04-lts/</link>
  <pubDate>Sun, 23 Feb 2014 10:16:39 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=655</guid>
  <description/>
  <content:encoded><![CDATA[I tried typesetting a $latex \LaTeX$ Beamer slide using pandoc markdown since it's easy to use.  According to the official demo<sup id="fnref-655-1"><a href="#fn-655-1" rel="footnote">1</a></sup>, with a CSL file<sup id="fnref-655-2"><a href="#fn-655-2" rel="footnote">2</a></sup>, which specifies the style to the citation, users are suppose to be able to create a document with a bibliography.  However, when I ran the following command in Vim on Ubuntu 12.04 LTS, pandoc hanged.

[code lang=text]
:!pandoc -s -S --biblio mybib.bib --csl  -t beamer % -V theme:Berlin -o %&lt;.pdf
[/code]

I admit that it's <em>too</em> complicated.  I tested several things:

<ol>
<li>$latex \LaTeX$ Beamer class</li>
<li>Bibliography</li>
</ol>

To figure out which part of the command is wrong, I tried to remove the part related to item 1.  Issuing a simple command for item 2, the usage of one of the CPU in my computer rose to almost 100%, and remained high with small fluctuations.

[code lang=text]
:!pandoc -s -S --biblio biblio.bib -o %&lt;.html
[/code]

This issue is indeed one faced by the community of Ubuntu users, so I can find official advices on GitHub.  Eventually, the last comment on the page has solved my problem.  I think installing <code>libghc-citeproc-hs-data</code> is quicker than installing the latest (1.9.4.2-2) version of the DEB file for pandoc.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.

<div class="footnotes">
<hr />
<ol>

<li id="fn-655-1">
<a href="http://johnmacfarlane.net/pandoc/demos.html">Pandoc demos item 24 (Markdown citations)</a>&#160;<a href="#fnref-655-1" rev="footnote">&#8617;</a>
</li>

<li id="fn-655-2">
<a href="https://github.com/citation-style-language/styles">CSL's official repository on GitHub</a>&#160;<a href="#fnref-655-2" rev="footnote">&#8617;</a>
</li>

</ol>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>655</wp:post_id>
  <wp:post_date>2014-02-23 18:16:39</wp:post_date>
  <wp:post_date_gmt>2014-02-23 10:16:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>including-a-bibliography-in-pandoc-markdown-on-ubuntu-12-04-lts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="biblatex"><![CDATA[BibLaTeX]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="post_tag" nicename="pandoc"><![CDATA[pandoc]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Migrated to Octopress</title>
  <link>http://blogueun.wordpress.com/2014/03/15/migrated-to-octopress/</link>
  <pubDate>Sat, 15 Mar 2014 14:45:00 +0000</pubDate>
  <dc:creator>gnusupporter</dc:creator>
  <guid isPermaLink="false">http://blogueun.wordpress.com/?p=658</guid>
  <description/>
  <content:encoded><![CDATA[Posting code using Octopress is easier, and I can attach some JavaScripts freely to GitHub pages.  Therefore, after several weeks of testing, I've decided to write blog entries about IT on <a href="http://vincenttam.github.io/">my new GitHub page</a>.

Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>658</wp:post_id>
  <wp:post_date>2014-03-15 22:45:00</wp:post_date>
  <wp:post_date_gmt>2014-03-15 14:45:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>migrated-to-octopress</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="blogging"><![CDATA[blogging]]></category>
  <category domain="post_tag" nicename="octopress"><![CDATA[Octopress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
