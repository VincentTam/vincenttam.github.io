<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog 1]]></title>
  <link href="https://vincenttam.github.io/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2015-09-06T02:46:26+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Understood How Zorn's Lemma Implies the Axiom of Choice]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/06/understood-how-zorns-lemma-implies-the-axiom-of-choice/"/>
    
    <updated>2015-09-06T01:26:06+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/06/understood-how-zorns-lemma-implies-the-axiom-of-choice</id>
    
      <content type="html"><![CDATA[<p>Many math books that I’ve read referred me to other books for the
proof of the equivalence of the Axiom of Choice and Zorn’s Lemma.
This afternoon, I spent more than two hours to understand the proof
that the later implies and former in <cite>Topology</cite> written by
Davis.</p>

<ol>
  <li>Set up a non-empty partially ordered set $(\mathcal{P},\le)$</li>
  <li>Let $\mathcal{T}$ be any non-empty chain in $\mathcal{P}$.</li>
  <li>Prove that $\cup \mathcal{T} \in \mathcal{P}$.</li>
  <li>Apply Zorn’s Lemma to get a maximal element $g \in \mathcal{P}$.</li>
  <li><span class="myeqn">Use the maximality of $g$ to claim
that the domain of $g$ equals the family of non-empty subsets
$(S_i)_{i \in I}$ from which elements $(x_i)_{i \in I}$ are chosen.
</span></li>
</ol>

<p>In the book, $\le$ means function extension, and</p>

<div class="myeqn">
\[
  \mathcal{P} = \{f: f \text{ is a function, } dom\,f \subseteq
  (S_i)_{i \in I}, f(x) \in x \forall x \in dom\,f\}.
\]
</div>

<p><span class="myeqn">
Step (3) is proved step-by-step according to the definition of
$\mathcal{P}$.  Usually, suppose that $(x_1,y_1),(x_2,y_2) \in f$,
$x_1 = x_2 \implies y_1 = y_2$.  The book uses the contrapositive form
of this statement.  I was stuck at the sentence <q>Now, for a set to
be an element of $dom\cup\mathcal{T}$, it must be an element of some
member of $\mathcal{K}$</q>.  At first, I omitted the phrase "some
member of", and stopped for half an hour.  Reading the next sentence
<q>Hence $dom\cup\mathcal{T} \subseteq (S_i)_{i \in I}$</q>, I knew
how to interpret the sentence where I was stuck: if $S \in
dom\cup\mathcal{T}$, $\exists f \in \mathcal{T}$ such that $S \in
dom\,f$.  Since $f \in \mathcal{T} \subseteq \mathcal{P}$, $dom\,f \in
\subseteq (S_i)_{i \in I}$.  Then $S \in \subseteq (S_i)_{i \in I}$,
and thus $dom\cup\mathcal{T} \subseteq (S_i)_{i \in I}$.
</span></p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Revised Absolute Convergence]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/05/revised-absolute-convergence/"/>
    
    <updated>2015-09-05T22:05:03+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/05/revised-absolute-convergence</id>
    
      <content type="html"><![CDATA[<p>I am <em>not</em> so satisfied with this the following
<em>definition</em>.<sup id="fnref:churchill"><a href="#fn:churchill" class="footnote">1</a></sup></p>

<div class="myeqn">
\[
  e^{i\theta} := \cos \theta + i \sin \theta
\]
</div>

<p>I remembered the proof for convergence of</p>

<div class="myeqn">
\[
  e^{x} := \sum_{i = 0}^{\infty} \frac{x^i}{i!}
\]
</div>

<p>for real numbers.  I <em>didn’t</em> know if this can be extended to complex
numbers.  Therefore, I thought about the absolute convergence of
complex-valued series.  It’s expected that many proofs are similar to
their real counterparts, such as the result that absolute convergence
implies convergence.  In real numbers, this result makes use of the
Triangle Inequalty and Cauchy Convergence Criterion, and the key step
is</p>

<div class="myeqn">
\[
  \abslr{\sum_{k = m + 1}^{n} a_k} \le \sum_{k = m + 1}^{n} \abs{a_k}.
\]
</div>

<p>Since the proof of the above statement for real numbers requires
Bolzano–Weierstrass Theorem, which is about the sequential
compactness of sequences of real numbers, I was <em>stuck</em> at this point.</p>

<p><span class="myeqn">
Finally, I read another book, which said that if $(z_n)$ is a Cauchy
sequence, and $\forall n \in \N$, $u_n := \Re(z_n)$ and $v_n :=
\Im(z_n)$, $\forall \varepsilon &gt; 0, \exists N \in \N$ such that
$\forall m,n \le N$,
</span></p>

<div class="myeqn">
\begin{align*}
  \abs{u_n - u_m} &amp;\le \abs{z_n - z_m} &lt; \varepsilon, \\
  \abs{v_n - v_m} &amp;\le \abs{z_n - z_m} &lt; \varepsilon.
\end{align*}
</div>

<p>Then $(u_n)$ and $(v_n)$ are real-valued Cauchy sequences, which are
convergent.<sup id="fnref:ahlfors"><a href="#fn:ahlfors" class="footnote">2</a></sup>  This guarantees the convergence of $(z_n)$ in
the complex plane.</p>

<p>To establish the absolute convergence of $\exp z$, we need the root
test.  The proofs can be borrowed from their counterparts in the set
of real numbers.  Ahlfors leaves the proof for <span class="myeqn">$\sqrt[n]{n!} \to \infty$</span> to readers.  I find
<a href="http://math.stackexchange.com/a/514397">Dan’s proof</a> pretty easy.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:churchill">

      <p>Brown, J. W., Churchill, R. V., &amp; Lapidus, M. (1996). <em>Complex
variables and applications (Vol. 7)</em>. (pp. 17). New York:
McGraw-Hill. <a href="#fnref:churchill" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:ahlfors">

      <p>Ahlfors, L. (1979). <em>Complex analysis</em>. (pp. 34). Auckland:
McGraw-Hill. <a href="#fnref:ahlfors" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Stuck at Two Trigonometric Inequalities]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/04/stuck-at-two-trigonometric-inequalities/"/>
    
    <updated>2015-09-04T18:26:48+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/04/stuck-at-two-trigonometric-inequalities</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Suppose that $z = x + iy, x,y \in \R$.  Then $\abs{\sin z} \ge
\abs{\sin x}$ and $\abs{\sin z} \ge \abs{\sinh y}$.</p>

<!-- more -->

<h2 id="forgotten-facts">Forgotten facts</h2>

<p>I’ve forgotten many facts about complex variables learnt almost two
years ago.  For example, the defhinition of sines and cosines.  Eight
years ago, I can memorize well the trigonometric formulae.  Now, I
have difficulties in proving them.</p>

<div class="myeqn">
\begin{align}
  \cos z &amp;= \frac{e^{iz}+e^{-iz}}{2} \label{defa} \\
  \sin z &amp;= \frac{e^{iz}-e^{-iz}}{2i} \label{defb}
\end{align}
</div>

<h2 id="look-at-the-hint">Look at the hint</h2>

<p>In the book that I’m reading, there’re two formulae.</p>

<div class="myeqn">
\begin{align}
  \abs{\sin z}^2 &amp;= \sin^2 x + \sinh^2 y \label{hint1a} \\
  \abs{\cos z}^2 &amp;= \cos^2 x + \sinh^2 y \label{hint1b}
\end{align}
</div>

<p>Even though the problem can be solved once these two formulae are
accepted, I <em>don’t</em> know why they’re true.</p>

<h2 id="look-further-up">Look further up</h2>

<p>I found another two formulae.</p>

<div class="myeqn">
\begin{align}
  \sin z &amp;= \sin x \cosh y + i \cos x \sinh y \label{hint2a} \\
  \cos z &amp;= \cos x \cosh y - i \sin x \sinh y \label{hint2b}
\end{align}
</div>

<p>I tried to verify \eqref{hint2a} after having read \eqref{defhb}.</p>

<h2 id="first-failed-attempt">First failed attempt</h2>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    &amp;\quad\: \sin z \\
    &amp;= \frac{e^{iz} - e^{-iz}}{2i} \\
    &amp;= \frac{e^{i(x + iy)} - e^{-i(x + iy)}}{2i} \\
    &amp;= \frac{e^{ix} e^{-y} - e^{-ix} e^{y}}{2i} \\
    &amp;= \frac{e^{ix} - e^{-ix}}{2i} e^{-y} + \frac{e^{-ix - y}}{2i} -
    \frac{e^{-ix} e^{y}}{2i} \\
    &amp;= \sin x \cdot e^{-y} + \frac{e^{-ix}}{i} \cdot
    \frac{e^{-y} - e^{y}}{2}\\
    &amp;= \sin x \cdot e^{-y} + i e^{-ix} \frac{e^{y} - e^{-y}}{2} \\
    &amp;= \sin x \cdot e^{-y} + i e^{-ix} \sinh y
  \end{aligned}
  \label{fail1}
\end{equation}
</div>

<p>I was <em>stuck</em> at this point because I <em>didn’t</em> know how to change
\eqref{fail1} to \eqref{hint2a}.</p>

<h2 id="more-forgotten-facts">More forgotten facts</h2>

<p>In fact, some simple identities involving hyperbolic functions can
simplify matters.</p>

<div class="myeqn">
\begin{align}
  \cosh z &amp;= \frac{e^{y}+e^{-y}}{2} \label{defha} \\
  \sinh z &amp;= \frac{e^{y}-e^{-y}}{2} \label{defhb} \\
  \cos(iy) &amp;= \cosh y \label{idha} \\
  \sin(iy) &amp;= i \sinh y \label{idhb}
\end{align}
</div>

<p>Then I realised that \eqref{hint2a} follows from the compound angle
formula.</p>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    \sin(x + iy) &amp;= \sin x \cos(iy) + \cos x \sin(iy) \\
    &amp;= \sin x \cosh y + i \cos x \sinh y
  \end{aligned}
  \label{link}
\end{equation}
</div>

<p>Thus, I need to prove something more general.</p>

<h2 id="compound-angle-formulae">Compound angle formulae</h2>

<div class="myeqn">
\begin{align}
  \cos(z_1 + z_2) &amp;= \cos z_1 \cos z_2 - \sin z_1 \sin z_2
  \label{cpda} \\
  \sin(z_1 + z_2) &amp;= \sin z_1 \cos z_2 + \cos z_1 \sin z_2
  \label{cpdb}
\end{align}
</div>

<p>I tried proving \eqref{cpdb} in the <em>same</em> way like \eqref{fail1}.</p>

<h2 id="second-failed-attempt">Second failed attempt</h2>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    &amp;\quad\: \sin(z_1 + z_2) \\
    &amp;= \frac{e^{i(x_1 + iy_1 + x_2 + iy_2)} - e^{-i(x_1 + iy_1 + x_2 +
    iy_2)}}{2i} \\
    &amp;= \frac{1}{2i} [e^{i(x_1 + x_2)} e^{-(y_1 + y_2)}
    - e^{-i(x_1 + x_2)} e^{y_1 + y_2}]
  \end{aligned}
  \label{fail2}
\end{equation}
</div>

<p>Then I <em>didn’t</em> know how to continue.</p>

<h2 id="reasons-for-the-above-failures">Reasons for the above failures</h2>

<ul>
  <li>\eqref{fail1} and \eqref{fail2} involve fractions, which are more
difficult to deal with than those <em>without</em> fractions.</li>
  <li>In order to change \eqref{fail1} to \eqref{hint2a}, some sort of
factorisation is needed, and this requires creating a term that fits
the puzzle.  Again, this <em>isn’t</em> so easy.</li>
</ul>

<h2 id="just-use----and--no-">Just use ‘+’, ‘-‘ and ‘×’, no ‘÷’</h2>

<p>From \eqref{defa} and \eqref{defb}, one should know that cosines,
sines and exponents are <em>related</em>.  For any $z_1, z_2 \in \C$, the
formula for $\sin(z_1 + z_2)$ and $\cos(z_1 + z_2)$ <em>aren’t</em> so easy,
but the one for $e^{z_1 + z_2}$ is <em>simple</em>.  Making use of the
Euler’s formula for complex numbers, one has</p>

<div class="myeqn">
\begin{align}
  e^{iz_1} &amp;= \cos z_1 + i \sin z_1 \label{eulerz1} \\
  e^{iz_2} &amp;= \cos z_2 + i \sin z_2 \label{eulerz2}
\end{align}
</div>

<p>Multiply \eqref{eulerz1} by \eqref{eulerz2}.</p>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    &amp;\quad\: e^{i(z_1 + z_2)} \\
    &amp;= (\cos z_1 \cos z_2 - \sin z_1 \sin z_2) \\
    &amp;\quad\: + i(\cos z_1 \sin z_2 + \sin z_1 \cos z_2)
  \end{aligned}
  \label{eiz12a}
\end{equation}
</div>

<p>Remembering Euler’s formula</p>

<div class="myeqn">
\[
  e^{i(z_1 + z_2)} = \cos(z_1 + z_2) + i \sin(z_1 + z_2),
\]
</div>

<p>can we say immediately that \eqref{hint2a} and \eqref{hint2b} are
true?  No, since there’s <em>no</em> guarantee that $\cos(z_1 + z_2)$ and
$\sin(z_1 + z_2)$ are real.  However, I kept working on \eqref{eiz12a}
so that \eqref{hint2a} and \eqref{hint2b} were proved.</p>

<p>From \eqref{defa} and \eqref{defb}, it’s trivial that</p>

<div class="myeqn">
\[
  \sin(-z) = -\sin z \text{ and } \cos(-z) = \cos z.
\]
</div>

<p>Therefore, we write an analog of \eqref{eiz12a} for $e^{-i(z_1 +
z_2)}$.</p>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    &amp;\quad\: e^{-i(z_1 + z_2)} \\
    &amp;= [\cos (-z_1) \cos (-z_2) - \sin (-z_1) \sin (-z_2)] \\
    &amp;\quad\: + i[\cos (-z_1) \sin (-z_2) + \sin (-z_1) \cos (-z_2)] \\
    &amp;= (\cos z_1 \cos z_2 - \sin z_1 \sin z_2) \\
    &amp;\quad\: - i(\cos z_1 \sin z_2 + \sin z_1 \cos z_2)
  \end{aligned}
  \label{eiz12b}
\end{equation}
</div>

<div class="myeqn">
\[
  \begin{aligned}
    &amp;\quad\: \cos(z_1 + z_2) \quad
    (\text{by } \frac{\eqref{eiz12a} + \eqref{eiz12b}}{2}) \\
    &amp;= \frac{e^{i(z_1 + z_2) - e^{-i(z_1 + z_2)}}}{2} \\
    &amp;= \cos z_1 \cos z_2 - \sin z_1 \sin z_2
  \end{aligned}
\]
</div>

<p>\eqref{hint2a} can be derived in a similar way.</p>

<h2 id="remaining-work">Remaining work</h2>

<p>\eqref{hint1b} can be derived from \eqref{hint2b} by using $\sin^2 x +
\cos^2 x = 1$ and $\cosh^2 x - \sinh^2 x = 1$.</p>

<div class="myeqn">
\[
  \begin{aligned}
    &amp;\quad\, \abs{\cos z}^2 \\
    &amp;= \cos^2 x \cosh^2 y + \sin^2 x \sinh^2 y \\
    &amp;= \cos^2 x (1 + \sinh^2 y) + (1 - \cos^2 x) \sinh^2 y \\
    &amp;= \cos^2 x + \sinh^2 y
  \end{aligned}
\]
</div>

<p>The derivation of \eqref{hint1a} from \eqref{hint2a} is left as
exercise.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Found an Upper Bound for the Modulus of Legendre Polynomials]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/03/found-an-upper-bound-for-the-modulus-of-legendre-polynomials/"/>
    
    <updated>2015-09-03T16:35:01+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/03/found-an-upper-bound-for-the-modulus-of-legendre-polynomials</id>
    
      <content type="html"><![CDATA[<h2 id="lemma">Lemma</h2>

<p>Suppose that $w: [a,b] \to \C$ is piecewise continuous, then we have</p>

<div class="myeqn">
\begin{equation}
\abslr{\int_{a}^{b} w(t) \ud t} \le \int_{a}^{b} \abs{w(t)} \ud t.
\label{lemma}
\end{equation}
</div>

<p>The trick is to treat the integral on the L.H.S. of \eqref{lemma} as a
number.</p>

<div class="myeqn">
\begin{align}
\int_{a}^{b} w(t) \ud t &amp;= r_0 e^{i\theta_0} \text{ for some } r \in
\R \text{ and } \theta_0 \in [-\pi,\pi)
\label{trick1}\\
r_0 &amp;= \int_{a}^{b} e^{-i\theta_0} w(t) \ud t
\label{trick2}
\end{align}
</div>

<p>Then from \eqref{lemma} and \eqref{trick1}, it suffices to show that</p>

<div class="myeqn">
\begin{equation}
r_0 = \abslr{r_0 e^{i\theta_0}} \le \int_{a}^{b} \abs{w(t)} \ud t.
\label{new_goal1}
\end{equation}
</div>

<p>Since \eqref{trick2} consists of $e^{-i\theta_0}$, which is <em>absent</em>
on the R.H.S. of \eqref{lemma} and \eqref{new_goal1}, we add it back.
Thus, we need to show</p>

<div class="myeqn">
\begin{equation}
r_0 \le \int_{a}^{b} \abslr{e^{-i\theta_0} w(t)} \ud t.
\label{new_goal2}
\end{equation}
</div>

<p>Looking at \eqref{trick2} again, we’re almost there!  Using elementary
properties of complex numbers and definite integrals for real-valued
functions and the fact/definition that</p>

<div class="myeqn">
\begin{equation}
\Re\left(\int_{a}^{b} w(t) \ud t\right) = \int_{a}^{b} \Re[w(t)] \ud
t,
\label{Re-int}
\end{equation}
</div>

<p>we can write</p>

<div class="myeqn">
\begin{equation}
\begin{aligned}
r_0 &amp;= \Re\left(\int_{a}^{b} e^{-i\theta_0} w(t) \ud t\right) \\
&amp;= \int_{a}^{b} \Re[e^{-i\theta_0} w(t)] \ud t\\
&amp;\le \int_{a}^{b} \abslr{e^{-i\theta_0} w(t)} \ud t.
\end{aligned}
\label{fin}
\end{equation}
</div>

<p>Therefore, \eqref{new_goal2} is satisfied, so as \eqref{lemma}.</p>

<h2 id="an-upper-bound-for-legendre-polynomials">An upper bound for Legendre polynomials</h2>

<p>I have <em>never</em> evaluated</p>

<div class="myeqn">
\begin{equation}
P_n(x) = \frac{1}{\pi} \int_0^\pi (x + i \sqrt{1 - x^2}
\cos{\theta})^n \ud\theta,
\label{pnx}
\end{equation}
</div>

<p>where $-1 \le x \le 1$ and $n = 0,1,2,\dots$</p>

<p>Applying \eqref{lemma}, one gets</p>

<div class="myeqn">
\begin{equation}
\begin{aligned}
P_n(x) &amp;= \frac{1}{\pi} \int_0^\pi (x + i \sqrt{1 - x^2}
\cos{\theta})^n \ud\theta\\
&amp;\le \frac{1}{\pi} \int_0^\pi \ud\theta\\
&amp;= 1
\end{aligned}
\label{crux}
\end{equation}
</div>

<p>because</p>

<div class="myeqn">
\begin{equation}
\begin{aligned}
&amp;\quad\; \abs{x + i \sqrt{1 - x^2} \cos{\theta}}\\
&amp;= \sqrt{x^2 + (1 - x^2) \cos^2{\theta}}\\
&amp;\le \sqrt{x^2 + (1 - x^2)}\\
&amp;= 1.
\end{aligned}
\label{norm-ub}
\end{equation}
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Merge Failed?]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/03/git-merge-failed/"/>
    
    <updated>2015-09-03T14:34:31+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/03/git-merge-failed</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Octopress has recently removed Rubypants, so the automatic smartquotes
<em>aren’t</em> supported any more.  However, after typing <code>git pull
octopress master</code> on the <code>source</code> branch of the local working
directory for this blog, <code>git</code> simply said that it’s “already
up-to-date”.  I compared the stored trees for <code>plugins/</code> by using <code>git
show HEAD:plugins</code> on the <code>source</code> and <code>octopress/master</code> branches.
If the former has the commits of the later, then
<code>plugins/rubypants.rb</code> <em>shouldn’t</em> be found on the former.  I issued
the command <code>git merge octopress/master</code> again, and the version
control system still said that there’s <em>no</em> unmerged commits from the
<code>octopress/master</code> branch.<sup id="fnref:remote"><a href="#fn:remote" class="footnote">1</a></sup></p>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>By using <code>git log --abbrev-commit --pretty=oneline --graph</code> and <code>git
merge-base octopress/master HEAD</code>, I can quickly browse through the
commits.  Finally, I identified the reason for this failed merge: I
reverted the first merge of those two branches three months ago.  I
belive that I can revert this reversion to achieve my desired merge.</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:remote">

      <p>Since Octopress 3 is currently in development, I still use the
original version. <a href="#fnref:remote" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rare Sed Delimiters]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters/"/>
    
    <updated>2015-08-25T10:47:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>One can replace the usual delimiter <code>/</code> in <code>sed</code> with the other ones.
Therefore, the slashes in the <abbr title="Uniform Resource Locator">URL</abbr> inside the search pattern <em>won’t</em>
have to be escaped by backslashes, which makes the whole command ugly.</p>

<h2 id="problem">Problem</h2>

<p>If the search pattern contains multiple characters like <code>;</code>, <code>#</code>, <code>|</code>,
` `, etc, and you’re <em>too lazy</em> to look for
<a href="http://backreference.org/2010/02/20/using-different-delimiters-in-sed/">other choices of delimiters</a>, what can you do?</p>

<!-- more -->

<h2 id="discussion-on-the-custom-delimiter">Discussion on the custom delimiter</h2>

<p>When I read article at the above link, I was stuck at the last part,
which was about using a custom delimiter.  I <em>mistakenly</em> thought that
this was for the search pattern and the replacement.  In fact, reading
<a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">GNU’s manual</a> and trying some commands repeatedly, I realized
that prepending the custom delimiter with a backslash was for
specifying the range of the following expresion.</p>

<p>Therefore, I finally understand what <code>somevar</code> is in
<a href="http://stackoverflow.com/a/20808364">this Stack Overflow question</a>.</p>

<h2 id="solution">Solution</h2>

<h3 id="customizing-the-delimiter-in-a-replacement">Customizing the delimiter in a replacement</h3>

<p>To begin with, I tried the following command.</p>

<pre class="cliUB"><code>$ echo strange | sed s/'[a-e]'/#/g
str#ng#
</code></pre>

<p>After that, I know that surrounding the whole <code>s</code> command <em>isn’t</em> a
must, just the <code>regex</code> and <code>replacement</code> will do.</p>

<p>Then I replaced all <code>/</code> with <code>y</code> in the above command.</p>

<pre class="cliUB"><code>$ echo strange | sed sy'[a-e]'y#yg
str#ng#
</code></pre>

<p>Now, it’s clear that the custom delimiter in the <code>s</code> command <em>doesn’t</em>
need to be escaped.</p>

<h3 id="towards-the-goal">Towards the goal</h3>

<p>The goal in this post is to use bizarre characters as the delimiter in
the <code>s</code> command, and I believe that if you’ve reached here, you’ll
probably understand what <a href="https://stackoverflow.com/a/4844945">this command</a> is doing, provided
that you know the way to
<a href="https://stackoverflow.com/a/10571642">input control characters as arguments in bash commands</a>.</p>

<h2 id="more-examples">More examples</h2>

<p>I’ve just tried to delete a <code>&lt;script&gt;</code> tag in the <code>master</code> branch of a
repository for <a href="https://vincenttam.github.io/SampleWebPage/ex0.html">my sample W3CSS page</a> using the in-place
editing option of <code>sed</code>.  Before making <em>real</em> changes to the file, I
tested my command syntax with the standard output first.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/gh-pages
  remotes/origin/master
[owner@localhost ~/SampleWebPage]$ sed -nr '\#&lt;scr#,#&lt;/scr#p' ex0.html
sed: -e expression #1, char 9: unexpected `,'
</code></pre>

<p>Looking at <a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">the manual</a> <em>again</em>, I thought that <code>\%regex%</code>
represented <em>one</em> address only.  The pattern after the comma was
<em>another</em> address, so I should have used <em>two</em> backslashes in the last
command.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ sed -ir '\#&lt;scr#,\#&lt;/scr#' ex0.html
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Find Files for Vim to Edit in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash/"/>
    
    <updated>2015-08-23T23:48:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Since copying and pasting the output of a command can be a tedious
job.  For example, if you want to create your blog using a framework,
you may first logon to your <a href="https://github.com">GitHub</a> account and create an <em>empty</em>
repository there, then <code>git clone</code> <a href="http://octopress.org">Octopress</a>/<a href="http://jekyllbootstrap.com">Jekyll-Bootstrap</a> from
GitHub, reset the <code>origin</code> <abbr title="Uniform Resource Locator">URL</abbr>, and input the new <abbr title="Uniform Resource Locator">URL</abbr> based on the old
one.</p>

<p>After having created a repository online, you will see the <abbr title="Uniform Resource Locator">URL</abbr> of the
repository using the <abbr title="Secure SHell">SSH</abbr> protocol.  If one <em>doesn’t</em> want to repeat
the start of the <abbr title="Uniform Resource Locator">URL</abbr> <code>git@github.com:</code>, one may use the bash commands
introduced in <a href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/">the previous post</a> to extract its useful parts for
the <code>sed</code> substitution.</p>

<pre class="cliUB"><code>$ git remote -v
octopress	git@github.com:imathis/octopress.git (fetch)
octopress	git@github.com:imathis/octopress.git (push)
origin	git@github.com:VincentTam/vincenttam.github.io.git (fetch)
origin	git@github.com:VincentTam/vincenttam.github.io.git (push)
$ name=userName; repo=repoName
$ git remote -v | sed -n '3{p;q}' | awk '{print $2}' | sed -r \
"s;(\w*)/(.*).git;$name/$repo.git;"
$ unset name repo
</code></pre>

<h2 id="problem">Problem</h2>

<p>I tried extracting a list of Markdown files containing a particular
word and passing them to <a href="http://www.vim.org">Vim</a> as arguments using <code>find</code>, <code>grep</code> and
<code>xargs</code>.  Unluckily, I got an error.</p>

<pre class="cliUB"><code>$ find source/_posts/ -name "*.markdown" -exec grep -q ^tag {} \; \
&gt; -print | xargs vi
Vim: Warning: Input is not from a terminal
3 files to edit
$ 
</code></pre>

<p>Note: <em>Without</em> the <code>-print</code> flag, the above command <em>won’t</em> work.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>As a result, I searched “vim warning input is not from a terminal
xargs” on Google, and found <a href="http://superuser.com/q/336016">this question</a> very useful.  I
should have wrapped the <code>find</code> command like <code>$(find ...)</code>.</p>

<pre class="cliUB"><code>$ vi $(find source/_posts/ -name "*.markdown" -exec \
&gt; grep -q ^tag {} \; -print | xargs)
3 files to edit
</code></pre>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="sed">sed</h3>
<ul>
  <li><code>3{p;q}</code>: quit after printing the third line for the sake of
  efficiency</li>
  <li><code>-r</code>: use extended regular expression to save the trouble of
  escaping <code>()</code> for submatches.</li>
  <li><code>-n</code>: suppress standard output.</li>
  <li>Enclose the expression
    <ul>
      <li>with <em>single</em> quotes to <em>disable</em> interpretation of bash
  variables</li>
      <li>with <em>double</em> quotes to <em>enable</em> interpretation of bash
  variables.</li>
    </ul>
  </li>
  <li>One can replace the delimiter <code>/</code> in the expression
  <code>s/{pat}/{repl}/</code> by any one character from <code>_;#| </code>.</li>
  <li>Specify a custom delimiter like <code>\%.%s%foo%bar%</code>.  (The
  variable/range <code>.</code> is <em>needed</em>.)</li>
</ul>

<h3 id="bash">bash</h3>

<ul>
  <li>Set variables using <code>var1=value1;var2=value2;...</code></li>
  <li>Unset variable usign <code>unset var1 var2 ...</code></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Used More Bash Utilities]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/"/>
    
    <updated>2015-08-22T11:59:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Same as what has been written in my older post
<a href="https://vincenttam.github.io/blog/2014/12/12/using-xclip/"><em>Using Xclip</em></a>.</p>

<h2 id="drawback">Drawback</h2>

<p>Inputing the keyboard command for the paste action is, in my opinion,
<em>laborious</em>.</p>

<h2 id="tools-used">Tools used</h2>

<ol>
  <li><code>find</code></li>
  <li><code>grep</code></li>
  <li><code>sed</code></li>
  <li><code>awk</code></li>
  <li><code>xargs</code></li>
</ol>

<!-- more -->

<h3 id="the-find-command">The find command</h3>

<pre class="cliUB"><code>find . -path ./dir -prune -o -name '*.txt' -type f -print
find ./foo -exec wc {} \;
</code></pre>

<ul>
  <li><code>-path ./dir -prune -o</code>: exclude the directory <code>./dir</code></li>
  <li><code>-name '*.txt'</code>: match the name of the file</li>
  <li><code>-type f</code>: match files only, not directories</li>
  <li><code>-print</code>: print all matched paths</li>
  <li><code>-exec {cmd} {} \;</code>
    <ul>
      <li>execute <em>one single</em> command <code>{cmd}</code>, no pipes are allowed</li>
      <li><code>{}</code>: an instance of matched path</li>
      <li><code>\;</code>: terminator</li>
    </ul>
  </li>
</ul>

<p>I’ve found that if <code>-type f</code> goes <em>before</em> <code>-path ./dir -prune -o</code>,
the path <code>./dir</code> <em>won’t</em> be excluded.  <strong>Don’t use <code>./</code>, use <code>.</code>!</strong> on
Mac.</p>

<p>Using <code>-not -path ./dir</code> option <em>doesn’t</em> work.</p>

<h3 id="the-grep-command">The grep command</h3>

<ul>
  <li><code>-I</code>: ignore binary files</li>
  <li><code>-q . {}</code>: match any characters and suppress output for faster
  execution</li>
</ul>

<h3 id="the-sed-command">The sed command</h3>

<ul>
  <li><code>-i .bak</code>: edit file with backup extension <code>.bak</code> (Mac only, not in
  *nix)</li>
  <li><code>-i ''</code>: no backup (Also Mac only)</li>
  <li><code>sed 'p;s/foo/bar/'</code>: print original and replaced strings, separated
by whitespace.</li>
</ul>

<h3 id="the-awk-command">The awk command</h3>

<p>The command <code>awk '{ print $2 }'</code> extracts the second column.  For more
examples, see <a href="http://www.hcs.harvard.edu/~dholland/computers/awk.html">the simple awk tutorial</a>.</p>

<h3 id="the-xargs-command">The xargs command</h3>

<p>This is a very powerful command when combined with <code>find</code>.  This
utility reads from <code>stdin</code> and echos it.</p>

<ul>
  <li>no flags: all output joined into a single line</li>
  <li><code>-n3</code>: 3 space-delimited stdin in each line</li>
  <li><code>xargs -n2 {cmd}</code>: execute <code>{cmd} {arg1} {arg2}</code>, …, <code>{cmd}
  {arg2n-1} {arg2n}</code>.</li>
</ul>

<h3 id="putting-things-together">Putting things together</h3>

<p>Here’s some sample commands.</p>

<h4 id="find-and-replace-for-all-text-files-under-a-path">Find and replace for all text files under a path</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -type f -exec grep -Iq . {} \; -and \
-exec sed -i 's/foo/bar/g' {} \;
</code></pre>

<p>Ignore the <code>.git</code> folder, which is the Git repository, to avoid
damaging it.</p>

<h4 id="find-and-replace-substrings-in-path-names">Find and replace substrings in path names</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -name "*foo*" -print | sed \
'p;s/foo/bar/g' | xargs -n2 mv
</code></pre>

<p>All instances of <code>foo</code> in path names are replaced with <code>bar</code>.  Note
that that <code>-print</code> option <em>should be included</em>.  Otherwise, the path
<code>./.git</code> which is intended to be omitted will appear in the piped
output and processed by <code>sed</code>, and then the terminal will throw the
follow error message.</p>

<pre class="cliUB"><code>fatal: can not move directory into itself, source=.git, destination=.git/.git
</code></pre>

<h4 id="find-and-replace-git-remote-paths">Find and replace Git remote paths</h4>

<pre class="cliUB"><code>$ git remote -v | awk '{ print $2 }' | head -1 | \
xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList1.git (fetch)
origin	https://github.com/VincentTam/StudentList1.git (push)
$ git remote -v | awk '{ print $2 }' | head -1 | sed \
's/StudentList1/StudentList4/' | xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList4.git (fetch)
origin	https://github.com/VincentTam/StudentList4.git (push)
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Upgrade to Java 8 on Ubuntu 14.04]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/13/upgrade-to-java-8-on-ubuntu-14-dot-04/"/>
    
    <updated>2015-08-13T00:14:01+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/13/upgrade-to-java-8-on-ubuntu-14-dot-04</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Before writing <a href="https://vincenttam.github.io/blog/2015/08/12/debug-apps-on-real-devices-in-android-studio/">the previous post</a>, I had noticed that the version
number of the current stable release of Java is 1.8 update 51.</p>

<h2 id="method">Method</h2>

<ol>
  <li>Google “ubuntu 14.04 java 8”.</li>
  <li>Click on <a href="http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/">the first search result</a>.</li>
  <li>
    <p>Follow the instructions there.</p>

    <p>Note that the command in the section “Configuring Java
 Environment” should be run <em>before</em> the one in “Verify Installed
 Java Version”.<sup id="fnref:result"><a href="#fn:result" class="footnote">1</a></sup></p>
  </li>
</ol>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p><a href="https://www.linuxquestions.org/questions/programming-9/convert-file-from-utf8-to-ascii-encoding-458839/">The encoding of files can be converted</a> using <code>iconv</code>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:result">
      <p>You may see <a href="https://vincenttam.github.io/downloads/code/term.html">the results from the terminal</a>. <a href="#fnref:result" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Debug Apps on Real Devices in Android Studio]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/12/debug-apps-on-real-devices-in-android-studio/"/>
    
    <updated>2015-08-12T10:46:44+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/12/debug-apps-on-real-devices-in-android-studio</id>
    
      <content type="html"><![CDATA[<p>After spending hours to find out that I need to tap on “Settings” →
“About” → … → “Build number” for enabling USB debugging in the
“Developers options” on an Android phone, I plugged the phone into a
Mac desktop, but it <em>didn’t</em> show up in the “Devices” in Finder.  I
thought that Mac <em>couldn’t</em> detect the phone, and I searched Google
for a long time.  After having seen the name of an application for
synchronising data between and phone and the computer for a few times,
I finally decided to download it since I <em>didn’t</em> know what else to
do.  Luckily, my app could be run on the phone with the help of
Android Studio installed on the Mac desktop.</p>

<p><span class="tex2jax_ignore">
An hour later, I tried to setup the development environment on an M$
Win* computer.  Its installed size is over 20GB!  After hours of
installation work, I was <em>stuck</em> again on M$ Win*:  unlike the Mac
computer, that M$ Win* machine could detect the Android mobile
device and show it in “Computer” within a minute.  I added the
following lines into <code>/{AppName}/app/build.gradle</code> according to
<a href="https://developer.android.com/tools/device.html#setting-up">a page of the official website</a>.
</span></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>To enable debugging on a real Android device </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">debug</span> <span class="o">{</span>
</span><span class="line">            <span class="n">debuggable</span> <span class="kc">true</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, the IDE said that <em>no debuggable device</em> could be found.  I
guessed that the synchronising application made by the manufacturer of
the phone was the cause of that undesirable result.  After fetching
the application from the website of the phone manufacturer and
restarting Android Studio, I could finally run the same application on
a real Android device by clicking the little triangle on the top.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h3>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (4): General Trees]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/"/>
    
    <updated>2015-08-07T23:41:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>After I’ve written <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the third post</a> in this series, I believed
that I could generate the SHA-1 hash of <em>all</em> Git objects.</p>

<h2 id="problem">Problem</h2>

<p>In order to understand the object ID of an arbitrary tree object, it
is necessary that I create a file in a sub-folder.  Suppose that I
copied the file <code>hello.txt</code> to the sub-directory <code>subdir</code> in the
directory <code>hello</code> in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>  In short, I just
followed the steps in Chapter 4 of <em>Version Control with Git</em>.  I
include the setup here for convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ mkdir subdir
$ cp hello.txt subdir
$ git add subdir/hello.txt
$ git write-tree
492413269336d21fac079d4a4672e55d5d2147ac
$ git cat-file -p 492413269336d21fac079d4a4672e55d5d2147ac
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt
040000 tree 68aba62e560c0ebc3396e8ae9335232cd93a3f60	subdir
</code></pre>

<p>After having successfully generated the SHA-1 hash for the tree object
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>
in this series, I tried the same task for another tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.  Using the <em>same</em>
technique describe in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the previous post</a>, I got another
<em>wrong</em> SHA-1 hash <code>06eb95bda67a8f86e65bb1590744f10a61eeccef</code>.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 71\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad040000 subdir\x00\x68\xab\xa6\x2e\x56\x
0c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60"
06eb95bda67a8f86e65bb1590744f10a61eeccef  -
</code></pre>

<p><em>How to get the <strong>right object ID</strong></em>?</p>

<!-- more -->

<h2 id="cause-of-error">Cause of error</h2>

<p>I realised that I had misunderstood the structure of a tree object
again after reading the first Google search result of “git tree object
format”.  It’s a Stack Overflow question on the “format of Git tree
object”.  I read the largest code block of
<a href="http://stackoverflow.com/a/21599232">the first answer</a>, and find out that <em>the leftmost zero
digit in</em> <code>040000</code> <em>should be taken away</em>.</p>

<h2 id="a-primitive-method">A primitive method</h2>

<h3 id="get-the-object-size-with-the-wc-command">Get the object size with the wc command</h3>

<pre class="cliUB"><code>$ printf "100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x00\xdd\x08\x
ae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0c\x0e\xbc\x
33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | wc -c
70
</code></pre>

<h3 id="sha-1-hash">SHA-1 hash</h3>

<pre class="cliUB"><code>$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0
c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<h2 id="a-more-time-saving-method">A more time-saving method</h2>

<p>The above <code>printf</code> command is error-prone.  Here’re some less
laborious commands.</p>

<h3 id="understand-the-tree-object">Understand the tree object</h3>

<p>While searching for the cause of error, I jumped through many web
pages, and I went back to
<a href="http://stackoverflow.com/a/13977017">the Stack Overflow question stated in the second post</a>
in this series.</p>

<pre class="cliUB"><code>$ git cat-file tree 492413269336d21fac079d4a4672e55d5d2147ac | od -c
0000000   1   0   0   6   4   4       h   e   l   l   o   .   t   x   t
0000020  \0   ; 030 345 022 333 247 236   L 203  \0 335  \b 256 263 177
0000040 216   r 213 215 255   4   0   0   0   0       s   u   b   d   i
0000060   r  \0   h 253 246   .   V  \f 016 274   3 226 350 256 223   5
0000100   #   , 331   :   ?   `
0000106
</code></pre>

<ul>
  <li>The <code>c</code> flag: show the input as characters if possible, otherwise as
  octal 1-byte units.</li>
  <li>The <code>b</code> flag: show the input as octal 1-byte units.</li>
</ul>

<p>Note that the number of bytes can be found at the bottom left hand
corner.  This is actually the object size of the tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.</p>

<p>One can capture the binary output and dump it to <code>od</code> with one
command.</p>

<pre class="cliUB"><code>$ git cat-file tree 4924132 | tee test.txt | od -c
</code></pre>

<h3 id="an-improved-printf-command">An improved printf command</h3>

<pre class="cliUB"><code>$ printf "tree 70\0" &gt; len.txt
$ cat len.txt test.txt | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<p>We finally get the target object ID in three steps.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="another-use-of-git-cat-file">Another use of git cat-file</h3>

<pre class="cliUB"><code>$ git cat-file -s 492413269336d21fac079d4a4672e55d5d2147ac
70
</code></pre>

<ul>
  <li>The <code>-s</code> flag: size</li>
  <li>The <code>-p</code> flag: pretty-print</li>
</ul>

<p>From the word “pretty” in the man page for <code>git-cat-file</code>, I
understand why I had misunderstood the structure of Git tree objects.</p>

<h3 id="use-od-like-hd">Use od like hd</h3>

<p>From a comment to the second answer to
<a href="http://stackoverflow.com/a/21599232">the Stack Overflow question</a> about the “format of git
tree object”, I saw the word <code>hexdump</code>, and I viewed its man page.  At
first, I <em>didn’t</em> know their difference, so I googled “od vs hexdump”,
and then I saw the abbreviation <code>hd</code> for <code>hexdump</code>, so I changed the
search query string to “hd vs od”, but found out that their functions
are basically the <em>same</em>, but their display is <em>different</em> by default.
I like the default display of <code>hd</code>.  To use <code>od</code> like <code>hd</code>, one only
needs to copy the command from the man page of <code>od</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (3): Trees With Multiple Blobs]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/"/>
    
    <updated>2015-08-07T22:30:55+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Having written <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series, I thought that
I understood how to compute the SHA-1 hash of Git tree objects.</p>

<h2 id="problem">Problem</h2>

<p>Suppose that I add a file named <code>rose</code> which consisted merely of the
word <code>sweet</code> and a line terminator to the folder <code>hello</code> in
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series.  I include the setup here for
convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ echo "sweet" &gt; rose
$ git add rose
$ git write-tree
b12767ff2f8a8160bca15abfb775bca5ba31ccf1
$ git cat-file -p b12767ff2f8a8160bca15abfb775bca5ba31ccf1 | tee test.txt
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    hello.txt
100644 blob aa823728ea7d592acc69b36875a482cdf3fd5c8d    rose
</code></pre>

<p>Therefore, our target hash is
<code>b12767ff2f8a8160bca15abfb775bca5ba31ccf1</code>.</p>

<p>Just like what I’d done in the previous post, I manually changed the
hashes into a <code>printf</code> command that writes out the binary value of the
hashes.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad\n100644 rose\x00\xaa\x82\x37\x28\xea\x
7d\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
a4b430f9da3e22c0854fb26c97da77db271e5acf  -
</code></pre>

<p>What I got is <code>a4b430f9da3e22c0854fb26c97da77db271e5acf</code>, which is
<em>different</em> from the target.  <em>How can I get back <strong>the right SHA-1
hash</strong>?</em></p>

<!-- more -->

<h2 id="method">Method</h2>

<p>I read domegetter’s comment on <a href="https://gist.github.com/masak/2415865">this Gist</a>, and removed the
newline character <code>\n</code> in the middle of the quoted string in the above
<code>printf</code> command.  Then I decreased the object size by one since a
character had been taken out.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 69\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad100644 rose\x00\xaa\x82\x37\x28\xea\x7d
\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
b12767ff2f8a8160bca15abfb775bca5ba31ccf1  -
</code></pre>

<p>We’re done!</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (2): Trees With One Single Blob]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/"/>
    
    <updated>2015-08-07T19:36:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/">the first post</a> in this series, I’ve claimed that the
generation of object IDs in Git is the SHA-1 hash of the string</p>

<pre><code>&lt;object type name&gt; SP &lt;len&gt; NUL &lt;data&gt;
</code></pre>

<p>,where</p>

<ul>
  <li><code>&lt;data&gt;</code> stands for the output of <code>git cat-file -p {hash}</code></li>
  <li><code>&lt;len&gt;</code> means the length of <code>&lt;data&gt;</code>.  It can be measured with the
  command <code>wc -c</code>.</li>
</ul>

<h2 id="problem">Problem</h2>

<p>To verify my claim, I followed the steps in Chapter 4 of <em>Version
Control with Git</em>.</p>

<ol>
  <li>Create a folder named <code>hello</code> and go to that directory.</li>
  <li>Initialise an empty Git repository.</li>
  <li>Create the file <code>hello.txt</code> with one single line “hello world”.</li>
  <li>Add the file to Git’s object storage.</li>
  <li>Get a tree object from the index.</li>
  <li>Capture the contents of the tree object in <code>test.txt</code>.</li>
  <li>Count the number of bytes in <code>test.txt</code>.</li>
  <li>
    <p>Create the file <code>len.txt</code> consisting of</p>

    <pre class="cliUB"><code> "tree" SP &lt;result in item 6&gt; NUL
</code></pre>

    <p><em>without</em> the line terminator.</p>
  </li>
  <li>Concatenate the contents of the files <code>len.txt</code> and <code>test.txt</code> and
compute its SHA-1 hash.</li>
</ol>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
<span class="UBHLCode">68aba62e560c0ebc3396e8ae9335232cd93a3f60</span>
$ git cat-file -p 68aba62e560c0ebc3396e8ae9335232cd93a3f60 | tee test.txt
<span class="UBHLCode">100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt</span>
$ wc -c test.txt
63 test.txt
$ printf "tree 63\0" &gt; len.txt
$ cat len.txt test.txt | shasum
<span class="err">10bd0f0350027c25edc4ce72aba60e641f55596d  -</span>
</code></pre>

<p>As can be seen above, I’ve <span class="err">a wrong SHA-1
hash</span>.  <em>How can I get back <strong>the right SHA-1 hash</strong>?</em></p>

<!-- more -->

<h2 id="method">Method</h2>

<p>I googled “git tree hash id”, and I found the chosen answer of
<a href="http://stackoverflow.com/a/13977017">this Stack Overflow question</a> very explanative.  One may
shorten the included command by replacing <code>echo -en</code> with <code>printf</code>.</p>

<h3 id="get-the-object-size-right">Get the object size right</h3>

<p>In this case, the object size of the tree
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> containg the blob
<code>3b18e512dba79e4c8300dd08aeb37f8e728b8dad</code> which corresponds to the
file <code>hello.txt</code> should be 37 (= 6 + 1 + 9 + 1 + 20).</p>

<h3 id="get-the-object-content-right">Get the object content right</h3>

<p>As the blob ID is stored as binary value, I copied it and pasted it
Vim so that I could easily insert <code>\x</code> in front of a pair of hex
digits in the blob ID.  I then put the things together in a command.</p>

<pre class="cliUB"><code># Contents of `testing.sh' as seen inside Vim
# Note that there's NO newline character in the following command
printf "tree 37\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4
c\x83\x00\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad" | shasum
</code></pre>

<h3 id="result">Result</h3>

<p>By executing the above command, I got <strong>the right SHA-1 hash</strong>:
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code>.</p>

<h2 id="fact-learnt-formatting-printfs-output">Fact learnt: formatting printf’s output</h2>

<p>In the Stack Overflow question, there’s a command</p>

<pre><code>find .git/objects/ -type f -printf "%h%f %s\n" {.cliUB}
</code></pre>

<ul>
  <li>The flag <code>-type f</code> stands for files.  <em>Without</em> this flag,
  directories like <code>.git/objects</code> will be displayed.</li>
  <li>The flag <code>-printf</code> formats the output.
    <ul>
      <li><code>%h</code> means the head of the file name <em>without</em> the last
  component of the file name.  Thus, it expands to a the path of
  a directory <em>without</em> the trailing <code>/</code>.</li>
      <li><code>%f</code> means the last component of the file name.  As a result,
  the <code>/</code> inside the displayed SHA-1 hashes are taken away.</li>
      <li><code>%s</code> means the file size</li>
    </ul>
  </li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[How Does Git Commit Amend Work?]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work/"/>
    
    <updated>2015-08-07T17:15:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work</id>
    
      <content type="html"><![CDATA[<h2 id="situation">Situation</h2>

<p>I’ve written and commited the post <a href="https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3/"><em>My Git Command List (3)</em></a>,
but after a while, I changed that post.  In order not to complexify
my Git commit history, I used <code>git commit --amend -a</code>.  That’s quite
simple and convenient.  I observed that the displayed time in the
amended commit was the <em>same</em> as the original one, whereas the SHA-1
hash was <em>changed</em> so that Git knows that they’re <em>different</em>.
However, from
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/"><em>Git Object ID Generation (1): Blobs and Commits</em></a>, I’ve learnt
that the ID of Git commit objects is totally determined by</p>

<ol>
  <li>the content of the commit message</li>
  <li>the commit time</li>
  <li>the author</li>
</ol>

<p>In this case, no difference of the above factors between the original
commit and the amended commit can be observed with <code>git show</code>.</p>

<h2 id="problem">Problem</h2>

<p><strong>In what way do the original commit and the amended commit differ?</strong></p>

<!-- more -->

<h2 id="difference">Difference</h2>

<p>To solve this problem, I scrolled up the screen and captured the SHA-1
hashes fo the two commits.</p>

<ul>
  <li>the original commit’s hash: <code>9de8974b93a2e4032b608c0de17ea5ed0c55524b</code></li>
  <li>the amended commit’s hash: <code>5b7b566b8a07d4813ba9f08a326e169cf38ca20f</code></li>
</ul>

<p>Note: I just <em>make up</em> the email address <code>demo@example.com</code> to replace
my real email address to <a href="http://www.problogger.net/archives/2008/12/06/10-reasons-to-avoid-mailto-links/">avoid email spams</a>.  Therefore,
<strong>the above commit hashes don’t correspond to the content displayed
below</strong>.  In fact, they correspond to the commits in the Git
repository for this blog.</p>

<pre class="cliUB"><code>$ git cat-file -p 9de8974b93a2e4032b608c0de17ea5ed0c55524b
tree b9f4fb708327e25c8b1b822711ec7dda9c5b2198
parent <a href="https://github.com/VincentTam/vincenttam.github.io/commit/afcb4d97cb447112bd2e930159966d92b8e4754a">afcb4d97cb447112bd2e930159966d92b8e4754a</a>
author Vincent Tam &lt;demo@example.com&gt; 1438859683 +0800
committer Vincent Tam &lt;demo@example.com&gt; <span class="UBHLCode">1438859683</span> +0800

A new post on some Git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.
$ git cat-file -p 5b7b566b8a07d4813ba9f08a326e169cf38ca20f
tree 2d864bcb7e4944e9d98b663649c79084692873c1
parent <a href="https://github.com/VincentTam/vincenttam.github.io/commit/afcb4d97cb447112bd2e930159966d92b8e4754a">afcb4d97cb447112bd2e930159966d92b8e4754a</a>
author Vincent Tam &lt;demo@example.com&gt; 1438859683 +0800
committer Vincent Tam &lt;demo@example.com&gt; 1438864942 +0800

A new post on some Git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.</code>
</pre>

<p>Hence, the difference of the timestamp of the <code>committer</code> causes the
difference in the hashes, whereas the timestamp of the <code>author</code> is
converted to a human readable date for display.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="unix-timestamp">Unix timestamp</h3>

<p>A Unix timestamp is the number of seconds elasped since the start of
the year 1970 in <abbr title="Global Mean Time">GMT</abbr>.</p>

<h3 id="a-little-bit-kramdown-syntax-eob-marker">A little bit kramdown syntax: <abbr title="End-Of-Block">EOB</abbr> marker</h3>

<p>According to kramdown’s syntax guide,
<a href="http://kramdown.gettalong.org/syntax.html#eob-marker">the <abbr title="End-Of-Block">EOB</abbr> marker <em>won’t</em> be found in most Markdown documents</a>.  In
order to include a list followed by a code block that <em>isn’t</em>
contained inside the list, the boundary of the list has to be
specified by a line consisting of a leading ‘^’ character.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (1): Blobs and Commits]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/"/>
    
    <updated>2015-08-07T13:52:47+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits</id>
    
      <content type="html"><![CDATA[<p>The SHA-1 hash for blobs <em>isn’t</em> so hard to generate, and the process
is now well-known.  I <em>don’t</em> repeat it here.  The one for commits can
be similarly generated.</p>

<!-- more -->

<p>For example, <code>5b7b566b8a07d4813ba9f08a326e169cf38ca20f</code> is a hash of
the repository of this blog.</p>

<p>Remark: The email shown below is <em>fake</em>, so the SHA-1 hash of <code>HEAD</code>
<em>isn’t</em> real.  For the reason of displaying that email, you may refer
to <a href="https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work/">the remark in <em>Git Object Id Generation (4): General Trees</em></a>.</p>

<pre class="cliUB"><code>$ git rev-parse head
5b7b566b8a07d4813ba9f08a326e169cf38ca20f
$ git cat-file -p 5b7b566b8a07d4813ba9f08a326e169cf38ca20f | tee test.txt
tree 2d864bcb7e4944e9d98b663649c79084692873c1
parent afcb4d97cb447112bd2e930159966d92b8e4754a
author vincent tam &lt;demo@example.com&gt; 1438859683 +0800
committer vincent tam &lt;demo@example.com&gt; 1438864942 +0800

a new post on some git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.
$ wc -c test.txt
379 test.txt
$ printf "commit 379\0" &gt; len.txt
$ cat len.txt test.txt | shasum
5b7b566b8a07d4813ba9f08a326e169cf38ca20f  -
</code></pre>

<p>We get the <em>same</em> SHA-1 hash.  Therefore, the ID for Git commit
objects is just the SHA-1 hash of the contents of the Git commits with
the string <code>commit {len}\0</code> inserted at the beginning, where <code>{len}</code>
stands for the number of bytes of the Git commit object (which is
stored in <code>test.txt</code> in the above situation).</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="the-printf-command">The printf command</h3>

<p>The commands <code>printf "\0"</code> and <code>printf "\000"</code> <em>doesn’t</em> differ.
Therefore, if a digit zero follows the null character, one may
indicate the null character using hex digits: <code>printf "\x000"</code>.
<code>printf</code> will interpret <code>\x00</code> as a null character and the trailing
digit <code>0</code> <em>won’t</em> be mixed up with the characters on its left.</p>

<h3 id="the-wc-command">The wc command</h3>

<p>Apart from counting words, the <code>wc</code> command provide various flags
which return the number of lines, characters, etc.  In the past, I
knew three flags only: <code>-l</code>, <code>-w</code>, and <code>-c</code>.  I thought that they told
<code>wc</code> to count the number of <strong>l</strong>ines, <strong>w</strong>ords and <strong>c</strong>haracters
respectively.  After running the <code>wc</code> command on strings that include
accents (e.g. “café”, “resumé”, etc), I realised that I misunderstood
the function of the <code>-c</code> flag, which actually counts the number of
<em>bytes</em> of the input.  To count the number of characters, use the <code>-m</code>
flag instead.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[My Git Command List (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3/"/>
    
    <updated>2015-08-06T17:39:08+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3</id>
    
      <content type="html"><![CDATA[<h2 id="overview">Overview</h2>

<p>Unlike the Git commands found on the previous posts in this series, in
this article, I’ll focus on <em>low-level</em> Git commands.</p>

<h2 id="raison-dtre">Raison d’être</h2>

<p>Usually, one <em>won’t</em> use low-level Git commands in a Git repository,
but I included them here because these commands help one understand
the <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">Git object model</a>.</p>

<h2 id="the-list">The list</h2>

<pre><code>$ find .git/objects       # Return all files/folders under `.git/objects'
$ git cat-file -p {hash}  # Print the content to which {hash} corresponds
$ git hash-object {file}  # Return the hash of {file}
$ git hash-object --stdin # Return the hash of the standard input
$ git write-tree          # Return the hash of the tree of tracked contents
$ git ls-files -s         # List all tracked files and their hash
$ git ls-tree {hash}      # List the contents of a tree
$ git rev-parse {hash}    # Return the full SHA-1 of {hash}
$ git rev-parse HEAD      # Return the full SHA-1 of HEAD
$ git diff                # Show the difference between the working directory and the index
$ git diff --cached       # Show the difference between HEAD and the index
$ git diff HEAD           # Show the difference between HEAD and the working directory
{:.cliUB}
</code></pre>

<p>It <em>isn’t</em> necessary to supply the full SHA-1 hash for
<code>{hash}</code>—several hex digits at the beginning will be enough.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<ol>
  <li>An SHA-1 hash has 160 bits.  Since 1 byte is equal 8 bit, it has 20
bytes.  When it’s displayed, it has 40 hex-digits.</li>
  <li><em>The blob for a file is independent of the file name</em>, which was
actually stored in a tree object.  For example, the object ID of a
file which contains only a single line “hello world” is
<code>3b18e512dba79e4c8300dd08aeb37f8e728b8dad</code>, so if the file is stored
inside the <code>.git</code> directory as a blob, the blob will be named as
<code>.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad</code>.</li>
  <li>If a sub-directory is created in the <code>dir</code> directory, then a <code>tree</code>
entry will be created in the tree object corresponding to
<code>dir</code>.<sup id="fnref:tree_obj"><a href="#fn:tree_obj" class="footnote">1</a></sup></li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:tree_obj">

      <p>See the code blocks and the picture in “<a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#Tree-Objects">Tree Objects</a>”
in Section 10.2 “Git Objects” of <em>Pro Git</em> a concrete example of a
<code>tree</code> entry inside a tree object. <a href="#fnref:tree_obj" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-05T00:18:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="https://vincenttam.github.io/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="https://vincenttam.github.io/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to work on
math.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Put this at the bottom </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">getScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">success</span><span class="p">){</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">script</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">script</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">url</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">head</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="nx">done</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class="line">    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">done</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;loaded&#39;</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;complete&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">done</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class="line">      <span class="nx">success</span><span class="p">();</span>
</span><span class="line">      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="nx">head</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">getScript</span><span class="p">(</span><span class="s2">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?&quot;</span> <span class="o">+</span>
</span><span class="line">    <span class="s2">&quot;config=TeX-AMS-MML_HTMLorMML&quot;</span> <span class="o">+</span>
</span><span class="line">    <span class="s2">&quot;,https://vincenttam.github.io/javascripts/MathJaxLocal.js&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="kd">function</span><span class="p">(){});</span>
</span><span class="line">
</span><span class="line"><span class="p">})();</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<hr />
<p>(Added on SEP 3RD, 2015)</p>

<p>Now I realised that kramdown will leave the trailing two backslashes
at each line inside <code>&lt;div&gt;</code> tags in Markdown source files <em>untouched</em>.</p>

<hr />

<p>In <a href="https://vincenttam.github.io/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="https://vincenttam.github.io/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="https://vincenttam.github.io/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Some Thoughts on a Real-Valued Function]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function/"/>
    
    <updated>2015-08-04T22:28:52+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Spending so much time to work out <a href="https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support/">the locale support for dates</a>
and <a href="https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages/">valid HTML code</a> in my <a href="https://vincenttam.github.io/blog2">second blog</a> which was
powered by Jekyll-Bootstrap, I <em>couldn’t</em> recall this fact.</p>

<p>Suppose that $\mathcal{D}$ is a subset of $\R^2$ that contains an
$\varepsilon$-neighbourhood of a point <span class="myeqn">$(x_0,y_0)$</span>.  If</p>

<ol>
  <li>$f: \mathcal{D} \to \R$ is has first-order partial derivatives in
the $\varepsilon$-neighbourhood of <span class="myeqn">$(x_0,y_0)$</span>.</li>
  <li>The first-order partial derivatives of $f$ are continuous at <span class="myeqn">$(x_0,y_0)$</span>.</li>
</ol>

<p>Then we can write</p>

<div class="myeqn">
\begin{equation}
  \Delta f = \frac{\partial f}{\partial x} (x_0,y_0) \Delta x +
  \frac{\partial f}{\partial y} (x_0,y_0) \Delta y + \varepsilon_1
  \Delta x + \varepsilon_2 \Delta y,
  \label{fact}
\end{equation}
</div>

<p>where <span class="myeqn">$\Delta f := f(x_0+\Delta
x,y_0+\Delta y)-f(x_0,y_0), \varepsilon_1$ and $\varepsilon_2 \to
0$</span> as $\Delta x$ and $\Delta y \to 0$.</p>

<!-- more -->

<h2 id="the-first-order-approximation-for-a-differentiable-function">The First-Order Approximation For a Differentiable Function</h2>

<p>At first, I thought that equation \eqref{fact} followed from formula
\eqref{thm}.</p>

<div class="myeqn">
\begin{equation}
  \lim_{\vect{h} \to \zeros}
  \frac{f(\vect{x}+\vect{h})-[f(\vect{x})+\langle\nabla
  f(\vect{x}),\vect{h}\rangle]}{\norm{\vect{h}}} = 0
  \label{thm}
\end{equation}
</div>

<p>I forgot that this statement assumed the continuous differentiability
on <em>an open set</em>.  However, we only know that the first-order partial
derivatives are continuous <em>at one point</em> <span class="myeqn">$(x_0,y_0)$</span>.</p>

<h2 id="solve-an-easier-problem-first">Solve an easier problem first</h2>

<p>This question should be much easier and much more intuitive if the
domain of the function $f$ in \eqref{fact} is one-dimensional.  Then,
by drawing a curve and sketching its tangent line at a point, one can
intuitively realise that the geometric meaning of $\varepsilon$.</p>

<p>In fact, one <em>constructs</em></p>

<div class="myeqn">
\begin{equation}
  \varepsilon (\Delta x) :=
    \begin{cases}
      \frac{\Delta f}{\Delta x}-f'(x_0) &amp;\text{if }\Delta x \ne 0,\\
      0 &amp;\text{if } \Delta x = 0,
    \end{cases}
  \label{def1}
\end{equation}
</div>

<p>where <span class="myeqn">$\Delta f := f(x_0+\Delta
x)-f(x_0)$</span> in this section since $f$ is now one-dimensional.</p>

<p>Then one can make use of the differentiability of $f$ at $(x_0)$ to
say that $\varepsilon \to 0$ as $\Delta x \to 0$.</p>

<p>To get the one-dimensional version of \eqref{fact}, we get rid of the
denominator by multiplying both sides by $\Delta x$ in the case of
$\Delta x \ne 0$.</p>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    \varepsilon \Delta x &amp;= \Delta f - f' (x_0) \Delta x\\
    \Delta f &amp;= f' (x_0) \Delta x + \varepsilon \Delta x
  \end{aligned}
  \label{mult1}
\end{equation}
</div>

<p>Observe that equality \eqref{mult1} also holds when $\Delta x = 0$.</p>

<h2 id="back-to-the-problem">Back to the problem</h2>

<h3 id="make-use-of-the-previous-section">Make use of the previous section</h3>

<p>From \eqref{def1}, we observe that $\varepsilon$ is defined as
the difference between a difference quotient between two points
<span class="myeqn">$x_0$</span> and <span class="myeqn">$x_0+\Delta x$</span> and the derivative <span class="myeqn">$f'(x_0)$</span>.  We can define <span class="myeqn">$\varepsilon_1$</span> and <span class="myeqn">$\varepsilon_2$</span> in a similar way.</p>

<div class="myeqn">
\begin{align}
  &amp;\begin{split}
    &amp; \varepsilon_1(\Delta x,\Delta y) :=\\
    &amp;\begin{cases}
      \frac{f(x_0+\Delta x,y_0)-f(x_0,y_0)}{\Delta x}-\frac{\partial
      f}{\partial x}(x_0,y_0) &amp;{\small \text{if } \Delta x \ne 0},\\
      0 &amp;\text{if } \Delta x = 0,
    \end{cases}
  \end{split}
  \label{def2a}\\

  &amp;\begin{split}
    &amp; \varepsilon_2(\Delta x,\Delta y) :=\\
    &amp;\begin{cases}
      \frac{f(x_0+\Delta x,y_0+\Delta y) - f(x_0+\Delta x,y_0)}{\Delta
      y} - \frac{\partial f}{\partial y}(x_0+\Delta x,y_0) &amp;\text{if }
      \Delta y \ne 0,\\
      0 &amp;\text{if } \Delta y = 0,
    \end{cases}
  \end{split}
  \label{def2b}
\end{align}
</div>

<p>We then multiply \eqref{def2a} and \eqref{def2b} by $\Delta x$ and
$\Delta y$ respectively, just like what we’ve done in \eqref{mult1}.</p>

<div class="myeqn">
\begin{align}
  &amp;\begin{split}
    \varepsilon_1(\Delta x,\Delta y) \Delta x =&amp; f(x_0+\Delta x,y_0) -
    f(x_0,y_0)\\
    &amp;- \frac{\partial f}{\partial x}(x_0,y_0) \Delta x
  \end{split}
  \label{mult2a}\\
  &amp;\begin{split}
    \varepsilon_2(\Delta x,\Delta y) \Delta y =&amp; f(x_0+\Delta
    x,y_0+\Delta y) - f(x_0+\Delta x,y_0)\\
    &amp;- \frac{\partial f}{\partial y}(x_0+\Delta x,y_0) \Delta y
  \end{split}
  \label{mult2b}
\end{align}
</div>

<p>The trick is to change the independent variables <em>one-by-one</em> since we
can only make use of partial derivatives.  After defining
\eqref{def2a}, there’s <em>no</em> need to scratch our head for \eqref{def2b}
to fit the pizzle.  We may first try to use \eqref{def2a} to get
\eqref{mult2a}.  Then by observing the term $\Delta f$ in
\eqref{fact}, we realize that we should add the term <span class="myeqn">$f(x_0+\Delta x,y_0+\Delta y)$ and remove
$f(x_0+\Delta x,y_0)$</span> so as to get $\Delta f$ in \eqref{fact}.</p>

<h3 id="remaining-problem">Remaining problem</h3>

<p>In \eqref{mult2b}, the partial derivative with respect to $y$ is taken
at <span class="myeqn">$(x_0+\Delta x,y_0)$</span>, which
<em>shouldn’t</em> appear in \eqref{fact}.  Therefore, we need a way to get
rid of the $\Delta x$ inside the bracket.  That leads us to the one
<em>unused</em> condition—the second given condition in \eqref{fact}.</p>

<p>By the continuity of the first-order partial derivatives at <span class="myeqn">$(x_0,y_0)$</span>,</p>

<div class="myeqn">
\begin{equation}
  \lim_{\Delta x \to 0} \frac{\partial f}{\partial y}(x_0+\Delta
  x,y_0) = \frac{\partial f}{\partial y}(x_0,y_0)\\
  \lim_{\Delta x \to 0} \left ( \frac{\partial f}{\partial
  y}(x_0+\Delta x,y_0)
  - \frac{\partial f}{\partial y}(x_0,y_0) \right ) = 0
  \label{cts1}
\end{equation}
</div>

<p>Thus, we define</p>

<div class="myeqn">
\begin{equation}
  \varepsilon_3(\Delta x) := \frac{\partial f}{\partial y}(x_0+\Delta
  x,y_0) - \frac{\partial f}{\partial y}(x_0,y_0)
  \label{cts2}
\end{equation}
</div>

<p>so that <span class="myeqn">$\varepsilon_3 \to 0$</span>
as $\Delta x \to 0$.  With \eqref{cts2}, we can replace the
first-order partial derivative with respect to $y$ at <span class="myeqn">$(x_0+\Delta x,y_0)$</span> in
\eqref{mult2b} by the one at <span class="myeqn">$(x_0,y_0)$</span>.</p>

<div class="myeqn">
\begin{equation}
  \begin{split}
    \varepsilon_2(\Delta x,\Delta y) \Delta y =&amp; f(x_0+\Delta
    x,y_0+\Delta y) - f(x_0+\Delta x,y_0)\\
    &amp;- \left ( \frac{\partial f}{\partial y}(x_0,y_0) +
    \varepsilon_3(\Delta x) \right ) \Delta y
  \end{split}
  \label{b4repl}
\end{equation}
</div>

<p>Therefore, from \eqref{b4repl}, we see that it’s legitimate for us to
rename <span class="myeqn">$\varepsilon_2-\varepsilon_3$
as \varepsilon_2</span> to get an equation which looks more similar to
\eqref{mult2a} than \eqref{mult2b} does.</p>

<div class="myeqn">
\begin{gather}
  \begin{split}
    &amp;\varepsilon_2(\Delta x,\Delta y) \Delta y\\
    =&amp; f(x_0+\Delta x,y_0+\Delta y) - f(x_0+\Delta x,y_0) -
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y
  \end{split}
  \label{mult2bb}\\
  \begin{split}
    &amp;\varepsilon_1(\Delta x,\Delta y) + \varepsilon_2(\Delta x,\Delta
    y)\\
    =&amp; f(x_0+\Delta x, y_0+\Delta y) - f(x_0,y_0)\\
    &amp;- \frac{\partial f}{\partial x}(x_0,y_0) \Delta x -
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y \quad
    \text{(\eqref{mult2a}+\eqref{mult2bb})}
  \end{split}\\
  \begin{split}
    &amp;f(x_0+\Delta x, y_0+\Delta y) - f(x_0,y_0)\\
    =&amp; \frac{\partial f}{\partial x}(x_0,y_0) \Delta x +
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y +
    \varepsilon_1(\Delta x,\Delta y) + \varepsilon_2(\Delta x,\Delta
    y)
  \end{split}
  \label{result}
\end{gather}
</div>

<p>The result \eqref{result} is what we desired in \eqref{fact}.</p>

<h2 id="generalisation-to-n-dimension">Generalisation to $n$-dimension</h2>

<p>By reusing the trick of changing the variables once at a time from
\eqref{def2a} to \eqref{mult2b}, and a suitable renaming and
rearrangment of terms, one can generalise the result in \eqref{fact}
to a function $f:\mathcal{D} \to \R$ defined on a subset $\mathcal{D}$
of $\R^n$ containing a $\varepsilon$-neighbourhood of a point
$\vect{x}_0 \in \R^n$.</p>

<div class="myeqn">
\begin{equation}
  \Delta f = \langle \nabla f(\vect{x_0}) + \vect{\varepsilon},\Delta
  \vect{x} \rangle,
  \label{generalisation}
\end{equation}
</div>

<p><span class="myeqn">where $\Delta f :=
f(\vect{x_0}+\Delta \vect{x})-f(\vect{x_0})$ and $\vect{\varepsilon}
\to \zeros$ as $\Delta \vect{x} \to \zeros$.</span></p>

<p>As you can see in \eqref{generalisation}, writing the statement in its
vector form is more concise than writing out each partial derivative
in \eqref{fact}.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Basic Jekyll Date Locale Support]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support/"/>
    
    <updated>2015-08-03T22:38:32+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried installing <code>_plugins/i18n_filter.rb</code> and <code>_locales/fr.yml</code>
from <a href="https://github.com/jekyll/jekyll/issues/3406">GitHub</a>.  I mistakenly thought that I had finished
changing the English dates on <a href="https://vincenttam.github.io/blog2"><em>Blog 2</em></a> to their corresponding
French version due to the successful results shown in the local
preview.</p>

<p><strong>How can one get the locale support for dates on Jekyll sites?</strong></p>

<!-- more -->

<h2 id="possible-cause">Possible cause</h2>

<p>It is possible that the <code>jekyll</code> gem installed on my computer was
<em>different</em> to the one found on GitHub Pages’ server.</p>

<h2 id="a-dirty-fix">A Dirty Fix</h2>

<p>With reference to <a href="http://stackoverflow.com/a/29757806">this Stack Overflow question</a>, I
manually filled in the name of the months to create a French “support”
for dates in sites built with Jekyll.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>A minimum working example for customizing month names  (index.md)</span> <a href="https://vincenttam.github.io/downloads/code/index.md">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">{% raw %}
</span><span class="line">&lt;!-- delete the first line --&gt;
</span><span class="line">---
</span><span class="line">layout: page
</span><span class="line">title: Mon 2ème blog
</span><span class="line">tagline: Mes petites notes de français
</span><span class="line">---
</span><span class="line">{% include JB/setup %}
</span><span class="line">
</span><span class="line">C&#39;est difiicile de chercher des mots dans un cahier ou dans un livre.
</span><span class="line">Heureusement, c&#39;est facile de les rechercher sur Google.  Alors, je
</span><span class="line">fais ce blog-ci.
</span><span class="line">
</span><span class="line">## Articles récents
</span><span class="line">
</span><span class="line">Voici une petite liste des articles.
</span><span class="line">
</span><span class="line">&lt;ul class=&quot;posts&quot;&gt;
</span><span class="line">  {% for post in site.posts limit:5 %}
</span><span class="line">    &lt;li&gt;&lt;span&gt;{% assign m = post.date | date: &quot;%-m&quot; %}
</span><span class="line">      {{ post.date | date: &quot;%-d&quot; }}
</span><span class="line">      {% case m %}
</span><span class="line">	{% when &#39;1&#39; %}janvier
</span><span class="line">	{% when &#39;2&#39; %}février
</span><span class="line">	{% when &#39;3&#39; %}mars
</span><span class="line">	{% when &#39;4&#39; %}avril
</span><span class="line">	{% when &#39;5&#39; %}mai
</span><span class="line">	{% when &#39;6&#39; %}juin
</span><span class="line">	{% when &#39;7&#39; %}juillet
</span><span class="line">	{% when &#39;8&#39; %}août
</span><span class="line">	{% when &#39;9&#39; %}septembre
</span><span class="line">	{% when &#39;10&#39; %}octobre
</span><span class="line">	{% when &#39;11&#39; %}novembre
</span><span class="line">	{% when &#39;12&#39; %}décembre
</span><span class="line">      {% endcase %}
</span><span class="line">      {{ post.date | date: &quot;%Y&quot; }}
</span><span class="line">    &lt;/span&gt; &amp;raquo; &lt;a href=&quot;{{ BASE_PATH }}{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
</span><span class="line">  {% endfor %}
</span><span class="line">&lt;/ul&gt;
</span><span class="line">&lt;!-- delete the last line --&gt;
</span><span class="line">{% endraw %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
    
  </entry>
  
</feed>
