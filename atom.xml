<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog 1]]></title>
  <link href="https://vincenttam.github.io/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2015-08-12T11:50:02+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Debug Apps on Real Devices in Android Studio]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/12/debug-apps-on-real-devices-in-android-studio/"/>
    
    <updated>2015-08-12T10:46:44+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/12/debug-apps-on-real-devices-in-android-studio</id>
    
      <content type="html"><![CDATA[<p>After spending hours to find out that I need to tap on “Settings” →
“About” → … → “Build number” for enabling USB debugging in the
“Developers options” on an Android phone, I plugged the phone into a
Mac desktop, but it <em>didn’t</em> show up in the “Devices” in Finder.  I
thought that Mac <em>couldn’t</em> detect the phone, and I searched Google
for a long time.  After having seen the name of an application for
synchronising data between and phone and the computer for a few times,
I finally decided to download it since I <em>didn’t</em> know what else to
do.  Luckily, my app could be run on the phone with the help of
Android Studio installed on the Mac desktop.</p>

<p><span class="tex2jax_ignore">
An hour later, I tried to setup the development environment on an M$
Win* computer.  Its installed size is over 20GB!  After hours of
installation work, I was <em>stuck</em> again on M$ Win*:  unlike the Mac
computer, that M$ Win* machine could detect the Android mobile
device and show it in “Computer” within a minute.  I added the
following lines into <code>/{AppName}/app/build.gradle</code> according to
<a href="https://developer.android.com/tools/device.html#setting-up">a page of the official website</a>.
</span></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>To enable debugging on a real Android device </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">debug</span> <span class="o">{</span>
</span><span class="line">            <span class="n">debuggable</span> <span class="kc">true</span>
</span><span class="line">        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, the IDE said that <em>no debuggable device</em> could be found.  I
guessed that the synchronising application made by the manufacturer of
the phone was the cause of that undesirable result.  After fetching
the application from the website of the phone manufacturer and
restarting Android Studio, I could finally run the same application on
a real Android device by clicking the little triangle on the top.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h2 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h2>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (4): General Trees]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/"/>
    
    <updated>2015-08-07T23:41:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>After I’ve written <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the third post</a> in this series, I believed
that I could generate the SHA-1 hash of <em>all</em> Git objects.</p>

<h2 id="problem">Problem</h2>

<p>In order to understand the object ID of an arbitrary tree object, it
is necessary that I create a file in a sub-folder.  Suppose that I
copied the file <code>hello.txt</code> to the sub-directory <code>subdir</code> in the
directory <code>hello</code> in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>  In short, I just
followed the steps in Chapter 4 of <em>Version Control with Git</em>.  I
include the setup here for convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ mkdir subdir
$ cp hello.txt subdir
$ git add subdir/hello.txt
$ git write-tree
492413269336d21fac079d4a4672e55d5d2147ac
$ git cat-file -p 492413269336d21fac079d4a4672e55d5d2147ac
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt
040000 tree 68aba62e560c0ebc3396e8ae9335232cd93a3f60	subdir
</code></pre>

<p>After having successfully generated the SHA-1 hash for the tree object
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>
in this series, I tried the same task for another tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.  Using the <em>same</em>
technique describe in <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the previous post</a>, I got another
<em>wrong</em> SHA-1 hash <code>06eb95bda67a8f86e65bb1590744f10a61eeccef</code>.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 71\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad040000 subdir\x00\x68\xab\xa6\x2e\x56\x
0c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60"
06eb95bda67a8f86e65bb1590744f10a61eeccef  -
</code></pre>

<p><em>How to get the <strong>right object ID</strong></em>?</p>

<!-- more -->

<h2 id="cause-of-error">Cause of error</h2>

<p>I realised that I had misunderstood the structure of a tree object
again after reading the first Google search result of “git tree object
format”.  It’s a Stack Overflow question on the “format of Git tree
object”.  I read the largest code block of
<a href="http://stackoverflow.com/a/21599232">the first answer</a>, and find out that <em>the leftmost zero
digit in</em> <code>040000</code> <em>should be taken away</em>.</p>

<h2 id="a-primitive-method">A primitive method</h2>

<h3 id="get-the-object-size-with-the-wc-command">Get the object size with the wc command</h3>

<pre class="cliUB"><code>$ printf "100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x00\xdd\x08\x
ae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0c\x0e\xbc\x
33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | wc -c
70
</code></pre>

<h3 id="sha-1-hash">SHA-1 hash</h3>

<pre class="cliUB"><code>$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0
c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<h2 id="a-more-time-saving-method">A more time-saving method</h2>

<p>The above <code>printf</code> command is error-prone.  Here’re some less
laborious commands.</p>

<h3 id="understand-the-tree-object">Understand the tree object</h3>

<p>While searching for the cause of error, I jumped through many web
pages, and I went back to
<a href="http://stackoverflow.com/a/13977017">the Stack Overflow question stated in the second post</a>
in this series.</p>

<pre class="cliUB"><code>$ git cat-file tree 492413269336d21fac079d4a4672e55d5d2147ac | od -c
0000000   1   0   0   6   4   4       h   e   l   l   o   .   t   x   t
0000020  \0   ; 030 345 022 333 247 236   L 203  \0 335  \b 256 263 177
0000040 216   r 213 215 255   4   0   0   0   0       s   u   b   d   i
0000060   r  \0   h 253 246   .   V  \f 016 274   3 226 350 256 223   5
0000100   #   , 331   :   ?   `
0000106
</code></pre>

<ul>
  <li>The <code>c</code> flag: show the input as characters if possible, otherwise as
  octal 1-byte units.</li>
  <li>The <code>b</code> flag: show the input as octal 1-byte units.</li>
</ul>

<p>Note that the number of bytes can be found at the bottom left hand
corner.  This is actually the object size of the tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.</p>

<p>One can capture the binary output and dump it to <code>od</code> with one
command.</p>

<pre class="cliUB"><code>$ git cat-file tree 4924132 | tee test.txt | od -c
</code></pre>

<h3 id="an-improved-printf-command">An improved printf command</h3>

<pre class="cliUB"><code>$ printf "tree 70\0" &gt; len.txt
$ cat len.txt test.txt | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<p>We finally get the target object ID in three steps.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="another-use-of-git-cat-file">Another use of git cat-file</h3>

<pre class="cliUB"><code>$ git cat-file -s 492413269336d21fac079d4a4672e55d5d2147ac
70
</code></pre>

<ul>
  <li>The <code>-s</code> flag: size</li>
  <li>The <code>-p</code> flag: pretty-print</li>
</ul>

<p>From the word “pretty” in the man page for <code>git-cat-file</code>, I
understand why I had misunderstood the structure of Git tree objects.</p>

<h3 id="use-od-like-hd">Use od like hd</h3>

<p>From a comment to the second answer to
<a href="http://stackoverflow.com/a/21599232">the Stack Overflow question</a> about the “format of git
tree object”, I saw the word <code>hexdump</code>, and I viewed its man page.  At
first, I <em>didn’t</em> know their difference, so I googled “od vs hexdump”,
and then I saw the abbreviation <code>hd</code> for <code>hexdump</code>, so I changed the
search query string to “hd vs od”, but found out that their functions
are basically the <em>same</em>, but their display is <em>different</em> by default.
I like the default display of <code>hd</code>.  To use <code>od</code> like <code>hd</code>, one only
needs to copy the command from the man page of <code>od</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (3): Trees With Multiple Blobs]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/"/>
    
    <updated>2015-08-07T22:30:55+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Having written <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series, I thought that
I understood how to compute the SHA-1 hash of Git tree objects.</p>

<h2 id="problem">Problem</h2>

<p>Suppose that I add a file named <code>rose</code> which consisted merely of the
word <code>sweet</code> and a line terminator to the folder <code>hello</code> in
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series.  I include the setup here for
convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ echo "sweet" &gt; rose
$ git add rose
$ git write-tree
b12767ff2f8a8160bca15abfb775bca5ba31ccf1
$ git cat-file -p b12767ff2f8a8160bca15abfb775bca5ba31ccf1 | tee test.txt
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    hello.txt
100644 blob aa823728ea7d592acc69b36875a482cdf3fd5c8d    rose
</code></pre>

<p>Therefore, our target hash is
<code>b12767ff2f8a8160bca15abfb775bca5ba31ccf1</code>.</p>

<p>Just like what I’d done in the previous post, I manually changed the
hashes into a <code>printf</code> command that writes out the binary value of the
hashes.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad\n100644 rose\x00\xaa\x82\x37\x28\xea\x
7d\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
a4b430f9da3e22c0854fb26c97da77db271e5acf  -
</code></pre>

<p>What I got is <code>a4b430f9da3e22c0854fb26c97da77db271e5acf</code>, which is
<em>different</em> from the target.  <em>How can I get back <strong>the right SHA-1
hash</strong>?</em></p>

<!-- more -->

<h2 id="method">Method</h2>

<p>I read domegetter’s comment on <a href="https://gist.github.com/masak/2415865">this Gist</a>, and removed the
newline character <code>\n</code> in the middle of the quoted string in the above
<code>printf</code> command.  Then I decreased the object size by one since a
character had been taken out.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 69\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad100644 rose\x00\xaa\x82\x37\x28\xea\x7d
\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
b12767ff2f8a8160bca15abfb775bca5ba31ccf1  -
</code></pre>

<p>We’re done!</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (2): Trees With One Single Blob]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/"/>
    
    <updated>2015-08-07T19:36:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/">the first post</a> in this series, I’ve claimed that the
generation of object IDs in Git is the SHA-1 hash of the string</p>

<pre><code>&lt;object type name&gt; SP &lt;len&gt; NUL &lt;data&gt;
</code></pre>

<p>,where</p>

<ul>
  <li><code>&lt;data&gt;</code> stands for the output of <code>git cat-file -p {hash}</code></li>
  <li><code>&lt;len&gt;</code> means the length of <code>&lt;data&gt;</code>.  It can be measured with the
  command <code>wc -c</code>.</li>
</ul>

<h2 id="problem">Problem</h2>

<p>To verify my claim, I followed the steps in Chapter 4 of <em>Version
Control with Git</em>.</p>

<ol>
  <li>Create a folder named <code>hello</code> and go to that directory.</li>
  <li>Initialise an empty Git repository.</li>
  <li>Create the file <code>hello.txt</code> with one single line “hello world”.</li>
  <li>Add the file to Git’s object storage.</li>
  <li>Get a tree object from the index.</li>
  <li>Capture the contents of the tree object in <code>test.txt</code>.</li>
  <li>Count the number of bytes in <code>test.txt</code>.</li>
  <li>
    <p>Create the file <code>len.txt</code> consisting of</p>

    <pre class="cliUB"><code> "tree" SP &lt;result in item 6&gt; NUL
</code></pre>

    <p><em>without</em> the line terminator.</p>
  </li>
  <li>Concatenate the contents of the files <code>len.txt</code> and <code>test.txt</code> and
compute its SHA-1 hash.</li>
</ol>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
<span class="UBHLCode">68aba62e560c0ebc3396e8ae9335232cd93a3f60</span>
$ git cat-file -p 68aba62e560c0ebc3396e8ae9335232cd93a3f60 | tee test.txt
<span class="UBHLCode">100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt</span>
$ wc -c test.txt
63 test.txt
$ printf "tree 63\0" &gt; len.txt
$ cat len.txt test.txt | shasum
<span class="err">10bd0f0350027c25edc4ce72aba60e641f55596d  -</span>
</code></pre>

<p>As can be seen above, I’ve <span class="err">a wrong SHA-1
hash</span>.  <em>How can I get back <strong>the right SHA-1 hash</strong>?</em></p>

<!-- more -->

<h2 id="method">Method</h2>

<p>I googled “git tree hash id”, and I found the chosen answer of
<a href="http://stackoverflow.com/a/13977017">this Stack Overflow question</a> very explanative.  One may
shorten the included command by replacing <code>echo -en</code> with <code>printf</code>.</p>

<h3 id="get-the-object-size-right">Get the object size right</h3>

<p>In this case, the object size of the tree
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> containg the blob
<code>3b18e512dba79e4c8300dd08aeb37f8e728b8dad</code> which corresponds to the
file <code>hello.txt</code> should be 37 (= 6 + 1 + 9 + 1 + 20).</p>

<h3 id="get-the-object-content-right">Get the object content right</h3>

<p>As the blob ID is stored as binary value, I copied it and pasted it
Vim so that I could easily insert <code>\x</code> in front of a pair of hex
digits in the blob ID.  I then put the things together in a command.</p>

<pre class="cliUB"><code># Contents of `testing.sh' as seen inside Vim
# Note that there's NO newline character in the following command
printf "tree 37\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4
c\x83\x00\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad" | shasum
</code></pre>

<h3 id="result">Result</h3>

<p>By executing the above command, I got <strong>the right SHA-1 hash</strong>:
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code>.</p>

<h2 id="fact-learnt-formatting-printfs-output">Fact learnt: formatting printf’s output</h2>

<p>In the Stack Overflow question, there’s a command</p>

<pre><code>find .git/objects/ -type f -printf "%h%f %s\n" {.cliUB}
</code></pre>

<ul>
  <li>The flag <code>-type f</code> stands for files.  <em>Without</em> this flag,
  directories like <code>.git/objects</code> will be displayed.</li>
  <li>The flag <code>-printf</code> formats the output.
    <ul>
      <li><code>%h</code> means the head of the file name <em>without</em> the last
  component of the file name.  Thus, it expands to a the path of
  a directory <em>without</em> the trailing <code>/</code>.</li>
      <li><code>%f</code> means the last component of the file name.  As a result,
  the <code>/</code> inside the displayed SHA-1 hashes are taken away.</li>
      <li><code>%s</code> means the file size</li>
    </ul>
  </li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[How Does Git Commit Amend Work?]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work/"/>
    
    <updated>2015-08-07T17:15:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work</id>
    
      <content type="html"><![CDATA[<h2 id="situation">Situation</h2>

<p>I’ve written and commited the post <a href="https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3/"><em>My Git Command List (3)</em></a>,
but after a while, I changed that post.  In order not to complexify
my Git commit history, I used <code>git commit --amend -a</code>.  That’s quite
simple and convenient.  I observed that the displayed time in the
amended commit was the <em>same</em> as the original one, whereas the SHA-1
hash was <em>changed</em> so that Git knows that they’re <em>different</em>.
However, from
<a href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/"><em>Git Object ID Generation (1): Blobs and Commits</em></a>, I’ve learnt
that the ID of Git commit objects is totally determined by</p>

<ol>
  <li>the content of the commit message</li>
  <li>the commit time</li>
  <li>the author</li>
</ol>

<p>In this case, no difference of the above factors between the original
commit and the amended commit can be observed with <code>git show</code>.</p>

<h2 id="problem">Problem</h2>

<p><strong>In what way do the original commit and the amended commit differ?</strong></p>

<!-- more -->

<h2 id="difference">Difference</h2>

<p>To solve this problem, I scrolled up the screen and captured the SHA-1
hashes fo the two commits.</p>

<ul>
  <li>the original commit’s hash: <code>9de8974b93a2e4032b608c0de17ea5ed0c55524b</code></li>
  <li>the amended commit’s hash: <code>5b7b566b8a07d4813ba9f08a326e169cf38ca20f</code></li>
</ul>

<p>Note: I just <em>make up</em> the email address <code>demo@example.com</code> to replace
my real email address to <a href="http://www.problogger.net/archives/2008/12/06/10-reasons-to-avoid-mailto-links/">avoid email spams</a>.  Therefore,
<strong>the above commit hashes don’t correspond to the content displayed
below</strong>.  In fact, they correspond to the commits in the Git
repository for this blog.</p>

<pre class="cliUB"><code>$ git cat-file -p 9de8974b93a2e4032b608c0de17ea5ed0c55524b
tree b9f4fb708327e25c8b1b822711ec7dda9c5b2198
parent <a href="https://github.com/VincentTam/vincenttam.github.io/commit/afcb4d97cb447112bd2e930159966d92b8e4754a">afcb4d97cb447112bd2e930159966d92b8e4754a</a>
author Vincent Tam &lt;demo@example.com&gt; 1438859683 +0800
committer Vincent Tam &lt;demo@example.com&gt; <span class="UBHLCode">1438859683</span> +0800

A new post on some Git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.
$ git cat-file -p 5b7b566b8a07d4813ba9f08a326e169cf38ca20f
tree 2d864bcb7e4944e9d98b663649c79084692873c1
parent <a href="https://github.com/VincentTam/vincenttam.github.io/commit/afcb4d97cb447112bd2e930159966d92b8e4754a">afcb4d97cb447112bd2e930159966d92b8e4754a</a>
author Vincent Tam &lt;demo@example.com&gt; 1438859683 +0800
committer Vincent Tam &lt;demo@example.com&gt; 1438864942 +0800

A new post on some Git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.</code>
</pre>

<p>Hence, the difference of the timestamp of the <code>committer</code> causes the
difference in the hashes, whereas the timestamp of the <code>author</code> is
converted to a human readable date for display.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="unix-timestamp">Unix timestamp</h3>

<p>A Unix timestamp is the number of seconds elasped since the start of
the year 1970 in <abbr title="Global Mean Time">GMT</abbr>.</p>

<h3 id="a-little-bit-kramdown-syntax-eob-marker">A little bit kramdown syntax: <abbr title="End-Of-Block">EOB</abbr> marker</h3>

<p>According to kramdown’s syntax guide,
<a href="http://kramdown.gettalong.org/syntax.html#eob-marker">the <abbr title="End-Of-Block">EOB</abbr> marker <em>won’t</em> be found in most Markdown documents</a>.  In
order to include a list followed by a code block that <em>isn’t</em>
contained inside the list, the boundary of the list has to be
specified by a line consisting of a leading ‘^’ character.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (1): Blobs and Commits]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits/"/>
    
    <updated>2015-08-07T13:52:47+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-1-blobs-and-commits</id>
    
      <content type="html"><![CDATA[<p>The SHA-1 hash for blobs <em>isn’t</em> so hard to generate, and the process
is now well-known.  I <em>don’t</em> repeat it here.  The one for commits can
be similarly generated.</p>

<!-- more -->

<p>For example, <code>5b7b566b8a07d4813ba9f08a326e169cf38ca20f</code> is a hash of
the repository of this blog.</p>

<p>Remark: The email shown below is <em>fake</em>, so the SHA-1 hash of <code>HEAD</code>
<em>isn’t</em> real.  For the reason of displaying that email, you may refer
to <a href="https://vincenttam.github.io/blog/2015/08/07/how-does-git-commit-amend-work/">the remark in <em>Git Object Id Generation (4): General Trees</em></a>.</p>

<pre class="cliUB"><code>$ git rev-parse head
5b7b566b8a07d4813ba9f08a326e169cf38ca20f
$ git cat-file -p 5b7b566b8a07d4813ba9f08a326e169cf38ca20f | tee test.txt
tree 2d864bcb7e4944e9d98b663649c79084692873c1
parent afcb4d97cb447112bd2e930159966d92b8e4754a
author vincent tam &lt;demo@example.com&gt; 1438859683 +0800
committer vincent tam &lt;demo@example.com&gt; 1438864942 +0800

a new post on some git low level commands

I *don't* go over the details of the book *Pro Git*, which is available
online.  I just select some important ones for quick reference.
$ wc -c test.txt
379 test.txt
$ printf "commit 379\0" &gt; len.txt
$ cat len.txt test.txt | shasum
5b7b566b8a07d4813ba9f08a326e169cf38ca20f  -
</code></pre>

<p>We get the <em>same</em> SHA-1 hash.  Therefore, the ID for Git commit
objects is just the SHA-1 hash of the contents of the Git commits with
the string <code>commit {len}\0</code> inserted at the beginning, where <code>{len}</code>
stands for the number of bytes of the Git commit object (which is
stored in <code>test.txt</code> in the above situation).</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="the-printf-command">The printf command</h3>

<p>The commands <code>printf "\0"</code> and <code>printf "\000"</code> <em>doesn’t</em> differ.
Therefore, if a digit zero follows the null character, one may
indicate the null character using hex digits: <code>printf "\x000"</code>.
<code>printf</code> will interpret <code>\x00</code> as a null character and the trailing
digit <code>0</code> <em>won’t</em> be mixed up with the characters on its left.</p>

<h3 id="the-wc-command">The wc command</h3>

<p>Apart from counting words, the <code>wc</code> command provide various flags
which return the number of lines, characters, etc.  In the past, I
knew three flags only: <code>-l</code>, <code>-w</code>, and <code>-c</code>.  I thought that they told
<code>wc</code> to count the number of <strong>l</strong>ines, <strong>w</strong>ords and <strong>c</strong>haracters
respectively.  After running the <code>wc</code> command on strings that include
accents (e.g. “café”, “resumé”, etc), I realised that I misunderstood
the function of the <code>-c</code> flag, which actually counts the number of
<em>bytes</em> of the input.  To count the number of characters, use the <code>-m</code>
flag instead.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[My Git Command List (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3/"/>
    
    <updated>2015-08-06T17:39:08+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/06/my-git-command-list-3</id>
    
      <content type="html"><![CDATA[<h2 id="overview">Overview</h2>

<p>Unlike the Git commands found on the previous posts in this series, in
this article, I’ll focus on <em>low-level</em> Git commands.</p>

<h2 id="raison-dtre">Raison d’être</h2>

<p>Usually, one <em>won’t</em> use low-level Git commands in a Git repository,
but I included them here because these commands help one understand
the <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">Git object model</a>.</p>

<h2 id="the-list">The list</h2>

<pre class="cliUB"><code>$ find .git/objects       # Return all files/folders under `.git/objects'
$ git cat-file -p {hash}  # Print the content to which {hash} corresponds
$ git hash-object {file}  # Return the hash of {file}
$ git hash-object --stdin # Return the hash of the standard input
$ git write-tree          # Return the hash of the tree of tracked contents
$ git ls-files -s         # List all tracked files and their hash
$ git ls-tree {hash}      # List the contents of a tree
$ git rev-parse {hash}    # Return the full SHA-1 of {hash}
$ git rev-parse HEAD      # Return the full SHA-1 of HEAD
$ git diff                # Show changes in tracked files not staged for commit
$ git diff --cached       # Show changes in tracked files staged for commit
</code></pre>

<p>It <em>isn’t</em> necessary to supply the full SHA-1 hash for
<code>{hash}</code>—several hex digits at the beginning will be enough.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<ol>
  <li>An SHA-1 hash has 160 bits.  Since 1 byte is equal 8 bit, it has 20
bytes.  When it’s displayed, it has 40 hex-digits.</li>
  <li><em>The blob for a file is independent of the file name</em>, which was
actually stored in a tree object.  For example, the object ID of a
file which contains only a single line “hello world” is
<code>3b18e512dba79e4c8300dd08aeb37f8e728b8dad</code>, so if the file is stored
inside the <code>.git</code> directory as a blob, the blob will be named as
<code>.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad</code>.</li>
  <li>If a sub-directory is created in the <code>dir</code> directory, then a <code>tree</code>
entry will be created in the tree object corresponding to
<code>dir</code>.<sup id="fnref:tree_obj"><a href="#fn:tree_obj" class="footnote">1</a></sup></li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:tree_obj">

      <p>See the code blocks and the picture in “<a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#Tree-Objects">Tree Objects</a>”
in Section 10.2 “Git Objects” of <em>Pro Git</em> a concrete example of a
<code>tree</code> entry inside a tree object. <a href="#fnref:tree_obj" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-05T00:18:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="https://vincenttam.github.io/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="https://vincenttam.github.io/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to work on
math.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Put this at the bottom </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">getScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">success</span><span class="p">){</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">script</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">script</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">url</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">head</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">    <span class="nx">done</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class="line">    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">done</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;loaded&#39;</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;complete&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">done</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class="line">      <span class="nx">success</span><span class="p">();</span>
</span><span class="line">      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="nx">head</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">getScript</span><span class="p">(</span><span class="s2">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?&quot;</span> <span class="o">+</span>
</span><span class="line">    <span class="s2">&quot;config=TeX-AMS-MML_HTMLorMML&quot;</span> <span class="o">+</span>
</span><span class="line">    <span class="s2">&quot;,https://vincenttam.github.io/javascripts/MathJaxLocal.js&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="kd">function</span><span class="p">(){});</span>
</span><span class="line">
</span><span class="line"><span class="p">})();</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<p>In <a href="https://vincenttam.github.io/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="https://vincenttam.github.io/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="https://vincenttam.github.io/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Some Thoughts on a Real-Valued Function]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function/"/>
    
    <updated>2015-08-04T22:28:52+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/04/some-thoughts-on-a-real-valued-function</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Spending so much time to work out <a href="https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support/">the locale support for dates</a>
and <a href="https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages/">valid HTML code</a> in my <a href="https://vincenttam.github.io/blog2">second blog</a> which was
powered by Jekyll-Bootstrap, I <em>couldn’t</em> recall this fact.</p>

<p>Suppose that $\mathcal{D}$ is a subset of $\R^2$ that contains an
$\varepsilon$-neighbourhood of a point <span class="myeqn">$(x_0,y_0)$</span>.  If</p>

<ol>
  <li>$f: \mathcal{D} \to \R$ is has first-order partial derivatives in
the $\varepsilon$-neighbourhood of <span class="myeqn">$(x_0,y_0)$</span>.</li>
  <li>The first-order partial derivatives of $f$ are continuous at <span class="myeqn">$(x_0,y_0)$</span>.</li>
</ol>

<p>Then we can write</p>

<div class="myeqn">
\begin{equation}
  \Delta f = \frac{\partial f}{\partial x} (x_0,y_0) \Delta x +
  \frac{\partial f}{\partial y} (x_0,y_0) \Delta y + \varepsilon_1
  \Delta x + \varepsilon_2 \Delta y,
  \label{fact}
\end{equation}
</div>

<p>where <span class="myeqn">$\Delta f := f(x_0+\Delta
x,y_0+\Delta y)-f(x_0,y_0), \varepsilon_1$ and $\varepsilon_2 \to
0$</span> as $\Delta x$ and $\Delta y \to 0$.</p>

<!-- more -->

<h2 id="the-first-order-approximation-for-a-differentiable-function">The First-Order Approximation For a Differentiable Function</h2>

<p>At first, I thought that equation \eqref{fact} followed from formula
\eqref{thm}.</p>

<div class="myeqn">
\begin{equation}
  \lim_{\vect{h} \to \zeros}
  \frac{f(\vect{x}+\vect{h})-[f(\vect{x})+\langle\nabla
  f(\vect{x}),\vect{h}\rangle]}{\norm{\vect{h}}} = 0
  \label{thm}
\end{equation}
</div>

<p>I forgot that this statement assumed the continuous differentiability
on <em>an open set</em>.  However, we only know that the first-order partial
derivatives are continuous <em>at one point</em> <span class="myeqn">$(x_0,y_0)$</span>.</p>

<h2 id="solve-an-easier-problem-first">Solve an easier problem first</h2>

<p>This question should be much easier and much more intuitive if the
domain of the function $f$ in \eqref{fact} is one-dimensional.  Then,
by drawing a curve and sketching its tangent line at a point, one can
intuitively realise that the geometric meaning of $\varepsilon$.</p>

<p>In fact, one <em>constructs</em></p>

<div class="myeqn">
\begin{equation}
  \varepsilon (\Delta x) :=
    \begin{cases}
      \frac{\Delta f}{\Delta x}-f&#8217;(x_0) &amp;\text{if }\Delta x \ne 0,&#92;&#92;
      0 &amp;\text{if } \Delta x = 0,
    \end{cases}
  \label{def1}
\end{equation}
</div>

<p>where <span class="myeqn">$\Delta f := f(x_0+\Delta
x)-f(x_0)$</span> in this section since $f$ is now one-dimensional.</p>

<p>Then one can make use of the differentiability of $f$ at $(x_0)$ to
say that $\varepsilon \to 0$ as $\Delta x \to 0$.</p>

<p>To get the one-dimensional version of \eqref{fact}, we get rid of the
denominator by multiplying both sides by $\Delta x$ in the case of
$\Delta x \ne 0$.</p>

<div class="myeqn">
\begin{equation}
  \begin{aligned}
    \varepsilon \Delta x &amp;= \Delta f - f&#8217; (x_0) \Delta x&#92;&#92;
    \Delta f &amp;= f&#8217; (x_0) \Delta x + \varepsilon \Delta x
  \end{aligned}
  \label{mult1}
\end{equation}
</div>

<p>Observe that equality \eqref{mult1} also holds when $\Delta x = 0$.</p>

<h2 id="back-to-the-problem">Back to the problem</h2>

<h3 id="make-use-of-the-previous-section">Make use of the previous section</h3>

<p>From \eqref{def1}, we observe that $\varepsilon$ is defined as
the difference between a difference quotient between two points
<span class="myeqn">$x_0$</span> and <span class="myeqn">$x_0+\Delta x$</span> and the derivative <span class="myeqn">$f&#8217;(x_0)$</span>.  We can define <span class="myeqn">$\varepsilon_1$</span> and <span class="myeqn">$\varepsilon_2$</span> in a similar way.</p>

<div class="myeqn">
\begin{align}
  &amp;\begin{split}
    &amp; \varepsilon_1(\Delta x,\Delta y) :=&#92;&#92;
    &amp;\begin{cases}
      \frac{f(x_0+\Delta x,y_0)-f(x_0,y_0)}{\Delta x}-\frac{\partial
      f}{\partial x}(x_0,y_0) &amp;{\small \text{if } \Delta x \ne 0},&#92;&#92;
      0 &amp;\text{if } \Delta x = 0,
    \end{cases}
  \end{split}
  \label{def2a}&#92;&#92;

  &amp;\begin{split}
    &amp; \varepsilon_2(\Delta x,\Delta y) :=&#92;&#92;
    &amp;\begin{cases}
      \frac{f(x_0+\Delta x,y_0+\Delta y) - f(x_0+\Delta x,y_0)}{\Delta
      y} - \frac{\partial f}{\partial y}(x_0+\Delta x,y_0) &amp;\text{if }
      \Delta y \ne 0,&#92;&#92;
      0 &amp;\text{if } \Delta y = 0,
    \end{cases}
  \end{split}
  \label{def2b}
\end{align}
</div>

<p>We then multiply \eqref{def2a} and \eqref{def2b} by $\Delta x$ and
$\Delta y$ respectively, just like what we’ve done in \eqref{mult1}.</p>

<div class="myeqn">
\begin{align}
  &amp;\begin{split}
    \varepsilon_1(\Delta x,\Delta y) \Delta x =&amp; f(x_0+\Delta x,y_0) -
    f(x_0,y_0)&#92;&#92;
    &amp;- \frac{\partial f}{\partial x}(x_0,y_0) \Delta x
  \end{split}
  \label{mult2a}&#92;&#92;
  &amp;\begin{split}
    \varepsilon_2(\Delta x,\Delta y) \Delta y =&amp; f(x_0+\Delta
    x,y_0+\Delta y) - f(x_0+\Delta x,y_0)&#92;&#92;
    &amp;- \frac{\partial f}{\partial y}(x_0+\Delta x,y_0) \Delta y
  \end{split}
  \label{mult2b}
\end{align}
</div>

<p>The trick is to change the independent variables <em>one-by-one</em> since we
can only make use of partial derivatives.  After defining
\eqref{def2a}, there’s <em>no</em> need to scratch our head for \eqref{def2b}
to fit the pizzle.  We may first try to use \eqref{def2a} to get
\eqref{mult2a}.  Then by observing the term $\Delta f$ in
\eqref{fact}, we realize that we should add the term <span class="myeqn">$f(x_0+\Delta x,y_0+\Delta y)$ and remove
$f(x_0+\Delta x,y_0)$</span> so as to get $\Delta f$ in \eqref{fact}.</p>

<h3 id="remaining-problem">Remaining problem</h3>

<p>In \eqref{mult2b}, the partial derivative with respect to $y$ is taken
at <span class="myeqn">$(x_0+\Delta x,y_0)$</span>, which
<em>shouldn’t</em> appear in \eqref{fact}.  Therefore, we need a way to get
rid of the $\Delta x$ inside the bracket.  That leads us to the one
<em>unused</em> condition—the second given condition in \eqref{fact}.</p>

<p>By the continuity of the first-order partial derivatives at <span class="myeqn">$(x_0,y_0)$</span>,</p>

<div class="myeqn">
\begin{equation}
  \lim_{\Delta x \to 0} \frac{\partial f}{\partial y}(x_0+\Delta
  x,y_0) = \frac{\partial f}{\partial y}(x_0,y_0)&#92;&#92;
  \lim_{\Delta x \to 0} \left ( \frac{\partial f}{\partial
  y}(x_0+\Delta x,y_0)
  - \frac{\partial f}{\partial y}(x_0,y_0) \right ) = 0
  \label{cts1}
\end{equation}
</div>

<p>Thus, we define</p>

<div class="myeqn">
\begin{equation}
  \varepsilon_3(\Delta x) := \frac{\partial f}{\partial y}(x_0+\Delta
  x,y_0) - \frac{\partial f}{\partial y}(x_0,y_0)
  \label{cts2}
\end{equation}
</div>

<p>so that <span class="myeqn">$\varepsilon_3 \to 0$</span>
as $\Delta x \to 0$.  With \eqref{cts2}, we can replace the
first-order partial derivative with respect to $y$ at <span class="myeqn">$(x_0+\Delta x,y_0)$</span> in
\eqref{mult2b} by the one at <span class="myeqn">$(x_0,y_0)$</span>.</p>

<div class="myeqn">
\begin{equation}
  \begin{split}
    \varepsilon_2(\Delta x,\Delta y) \Delta y =&amp; f(x_0+\Delta
    x,y_0+\Delta y) - f(x_0+\Delta x,y_0)&#92;&#92;
    &amp;- \left ( \frac{\partial f}{\partial y}(x_0,y_0) +
    \varepsilon_3(\Delta x) \right ) \Delta y
  \end{split}
  \label{b4repl}
\end{equation}
</div>

<p>Therefore, from \eqref{b4repl}, we see that it’s legitimate for us to
rename <span class="myeqn">$\varepsilon_2-\varepsilon_3$
as \varepsilon_2</span> to get an equation which looks more similar to
\eqref{mult2a} than \eqref{mult2b} does.</p>

<div class="myeqn">
\begin{gather}
  \begin{split}
    &amp;\varepsilon_2(\Delta x,\Delta y) \Delta y&#92;&#92;
    =&amp; f(x_0+\Delta x,y_0+\Delta y) - f(x_0+\Delta x,y_0) -
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y
  \end{split}
  \label{mult2bb}&#92;&#92;
  \begin{split}
    &amp;\varepsilon_1(\Delta x,\Delta y) + \varepsilon_2(\Delta x,\Delta
    y)&#92;&#92;
    =&amp; f(x_0+\Delta x, y_0+\Delta y) - f(x_0,y_0)&#92;&#92;
    &amp;- \frac{\partial f}{\partial x}(x_0,y_0) \Delta x -
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y \quad
    \text{(\eqref{mult2a}+\eqref{mult2bb})}
  \end{split}&#92;&#92;
  \begin{split}
    &amp;f(x_0+\Delta x, y_0+\Delta y) - f(x_0,y_0)&#92;&#92;
    =&amp; \frac{\partial f}{\partial x}(x_0,y_0) \Delta x +
    \frac{\partial f}{\partial y}(x_0,y_0) \Delta y +
    \varepsilon_1(\Delta x,\Delta y) + \varepsilon_2(\Delta x,\Delta
    y)
  \end{split}
  \label{result}
\end{gather}
</div>

<p>The result \eqref{result} is what we desired in \eqref{fact}.</p>

<h2 id="generalisation-to-n-dimension">Generalisation to $n$-dimension</h2>

<p>By reusing the trick of changing the variables once at a time from
\eqref{def2a} to \eqref{mult2b}, and a suitable renaming and
rearrangment of terms, one can generalise the result in \eqref{fact}
to a function $f:\mathcal{D} \to \R$ defined on a subset $\mathcal{D}$
of $\R^n$ containing a $\varepsilon$-neighbourhood of a point
$\vect{x}_0 \in \R^n$.</p>

<div class="myeqn">
\begin{equation}
  \Delta f = \langle \nabla f(\vect{x_0}) + \vect{\varepsilon},\Delta
  \vect{x} \rangle,
  \label{generalisation}
\end{equation}
</div>

<p><span class="myeqn">where $\Delta f :=
f(\vect{x_0}+\Delta \vect{x})-f(\vect{x_0})$ and $\vect{\varepsilon}
\to \zeros$ as $\Delta \vect{x} \to \zeros$.</span></p>

<p>As you can see in \eqref{generalisation}, writing the statement in its
vector form is more concise than writing out each partial derivative
in \eqref{fact}.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Basic Jekyll Date Locale Support]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support/"/>
    
    <updated>2015-08-03T22:38:32+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/03/basic-jekyll-date-locale-support</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried installing <code>_plugins/i18n_filter.rb</code> and <code>_locales/fr.yml</code>
from <a href="https://github.com/jekyll/jekyll/issues/3406">GitHub</a>.  I mistakenly thought that I had finished
changing the English dates on <a href="https://vincenttam.github.io/blog2"><em>Blog 2</em></a> to their corresponding
French version due to the successful results shown in the local
preview.</p>

<p><strong>How can one get the locale support for dates on Jekyll sites?</strong></p>

<!-- more -->

<h2 id="possible-cause">Possible cause</h2>

<p>It is possible that the <code>jekyll</code> gem installed on my computer was
<em>different</em> to the one found on GitHub Pages’ server.</p>

<h2 id="a-dirty-fix">A Dirty Fix</h2>

<p>With reference to <a href="http://stackoverflow.com/a/29757806">this Stack Overflow question</a>, I
manually filled in the name of the months to create a French “support”
for dates in sites built with Jekyll.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>A minimum working example for customizing month names  (index.md)</span> <a href="https://vincenttam.github.io/downloads/code/index.md">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">{% raw %}
</span><span class="line">&lt;!-- delete the first line --&gt;
</span><span class="line">---
</span><span class="line">layout: page
</span><span class="line">title: Mon 2ème blog
</span><span class="line">tagline: Mes petites notes de français
</span><span class="line">---
</span><span class="line">{% include JB/setup %}
</span><span class="line">
</span><span class="line">C&#39;est difiicile de chercher des mots dans un cahier ou dans un livre.
</span><span class="line">Heureusement, c&#39;est facile de les rechercher sur Google.  Alors, je
</span><span class="line">fais ce blog-ci.
</span><span class="line">
</span><span class="line">## Articles récents
</span><span class="line">
</span><span class="line">Voici une petite liste des articles.
</span><span class="line">
</span><span class="line">&lt;ul class=&quot;posts&quot;&gt;
</span><span class="line">  {% for post in site.posts limit:5 %}
</span><span class="line">    &lt;li&gt;&lt;span&gt;{% assign m = post.date | date: &quot;%-m&quot; %}
</span><span class="line">      {{ post.date | date: &quot;%-d&quot; }}
</span><span class="line">      {% case m %}
</span><span class="line">	{% when &#39;1&#39; %}janvier
</span><span class="line">	{% when &#39;2&#39; %}février
</span><span class="line">	{% when &#39;3&#39; %}mars
</span><span class="line">	{% when &#39;4&#39; %}avril
</span><span class="line">	{% when &#39;5&#39; %}mai
</span><span class="line">	{% when &#39;6&#39; %}juin
</span><span class="line">	{% when &#39;7&#39; %}juillet
</span><span class="line">	{% when &#39;8&#39; %}août
</span><span class="line">	{% when &#39;9&#39; %}septembre
</span><span class="line">	{% when &#39;10&#39; %}octobre
</span><span class="line">	{% when &#39;11&#39; %}novembre
</span><span class="line">	{% when &#39;12&#39; %}décembre
</span><span class="line">      {% endcase %}
</span><span class="line">      {{ post.date | date: &quot;%Y&quot; }}
</span><span class="line">    &lt;/span&gt; &amp;raquo; &lt;a href=&quot;{{ BASE_PATH }}{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
</span><span class="line">  {% endfor %}
</span><span class="line">&lt;/ul&gt;
</span><span class="line">&lt;!-- delete the last line --&gt;
</span><span class="line">{% endraw %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Octoshape on Ubuntu 14.04]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/13/octoshape-on-ubuntu-14-dot-04/"/>
    
    <updated>2015-06-13T22:26:34+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/13/octoshape-on-ubuntu-14-dot-04</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I installed <a href="http://www.octoshape.com/support/infinite-hd-octoshape-app/">Octoshape player</a> 2 years ago on Ubuntu 12.04.
A year ago, I <a href="https://vincenttam.github.io/blog/2014/08/12/ubuntu-distribution-upgrade-to-14-dot-04/">upgraded the OS to Ubuntu 14.04</a>.</p>

<h2 id="problem">Problem</h2>

<p>I tried running Octoshape streaming service on
<a href="http://demo.octoshape.com/arplayer3/?link=octoshape://streams.octoshape.net/Demo.Trailers_500">a sample test page</a> tonight.  Unluckily, it <em>failed</em> to
work.  On the test page, the output on the right-hand side was similar
to the one listed below.</p>

<pre><code>20:35:57.368: OctoProgressEvent: 0 - Connecting to Octoshape client
20:35:57.382: Player is waiting for a link input (this does not mean
that Octoshape is ready).
20:35:57.509: OctoProgressEvent: 83 - Connecting to Octoshape client
20:35:57.623: OctoProgressEvent: 166 - Connecting to Octoshape client
20:35:57.748: OctoProgressEvent: 249 - Connecting to Octoshape client
20:35:57.880: OctoProgressEvent: 332 - Connecting to Octoshape client
20:35:58.011: OctoProgressEvent: 415 - Connecting to Octoshape client
20:35:58.138: OctoProgressEvent: 498 - Connecting to Octoshape client
20:35:58.271: OctoProgressEvent: 581 - Connecting to Octoshape client
20:35:58.370: OctoProgressEvent: 664 - Connecting to Octoshape client
20:35:58.470: OctoProgressEvent: 747 - Connecting to Octoshape client
20:35:58.574: OctoProgressEvent: 830 - Connecting to Octoshape client
20:35:58.704: OctoProgressEvent: 913 - Connecting to Octoshape client
20:35:58.804: OctoProgressEvent: 996 - Connecting to Octoshape client
20:35:58.808: OctoProgressEvent: 1000 - Connecting to Octoshape client
</code></pre>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>I ran <code>ls</code> in <code>/opt/octoshape</code>, which is the folder in which Octoshape
player had been installed.</p>

<pre class="cliUB"><code>$ pwd
/opt/octoshape
$ ls
eula.rtf                     sua-1011082-0-marker.txt
eula.txt                     sua-1011082-0-module.xml
OctoshapeClient              sua-1011082-0-OctoshapeClientSUA
setup.xml                    sua-1011082-0-OctoshapeClientSUA.sig
sua-1011082-0-confirmed.txt  sua-1011082-0-suapack-versions.txt
sua-1011082-0-dynfiles.zip
</code></pre>

<p>I suspected that the version of Octoshape was too <em>old</em>.</p>

<h2 id="solution">Solution</h2>

<p>I <em>removed the folder</em> where Octoshape was installed, and
<em>re-installed</em> the player again, then it <em>worked</em>.</p>

<hr />
<p>(Added on AUG 3RD, 2015)</p>

<p>This only worked for a while.  <strong>After reboot, it <em>won’t</em> start
again</strong>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[MikTeX Update]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/09/miktex-update/"/>
    
    <updated>2015-06-09T16:41:12+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/09/miktex-update</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>This morning, I tried typing the chemical symbol of carbon dioxide
(CO<sub>2</sub>) in $\rm \LaTeX$, but I <em>wouldn’t</em> like to use
<code>\mathrm</code> in math mode — first, I changed from text mode to math
mode, then in order to type normal font, I used <code>\mathrm</code> to change it
back to “text mode in math mode”.  I did all of these for a little
subscript only.  Clearly, that’s <em>not</em> an elegant way of typesetting
CO<sub>2</sub>.  It <em>didn’t</em> took me long to find out that what I
needed was the package <a href="https://www.ctan.org/pkg/mhchem"><code>mhchem</code></a>.</p>

<h2 id="problem">Problem</h2>

<p>I tried to <code>\usepackage[version=3]{mhchem}</code>, but Mik$\rm \TeX$
complained that the installed version of <code>l3kernel</code> was too <em>old</em>.  As
a result, I opened the package manager, and called the “Update Wizard”
inside.</p>

<picture class="fancybox" title="No update helper found">
  <source srcset="/images/posts/MikTeXUpdate/no_helper460.png" media="(min-width: 460px)" />
  <img alt="update helper disappered?" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/no_helper300.png" />
</picture>

<p><strong>How can I get the packages updated <em>without</em> manually creating
another folder?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>I first clicked “Repository” and then “Synchronize”, but it loaded
slowly, and I finally got <em>nothing</em>.  Then I tried to “Change package
repository”.  I randomly selected an item in the list of remote
package repository, and clicked “Synchronize” again.  What I saw was
still the same.</p>

<p>Then I decided <em>not</em> to include the <code>mhchem</code> package.  I restored the
<code>\ce{CO2}</code> back to <code>CO2</code>, and then I pressed <code>\ll</code> in
<a href="http://vim-latex.sourceforge.net/">$\rm \LaTeX$-Suite</a>.<sup id="fnref:ll"><a href="#fn:ll" class="footnote">1</a></sup>  Then I received <em>unexpected
errors</em> from the $\rm \LaTeX$ compiler.  I then compiled another
document which contained characters with accents, such as ‘à’, ‘é’,
‘ï’, …  I received the same error message in the quickfix window as
well.  Since it’s gone, I’ve retrieved the message from the
corresponding LOG file.<sup id="fnref:log"><a href="#fn:log" class="footnote">2</a></sup></p>

<pre class="cli"><code>(C:\Temp\MikTeXPortable\tex\latex\fontspec\fontspec.cfg)))
(C:\Temp\MikTeXPortable\tex\generic\babel\babel.sty
Package: babel 2008/07/08 v3.8m The Babel package

*************************************
* Local config file bblopts.cfg used
*
(C:\Temp\MikTeXPortable\tex\latex\00miktex\bblopts.cfg
File: bblopts.cfg 2006/07/31 v1.0 MiKTeX 'babel' configuration
)
(C:\Temp\MikTeXPortable\tex\latex\babel-french\frenchb.ldf
Language: frenchb 2015/05/31 v3.1f French support from the babel system

(C:\Temp\MikTeXPortable\tex\generic\babel\babel.def
File: babel.def 2008/07/08 v3.8m Babel common definitions
\babel@savecnt=\count123
\U@D=\dimen139
)

<span class="err">! Package frenchb.ldf Error: frenchb requires babel v.3.9i.
(frenchb.ldf)                Aborting here.</span>

See the frenchb.ldf package documentation for explanation.
Type  H &lt;return&gt;  for immediate help.
 ...

l.116          {Please upgrade Babel!}

<span class="HLCode">Please upgrade Babel!</span>
</code></pre>

<h2 id="a-nearly-successful-update">A nearly successful update</h2>

<p>From Google, I’ve learnt to “Update MikTeX” directly from the little
icon at the lower right-hand corner of the screen.  Then I directly
clicked the “Next &gt;” button, and Mik$\rm \TeX$ tried connecting the
manually chosen remote.  Unluckily, this <em>failed</em> and I got an error
mesage like <em>Permission denied</em>.  I tried searching “miktex permission
denied” on Google, but I <em>didn’t</em> understand what I’d found.</p>

<h2 id="solution">Solution</h2>

<p>As shown in the screenshot below, I checked the first two radio
buttons so as to get updated packages from the nearest package
repository.</p>

<picture class="fancybox" title="Update MikTeX packages">
  <source srcset="/images/posts/MikTeXUpdate/update513.png" media="(min-width: 513px)" />
  <img alt="update miktex packages" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/update300.png" />
</picture>

<p>After clicking “Next &gt;”, things went smooth luckily.</p>

<picture class="fancybox" title="Downloading updates from remotes">
  <source srcset="/images/posts/MikTeXUpdate/download513.jpg" media="(min-width: 513px)" />
  <img alt="miktex package updates downloading" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/download300.jpg" />
</picture>

<p>After the update had completed, the <code>babel</code> package had been upgraded
from version 3.8 to 3.9i.  With the correct syntax, I could finally
use <code>babel</code> and <code>mhchem</code>.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I often forget the command for optimizing JPEG images.  This evening,
while I was writing this post, I googled “jpegtran command”, and I
issued</p>

<pre class="cli"><code>jpegtran -optimize input.jpg &gt; output.jpg
</code></pre>

<p>after I’d read the command example from <a href="http://junalontherun.com/2009/07/15/optimize-all-jpeg-images-with-jpegtran-utility/">this page</a>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:ll">

      <p><code>\ll</code> is the default keystroke for compiling a PDF document from
the $\rm \LaTeX$ source code in $\rm \LaTeX$-Suite, which is a
<a href="http://www.vim.org">Vim</a> plugin for writing in $\rm \LaTeX$ efficiently. <a href="#fnref:ll" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:log">

      <p>You may view the complete LOG file <a href="https://vincenttam.github.io/downloads/1eDoc.log">here</a>. <a href="#fnref:log" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[MS Word Hanged]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/09/ms-word-hanged/"/>
    
    <updated>2015-06-09T15:59:15+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/09/ms-word-hanged</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried editing in M$ Word, but <em>failed</em>.</p>

<picture class="fancybox" title="M$ Word not responding">
  <source srcset="/images/posts/MSWordHanged/word_hang926.png" media="(min-width: 926px)" />
  <img alt="M$ Word hanged" src="https://vincenttam.github.io/images/posts/MSWordHanged/word_hang250.png" />
</picture>

<h2 id="solution">Solution</h2>

<p>The solution is extremely simple: <em>don’t</em> use M$ Office if it’s too
heavy for your computer — use something more lightweight: a text
editor with a typesetting engine.</p>

<h3 id="choose-your-favourite-editors">Choose your favourite editors</h3>

<p>I use <a href="http://www.vim.org">Vim</a> every day as a text editor.  I tried <a href="http://www.gnu.org/software/emacs/">EMACS</a>. Though I
<em>can’t</em> remember two sets of keystrokes, the latter is still useful
when you need to browse <code>info</code> pages on *nix.</p>

<h3 id="typesetting-engines">Typesetting engines</h3>

<ol>
  <li>
    <p><a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a> and <a href="http://pandoc.org/">pandoc</a></p>

    <p>For simple documents which have <em>little</em> variation in styles, such
 as blog entries and some homework essays.</p>
  </li>
  <li>
    <p>$\rm \LaTeX$</p>

    <p>For more complicated documents like lab report, documents
 containing math expressions, etc.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[W3C Validator and SVGPan]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/01/w3c-validator-and-svgpan/"/>
    
    <updated>2015-06-01T18:08:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/01/w3c-validator-and-svgpan</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Similar to that of my recent post
<a href="https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages/"><em>Added <abbr title="World Wide Web Consortium">W3C</abbr> Validated Logos to Some Pages</em></a>—to get my SVG code
validated by <abbr title="World Wide Web Consortium">W3C</abbr>.</p>

<p>I’m now using <a href="https://www.cyberz.org/blog/2009/12/08/svgpan-a-javascript-svg-panzoomdrag-library/">SVGPan</a> for the zoom and drag functionality in SVG
images generated from PDF files which are generated by <code>xelatex</code> from
$\rm \LaTeX$ source code for <a href="http://www.texample.net/tikz/">TikZ</a> pictures.<sup id="fnref:pp_svgpan"><a href="#fn:pp_svgpan" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>I submited my SVG file to the <abbr title="World Wide Web Consortium">W3C</abbr>’s validator, which showed me one
error.  To illustrate this, I used an sample SVG in the official web
site of SVGPan as an example.</p>

<picture class="fancybox" title="SVGPan's SVG validation test result">
<source srcset="/images/posts/W3CSVG/err1292.png" media="(min-width: 1292px)" />
<source srcset="/images/posts/W3CSVG/err471.png" media="(min-width: 471px)" />
<img alt="SVGPan's SVG validation fails" src="https://vincenttam.github.io/images/posts/W3CSVG/err300.png" />
</picture>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Googling for something likes “svg script type” helps.  As can be seen,
the last <code>&gt;</code> is underlined, so I guessed that this kind of
self-closing tags <em>wouldn’t</em> the test.  Just like HTML, change this to
<code>&lt;script ...&gt;&lt;/script&gt;</code>.  From what I’d seen online, I set the <code>type</code>
attribute to <code>text/ecmascript</code>, and luckily this <em>works</em>.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>For valid SVG files which embed SVGPan, the following items are
necessary:</p>

<ol>
  <li>A type declaration at the very beginning</li>
  <li>A <code>&lt;script&gt;</code> tag with appropriate <code>xlink:href</code> and <code>type</code>
attributes.</li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp_svgpan">

      <p>Refer to <a href="https://vincenttam.github.io/blog/2014/08/02/zooming-svg-in-web-browsers/"><em>Zooming SVG in Web Browsers</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp_svgpan" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Fixed a JavaScript TypeError]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/01/fixed-a-javascript-typeerror/"/>
    
    <updated>2015-06-01T17:22:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/01/fixed-a-javascript-typeerror</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I included <a href="https://vincenttam.github.io/blog/2015/04/11/an-image-with-changeable-size/">an image with changeable size</a> in a post written about
two months ago.</p>

<h3 id="howwhy-does-this-work">How/Why does this work?</h3>

<ul>
  <li>In brief: View <code>/javascripts/svg_resize_bar.js</code>.</li>
  <li>For details: click the hyperlink above.</li>
</ul>

<h2 id="problem">Problem</h2>

<picture class="fancybox" title="A error received from Firefox
  console">
  <source srcset="/images/posts/SVGResizeErr/null_bar558.png" media="(min-width: 558px)" />
  <img alt="FF throws TypeError" src="https://vincenttam.github.io/images/posts/SVGResizeErr/null_bar270.png" />
</picture>

<p>When I browsed any pages except that post which contains the
changeable SVG image, the above <code>TypeError</code> was thrown.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>From the error message <code>TypeError: bar is null</code> and the filename
<code>svg_resize_bar.js</code> on the right, an ordinary user who knows how to
write if-else statements should be able to solve this in a few
seconds: surround the part <code>bar.onchange = function () { ... }</code> by the
if-else statement <code>if (bar != null ) { ... }</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Validate HTML Code for SVG Fallbacks to Text]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/30/validate-html-code-for-svg-fallbacks-to-text/"/>
    
    <updated>2015-05-30T22:23:37+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/30/validate-html-code-for-svg-fallbacks-to-text</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>After I’d written <a href="https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages/"><em>Added <abbr title="World Wide Web Consortium">W3C</abbr> Validated Logos to Some Pages</em></a>, I
saw that in the site, there’s still two pages which <em>hadn’t</em> been
checked by the <abbr title="World Wide Web Consortium">W3C</abbr>’s validators.</p>

<h2 id="problem">Problem</h2>

<p>To allow SVG fallbacks to text, I viewed the source code for
<a href="http://www.w3schools.com/svg/tryit.asp?filename=trysvg_myfirst">the SVG example from W3Schools</a>.  The fallback message was
simply included inside a <code>&lt;svg&gt;</code> tag just like a <code>&lt;p&gt;</code> tag.  I applied
this technique to <code>source/downloads/code/SVGViewBox/viewBox1.html</code>.</p>

<p>Then I uploaded that HTML file to the <abbr title="World Wide Web Consortium">W3C</abbr>’s HTML validator, which
complained such an inclusion of text.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>After that, I googled “svg fallback text” using the encrypted version
of the search engine.  Luckily, <a href="http://stackoverflow.com/a/26249728">the second answer</a> to the
Stack Overflow question, which appeared at the top of the list of
search results, is useful.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>To get an HTML page which consists of a <code>&lt;foreignObject&gt;</code> tag inside
an <code>&lt;svg&gt;</code> tag validated by the <abbr title="World Wide Web Consortium">W3C</abbr> HTML validator, it’s obligatory to
specify the dimensions of the <code>&lt;foreignObject&gt;</code> tag.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Fixed Disqus Comments When Loaded With HTTPS]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/26/fixed-disqus-comments-when-loaded-with-https/"/>
    
    <updated>2015-05-26T22:12:24+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/26/fixed-disqus-comments-when-loaded-with-https</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<ol>
  <li><a href="https://konklone.com/post/github-pages-now-sorta-supports-https-so-use-it">GitHub Pages now supports HTTPS</a>.</li>
  <li>I saw that Google search showed the HTTP version of the hyperlinks.</li>
  <li>I want to convert add the existing “http://” to “https://”.</li>
</ol>

<h2 id="problem">Problem</h2>

<ol>
  <li>I changed “http://…” to “https://…” in the Admin settings for
the disqus site of this blog.</li>
  <li>The original comments <em>disappeared</em>!</li>
</ol>

<p><strong>How can I get back the original comments and correct the URLs of the
links to my blog articles on Disqus?</strong></p>

<!-- more -->

<h2 id="failed-attempt">Failed attempt</h2>

<p>I tried to use the “Domain Migration Wizard”.  <em>Lacking</em> knowledge in
terms like “host”, I just clicked the button to proceed even though I
saw that the original host name was recognised as “http://https://.”.</p>

<p>In the end, I messed up the URLs of the forum threads.  After using
the “Wizard”, I waited for about 20 hours, and then I saw that
hundreds of links started with
“http://https://vincentam.githhub.io/…”.</p>

<p>I read a lot of articles from the Web, but the problem that they’re
facing <em>weren’t</em> the same as mine.</p>

<h2 id="solution">Solution</h2>

<p>I finally decided to use the “URL Mapper”.  When I read the official
onine help page about this migration tool, I realised that I should
give it a try.  The moment that I opened the generated CSV file in a
spreadsheet program, I knew that I had chosen the right way because
this gave me more control over the URL of the posts on my blog.</p>

<p>I also added a script copied from <a href="https://gist.github.com/konklone/9968713">konklone’s Gist</a> for using
HTTPS by defalut.</p>

<p>In the official documentation, a spreadsheet program is used to modify
CSV files.  In fact, if one knows regular expression, one would do
batch text editing using some tools available in the CLI.  For
instance, I used Vim to do this last night.</p>

<p>This morning, I discovered that the URLs in the box “Promoted
Discovery” were <em>still</em> wrong!  This afternoon, I read a lot of
related websites, just like what I did yesterday.  I <em>wasn’t</em> sure
what to do next.  The URLs shown in the “Admin” page were finally
correct, but those hyperlinks on the pages “View in discussion” on the
white-backgrounded Disqus site <em>weren’t</em>.</p>

<p>Then I worked on something else, and at about 8pm tonight, all the
URLs have finally been corrected.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I need to be patient and work on other things first after I’ve already
tried all possible ways to solve the problem.</p>

<h2 id="final-remarks">Final remarks</h2>

<p>During the site migration, one <em>couldn’t</em> see the comments and the
“Also on” box took one to <em>wrong</em> pages.  I apologize for any
inconvenience caused.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Added W3C Validated Logos to Some Pages]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages/"/>
    
    <updated>2015-05-23T22:42:17+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/23/added-w3c-validated-logos-to-some-pages</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>The web pages under <code>/downloads/code/</code> <em>don’t</em> conform to the <abbr title="World Wide Web Consortium">W3C</abbr>’s
standards.  This afternoon, after I had rewritten the code and passed
the HTML 4.01 Strict Test and CSS3 Test, I was given the code to embed
the <a href="http://www.w3.org/QA/Tools/Icons">validation icons</a>.<sup id="fnref:samp_pic"><a href="#fn:samp_pic" class="footnote">1</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HTML code for embedding the validation icon for HTML 4.01 Strict</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;p&gt;</span>
</span><span class="line">  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://validator.w3.org/check?uri=referer&quot;</span><span class="nt">&gt;&lt;img</span>
</span><span class="line">    <span class="na">src=</span><span class="s">&quot;http://www.w3.org/Icons/valid-html401&quot;</span> <span class="na">alt=</span><span class="s">&quot;Valid HTML 4.01 Strict&quot;</span>
</span><span class="line">    <span class="na">height=</span><span class="s">&quot;31&quot;</span> <span class="na">width=</span><span class="s">&quot;88&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class="line"><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="problem">Problem</h2>

<p>Unluckily, when I clicked on the icon for re-validation of the site, I
<em>got</em> a 404 error.</p>

<picture class="fancybox" title="404 Not Found">
  <source srcset="/images/posts/W3C/err497.png" media="(min-width: 497px)" />
  <img alt="404 not found" src="https://vincenttam.github.io/images/posts/W3C/err300.png" />
</picture>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>I <em>wasn’t</em> so patient to read the <a href="http://validator.w3.org/docs/help.html#faq-referer"><abbr title="Frequently Asked Questions">FAQ</abbr></a> of the <abbr title="World Wide Web Consortium">W3C</abbr>.  I googled “w3c
validator referer”.  Realising that the web pages hosted on the
official website were similar to the <abbr title="Frequently Asked Questions">FAQ</abbr>, I clicked on the first blog
article that I saw.<sup id="fnref:1st_blog"><a href="#fn:1st_blog" class="footnote">2</a></sup>  I still <em>didn’t</em> know what’s wrong
with my hyperlink on the validation icon.</p>

<h2 id="solution">Solution</h2>

<p>I refined my search by added the phrase “requested URL /check”
<em>surrounded by double quotes</em> to the query string.  Then, only four
web pages were displayed.  I glimpsed a mailing list and I <em>didn’t</em>
found it useful.  Although I believed that the hyperlink for a forum
thread <em>wouldn’t</em> help me, I clicked it.<sup id="fnref:forum"><a href="#fn:forum" class="footnote">3</a></sup>  It was in 2007, and
the situtation <em>differed</em> much from this one.  I clicked on an
old-versioned hyperlink to the <abbr title="World Wide Web Consortium">W3C</abbr>’s HTML validator, and <em>it worked</em>.
After that, I “inspected this element” and changed the destination to
the current URL of the validator.  It worked again.</p>

<p>I compared the code found on the forum post with mine, and I
discovered that the only difference is the <code>s</code> in front of the domain
name <code>validator.w3.org</code>.  Knowing that some users may view the site
using the HTTP protocol, I finally removed the beginning <code>https:</code> in
the <code>href</code> attribute in that hyperlink.  Now users may re-validate the
page with a simple click on the validation icons.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>Through the validation process, I’ve learnt some HTML.</p>

<ol>
  <li>Always begin an HTML file with <code>&lt;!DOCTYPE HTML ...&gt;</code>.</li>
  <li>Add a <code>lang</code> attribute in <code>&lt;html&gt;</code> for internationalization.</li>
  <li>Add a <code>&lt;meta charset="UTF-8"&gt;</code> tag to tell the validator the
character encoding of the page.</li>
  <li>A <code>&lt;title&gt;</code> inside the <code>&lt;head&gt;</code> is <em>necessary</em>: without this, the
vaildator <em>won’t</em> regard the <code>&lt;head&gt;</code> as closed.</li>
  <li>
    <p>In HTML 4.01 or earlier, avoid using a slash <code>/</code> before <code>&gt;</code>.</p>

    <p>i.e. Use <code>&lt;img ... foo="bar"&gt;</code> instead of <code>&lt;img ... foo="bar" /&gt;</code>,
 <code>&lt;br&gt;</code> instead of <code>&lt;br/&gt;</code>, etc.</p>
  </li>
  <li>
    <p>Images in HTML 4.01 Strict:</p>

    <ul>
      <li>an alternate text is needed</li>
      <li>specify the dimenstions of the picture (i.e. <code>height="XX"
  witdth="YY"</code>)</li>
    </ul>
  </li>
  <li>Inline elements in HTML 4.01 Strict need to be wrapped by
block-level elements like <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, etc.</li>
  <li>Forms in HTML 4.01 Strict need an <code>action</code>.</li>
  <li>Use the <code>charset</code> attribute in <code>&lt;script&gt;</code> tags only for external
scripts.</li>
  <li>Using a hyperlink to <code>http://validator.w3.org/check?uri=referer</code> is
more convenient than the manual way.</li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:samp_pic">
      <p><a href="https://vincenttam.github.io/images/posts/W3C/valid_code.png">Here</a>’s a sample screenshot. <a href="#fnref:samp_pic" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1st_blog">

      <p><a href="http://bryanhadaway.com/how-to-link-to-the-w3c-css3-validation-page/"><em>How to Link to the W3C CSS3 Validation Page</em></a> on <em>Bryan
Hadaway’s Web + Tech Blog</em>. <a href="#fnref:1st_blog" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:forum">

      <p><a href="http://t29233.org-w3c-validator.w3ctalk.info/what-happend-to-http-validator-w3-org-check-referer-t29233.html#91166"><em>What happend to http://validator.w3.org/check/referer ?</em></a>
on <em>W3c Discussion Forums</em>. <a href="#fnref:forum" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Comparison of Similar Horizontal Paddings in $\rm \LaTeX$ Math Mode]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/16/a-comparison-of-similar-horizontal-paddings-in-latex-math-mode/"/>
    
    <updated>2015-05-16T22:12:58+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/16/a-comparison-of-similar-horizontal-paddings-in-latex-math-mode</id>
    
      <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>I prepared this little series of screenshots two years ago.  When
these pictures were made, I <em>didn’t</em> know anything about <a href="http://fancyapps.com/fancybox/">fancybox</a>,
so I just shared it using Ubuntu One, which is now <em>dead</em>.<sup id="fnref:ub1dead"><a href="#fn:ub1dead" class="footnote">1</a></sup></p>

<p>Now, with fancybox, the effects of these commands can be compared
below.  Click on the left and right arrows in the pop-up window to see
the little difference in spacing.</p>

<h2 id="comparison-and-conclusion">Comparison and conclusion</h2>

<picture class="fancybox" title="1. Original equal sign">
  <source srcset="/images/posts/flalign_spacing/1_crop.png" media="(min-width: 940px)" />
  <img alt="1. Original equal sign" src="https://vincenttam.github.io/images/posts/flalign_spacing/1_crop300.png" />
</picture>

<picture class="fancybox noscr" title="2. &quot;\quad&quot; and &quot;\,&quot;">
  <source srcset="/images/posts/flalign_spacing/2_crop.png" media="(min-width: 940px)" />
  <img alt="2. &quot;\quad&quot; and &quot;\,&quot;" src="https://vincenttam.github.io/images/posts/flalign_spacing/2_crop300.png" />
</picture>

<picture class="fancybox noscr" title="3. &quot;\quad&quot; and &quot;\:&quot;">
  <source srcset="/images/posts/flalign_spacing/3_crop.png" media="(min-width: 940px)" />
  <img alt="3. &quot;\quad&quot; and &quot;\:&quot;" src="https://vincenttam.github.io/images/posts/flalign_spacing/3_crop300.png" />
</picture>

<picture class="fancybox noscr" title="4. &quot;\quad&quot; and &quot;\;&quot;">
  <source srcset="/images/posts/flalign_spacing/4_crop.png" media="(min-width: 940px)" />
  <img alt="4. &quot;\quad&quot; and &quot;\;&quot;" src="https://vincenttam.github.io/images/posts/flalign_spacing/4_crop300.png" />
</picture>

<!-- more -->

<p>As can be seen from the slideshow of pictures, the fourth figure
resembles the first one the most.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve found a quicker way to crop images.  In the past, using <a href="http://www.gimp.org">GIMP</a>
for shrinking pictures would result in an image size larger than using
<a href="http://www.imagemagick.org">ImageMagick</a>.  However, I <em>didn’t</em> know a way to get the coordinates
of the image file inside an image viewer, so I <em>couldn’t</em> supply them
quickly to ImageMagick’s command line utility.  Now, realising that
GIMP can be <em>regarded</em> as an image viewer, this problem can be quickly
solved.</p>

<p>Finally, with my experience of writing for loops in bash, it <em>didn’t</em>
took me long to type this loop.<sup id="fnref:pp_for"><a href="#fn:pp_for" class="footnote">2</a></sup></p>

<pre class="cliUB"><code>$ for i in {1..4}; do convert $i.png -crop 940x615+160+370 $i\_crop.png; done
</code></pre>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:ub1dead">

      <p>For the link to the related post in the offical blog, you may go
to the <a href="https://vincenttam.github.io/blog/2015/05/06/github-page-build-failure/#fn:ub1dead">first footnote</a> of one of my recent posts in
<em>Blog 1</em>: GitHub Page Build Failure. <a href="#fnref:ub1dead" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp_for">

      <p>Refer to
<a href="https://vincenttam.github.io/blog/2015/05/16/concatenate-loop-variables-value-and-a-string-in-bash/">Concatenate Loop Variable’s Value and a String in Bash</a>
in <em>Blog 1</em> if you want to know when, why and how I know to put a
backslash ‘\’ behind the loop variable. <a href="#fnref:pp_for" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
