<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog 1]]></title>
  <link href="https://vincenttam.github.io/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-07T22:22:30+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[COM Surrogate Problem]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/07/com-surrogate-problem/"/>
    
    <updated>2016-04-07T22:14:30+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/07/com-surrogate-problem</id>
    
      <content type="html"><![CDATA[<p>A few days ago, I saw this dialog box on M$ Win* 7.  Occupied by my
maths, I <em>won’t</em> do anything for this technical problem.  You may
perform a Google search for “COM Surrogate has stopped working” in
order to know more about this problem.</p>

<picture class="fancybox" title="COM Surrogate has stopped working">
  <source srcset="/images/posts/COMSurrogate/stop-working.png" media="(min-width: 366px)" /> 
  <img alt="COM Surrogate has stopped working" width="300" src="/images/posts/COMSurrogate/stop-working300.png" />
</picture>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[No Schauder Base in $\ell^\infty$]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/05/no-schauder-base-in-l-infty/"/>
    
    <updated>2016-04-05T19:10:52+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/05/no-schauder-base-in-l-infty</id>
    
      <content type="html"><![CDATA[<p>In <a href="https://vincenttam.github.io/blog/2016/04/02/l-infty-is-not-separable/">a recent post about $\ell^\infty$</a>, I’ve said that there’s a
more direct way to show that a Schauder base <em>doesn’t</em> exist in
$\ell^\infty$.  This proof can be
<a href="http://math.stackexchange.com/a/869754">found on Math Stack Exchange</a>.  It uses three facts.</p>

<ol>
  <li>$c_0$ is closed.</li>
  <li>A result deduced from Hahn–Banach Theorem about a non-zero linear
functional defined on a closed subspace of a normed space.</li>
  <li>$x^*$ is continous.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Oneline Perl]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/04/oneline-perl/"/>
    
    <updated>2016-04-04T00:47:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/04/oneline-perl</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>Knowing some regular expressions in Vim, I hope to apply these
concepts to Perl so that I can search and replace some simple strings
directly in base <em>without</em> having to open the editor.</p>

<p>As a Vim user, the class of special characters in Perl is more
<em>natural</em> than that of <code>sed</code>.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages/">the previous post</a>, the list of Git commit messages containing
the string “HTTPS” is the main focus.  However, the alignment of this
list <em>isn’t</em> good: in the column representing the day, the data can be
either one or two digit.  Though I can still extract information with
<code>awk '{print $[col_num]}'</code>, it’s better to fix the alignment.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<!-- more -->

<h2 id="start-using-perl">Start using Perl</h2>

<p>Searching “perl intro” online, one can easily find some basic Perl
scripts.  I tried to issue some simple one-line Perl command to save
time, but I <em>couldn’t</em> easily find them.  Thanks to
<a href="http://articles.mongueurs.net/magazines/linuxmag50.html">a webpage by Philippe Bruhat</a>, I managed to starting using
Perl.  I jot them down here.</p>

<pre class="cliUB"><code>$ perl -e 'print "hello \n"'  # single quote outside
hello
$ perl -e "\$str='abc'; print \$str;"  # escape $, no EOL
abc
$ perl -e "$str='test'; print $str.'\n';"  # not desired
test\n
$ perl -e '$str="test"; print $str."\n";'  # want newlne
test
</code></pre>

<p>The <code>-e</code> flag above stands for “execute”.</p>

<h2 id="read-from-external-command">Read from external command</h2>

<p>Unluckily, I <em>didn’t</em> know how to use <code>system()</code> nor backticks to pass
output of a command into Perl.  After trying a few search keywords,
“perl oneline read command output” worked best for me.  It was quite
<em>uncommon</em> that I found the <em>eighth</em> result useful.  In the article
<a href="http://www.theperlreview.com/articles/one-liners.html"><em>Perl One-liners</em></a>, I found out the answer.</p>

<pre class="cliUB"><code>$ for (( i = 1; i &lt;= 10; i++ )); do
  echo $i
  done | perl -e 'while (&lt;&gt;) {s/(?&lt;!\d)\d{1}(?!\d)/0$&amp;/; print $_}'
01
02
03
04
05
06
07
08
09
10
</code></pre>

<p>In fact, the flag <code>-n</code> can be used to replace the <code>while (&lt;&gt;) {...}</code>
loop.  The <code>-p</code> flag has the function of <code>-n</code> but <em>also</em> prints the
output.  I learnt them from <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">Git manual web page for git-log</a>.</p>

<h2 id="solution">Solution</h2>

<p>Combine the above observations together.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s" \
  | perl -pe 's/(?&lt;=\u\l\l )\d{1}(?= )/0$&amp;/'
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 08 00:45:02 2016 +0800 A new article about Flair, Octopress and 
HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Perl: Apart from the above syntax, I’ve also learnt to use <code>$&amp;</code> and
<code>\b</code> in the replacement.  This is the Perl counterpart of <code>&amp;</code> and
<code>\&lt;</code> or <code>\&gt;</code> in Vim respectively.</li>
  <li>Git: In <code>git log</code> and <code>git show</code>,
    <ul>
      <li><code>--name-only</code>: suppress the diff hunk</li>
      <li><code>--pretty=format:</code> display nothing</li>
      <li><code>format</code> vs <code>tformat</code>: <code>t</code> stands for “terminator” (a.k.a. EOL)</li>
    </ul>

    <p>Each of each flags seems to be useless.  Nevertheless, <em>when
 combined together</em>, they help extract the edited files in a
 particular commit.</p>
  </li>
  <li>
    <p>Posting long commands in a blog entry</p>

    <p>From the two codeblocks explaining the difference between <code>format</code>
 and <code>tformat</code> in the Git manual, I understand that it’s better to
 end each line with a backslash, then continue with the command.
 In bash,  a <code>&gt;</code> is then automatically inserted at the beginning of
 each line.  This is carried from the shell to the source file of
 the blog article by copy and paste.  I used to think that it’s
 good to keep this so that this and the Ubuntu font will give a
 sense of reality to the reader.  However, this also causes
 inconvenience to those who want to try this command.  From now on,
 I <em>won’t</em> include this character anymore at the beginning of a
 long command exceeding 80 characters.  I will replace it with a
 white space instead.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Searching Git Commit Messages]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages/"/>
    
    <updated>2016-04-03T19:42:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The solution for the problem posed in the title is pretty simple.  For
instance, I want to find all Git commits whose commit message contains
“HTTPS”.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS"
commit 7400582e268f4a5b776269cf0cc08c04886a4769
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Sun Mar 20 20:19:47 2016 +0800

    Updated my Rakefile with HTTPS

commit b6f4f1fc872affc1107b330042d7b43b45e60595
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Mon Feb 8 00:45:02 2016 +0800

    A new article about Flair, Octopress and HTTPS
</code></pre>

<p>However, I think that the output <em>isn’t</em> compact enough.  I would like
to display the following information.</p>

<pre class="cliUB"><code>&lt;short SHA1&gt; &lt;commit time&gt; &lt;commit message title&gt;
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Some pretty formats in Git
    <ul>
      <li><code>%h</code>: short SHA1</li>
      <li><code>%H</code>: full SHA1</li>
      <li><code>%an</code>: author name</li>
      <li><code>%cd</code>: commit date</li>
      <li><code>%s</code>: subject</li>
      <li><code>%b</code>: body</li>
    </ul>
  </li>
  <li>Automatically escape special characters in Vim
    <ul>
      <li>
        <p>Adding a backslash before <em>each</em> <code>%</code> in</p>

        <pre class="cliUB"><code>  :r !git log -2 --grep="HTTPS" --pretty="\%h \%cd \%s"
</code></pre>

        <p>is tedious and prone to errors.</p>
      </li>
      <li>
        <p>A more convenient way</p>

        <pre class="cliUB"><code>  :exec escape('r !git log -2 --grep="HTTPS" --pretty="%h %cd %s"', '%')
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">

      <p>To avoid junk mail, I replaced the first four letters of my email
address with <code>fake</code>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[$ll^\infty$ Is Not Separable]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/02/l-infty-is-not-separable/"/>
    
    <updated>2016-04-02T17:00:13+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/02/l-infty-is-not-separable</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>This Wednesday, I read a proof about the non-separability of
$\ell^\infty$ spaces.  To simplify things, I assume that it’s defined
on sequences.</p>

<div class="myeqn">
\[
  L^\infty \triangleq \{ (x_n)_{n \in \N} \mid \exists\,M \ge 0
  \text{ such that } \forall\,n \in \N, \abs{x_n} \le M \}
\]
</div>

<p>I have written down the uncountable set (see Cantor’s diagonal
argument)</p>

<div class="myeqn">
\[
  D \triangleq \{ (x_n)_{n \in \N} \mid \forall\,n \in \N, x_n=\pm1 \}
\]
</div>

<p>in my notes.  I understand</p>

<div class="myeqn">
\[
  B(x,1) \cap B(y,1) = \varnothing \quad \forall \, x,y \in D
  \text{ with } x \ne y.
\]
</div>

<h2 id="problem">Problem</h2>

<p>Then, my teacher said that the reason for the non-separability of
$\ell^\infty$ was like the Pigeon-Hole Principle.  I got puzzled when
I was revising the proof.  In fact, in the above equation, an element
in a <em>dense</em> set $C$ can be found in each open ball $B(x,1)$.  Since
the open balls $B(x,1)$ are <em>disjoint</em>, $C$ has <em>uncountably</em> many
elements.  Hence, $\ell^\infty$ is non-separable.</p>

<p>One knows that if a space is separable, we <em>can’t</em> insert a
non-separable subspace into it.  The above property of $\ell^\infty$
serves as a concrete example of this fact.</p>

<p>It’s easy to show that a space having a Schauder basis is separable.
Thus, we can conclude that $\ell^\infty$ <em>don’t</em> possess any Schauder
basis.</p>

<p>In fact, we have a more <em>direct</em> approach to the absence of Schauder
basis in $\ell^\infty$.  This will be discussed in my next post.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Gems on Which TLDR Pages Depend]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/29/gems-on-which-tldr-pages-depend/"/>
    
    <updated>2016-03-29T19:13:20+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/29/gems-on-which-tldr-pages-depend</id>
    
      <content type="html"><![CDATA[<p>Tonight, I’ve installed <a href="http://tldr-pages.github.io/">TLDR pages</a> by typing <code>gem install
tldrb</code> since I <em>don’t</em> have <code>npm</code> installed.</p>

<p>Here’s a list of gems actually fetched.</p>

<ol>
  <li><code>bales-0.1.2</code></li>
  <li><code>unf-0.2.0.beta2</code></li>
  <li><code>domain_name-0.5.20160310</code></li>
  <li><code>http-cookie-1.0.2</code></li>
  <li><code>mime-types-2.99.1</code></li>
  <li><code>netrc-0.11.0</code></li>
  <li><code>rest-client-1.8.0</code></li>
  <li><code>tldrb-0.0.2</code></li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[An Invalid Claim by the Government]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/27/an-invalid-claim-by-the-government/"/>
    
    <updated>2016-03-27T14:23:05+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/27/an-invalid-claim-by-the-government</id>
    
      <content type="html"><![CDATA[<p>I have viewed the Chinese version of the homepage of
<a href="http://www.cedb.gov.hk/chi/about/content.htm">the Commerce and Economic Development Bureau</a>.  I clicked on the
validation icon for HTML 4.01 at the lower right-hand corner.</p>

<picture class="fancybox" title="home page of gov webpage">
  <source srcset="/images/posts/W3CInvalid/cedb1.png" media="(min-width: 900px)" /> 
  <img alt="home page of gov webpage" width="300" src="https://vincenttam.github.io/images/posts/W3CInvalid/cedb1.png" />
</picture>

<p>To my surprise, an error was produced.</p>

<picture class="fancybox" title="W3C validator shows error">
  <source srcset="/images/posts/W3CInvalid/cedb2.png" media="(min-width: 900px)" /> 
  <img alt="W3C validator shows error" width="300" src="https://vincenttam.github.io/images/posts/W3CInvalid/cedb2.png" />
</picture>

<p>Lacking time to write an email with good grammar to the authories, I
am waiting for someone to notice this error and I am looking forward
to seeing that this problem will be rectified.</p>

<p>To know more about the usage of the W3C validation icons, you may go
to <a href="https://validator.w3.org/docs/help.html#icon-invalidpage">the FAQ for the validation service</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Missing OS (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/26/missing-os-2/"/>
    
    <updated>2016-03-26T21:48:09+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/26/missing-os-2</id>
    
      <content type="html"><![CDATA[<p>I saw a similar error <em>again</em>.  After pressing any key, the M$ Win*
logo appeared.  I <em>don’t</em> think that I’ll find out anything about this
error since I’ve other things to do.</p>

<picture class="fancybox" title="No operating system found">
  <source srcset="/images/posts/BoD/20160322-125447.jpg" media="(min-width: 3270px)" /> 
  <img alt="No operating system found" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160322-125447s.jpg" />
</picture>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Approximation of a Bounded Simple Function by a Continuous Function]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/21/approximation-of-a-bounded-simple-function-by-a-continuous-function/"/>
    
    <updated>2016-03-21T10:12:06+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/21/approximation-of-a-bounded-simple-function-by-a-continuous-function</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Today, I was puzzled by a <em>remark</em> of a proof that a simple function
$f:[a,b] \to \R$ is equal to a step function $\psi:[a,b] \to \R$
(resp. a continuous function $g:[a,b] \to \R$) except on a set of
arbitrarily small measure $\epsilon$.</p>

<blockquote>
  <p>If $m \le f(x) \le M \;\forall\, x\in [a,b]$, then $\bar{\psi}
\triangleq (m \vee \psi) \wedge M$ and $\bar{g} \triangleq (m \vee
g) \wedge M$ are step function and continuous function which satisfy
$m \le \bar{\psi}$ and $m \le \bar{g} \le M$ so that $f =
\bar{\psi}$ and $f = \bar{g}$ except on a set of measure less than
$\epsilon$ respectively.</p>
</blockquote>

<p>I can verify the above remark, but I wonder <em>why</em> we need to define
$\bar{\psi}$ and $\bar{g}$ so as to guarantee that they are bounded
below and above by $m$ and $M$ respectively.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Write</p>

<div class="myeqn">
\[
  f = \sum_{j = 1}^m a_j \chi_{E_j \cap [a,b]},
\]
</div>

<p><span class="myeqn">
where $E_j$ is measurable for each $j = 1,\dots,m$, so that we can
consider $E_j$.  Note that the $E_j$'s are not necessarily disjoint,
but who cares?  By drawing a simple figure of $E_j \cap [a,b]$ and
$U_j$, which is a finite disjoint union of open intervals obtained by
applying Littlewood's First Principle, I realised that I should try
constructing a simple function $f$ while focusing on $(E_j \cap [a,b])
\triangle U_j$.
</span></p>

<p>In the proof, to deal with the summation sign, we use a union sign.</p>

<div class="myeqn">
\[
  f = \psi \triangleq \sum_{j = 1}^m a_j \chi_{U_j} \text{ except on }
  \bigcup_{j = 1}^m [(E_j \cap [a,b]) \triangle U_j]
\]
</div>

<p>If we’re given that $m \le f \le M$, to find <span class="myeqn">$x \in \bigcup_{j = 1}^m [(E_j \cap [a,b]) \triangle
U_j]$</span> so that $\psi(x) &lt; m$ or $\psi(x) &gt; M$, we need to have
<em>overlapping</em> of <span class="myeqn">$E_i \cap [a,b]$ and
$E_j \cap [a,b]$, so that $\chi_{(E_i \cap [a,b]) \triangle U_i} +
\chi_{(E_j \cap [a,b]) \triangle U_j}$ will give us something
interesting.</span></p>

<p>To see <em>necessity</em> of the introduction of $\bar{\psi}$, consider <span class="myeqn">$f \triangleq \chi_{(0,1)} + \chi_{(1,2)}$
and $\psi \triangleq \chi_{[0,1]} + \chi_{[1,2]}$.  Then $f = \psi$
except on $\{0,1,2\}$ and $0 \le f \le 1$, but $\psi(1) = 2
&gt; 1$.</span>  One can easily transform a step function into a
piecewise linear (i.e. continuous) function $g$.</p>

<h2 id="remarks">Remarks</h2>

<p>It’s very difficult for a function to be continuous.  The result
provides a step for proving <a href="https://en.wikipedia.org/wiki/Lusin's_theorem">Lusin’s Theorem</a>, which says that
a measurable function can be approximated by a sequence of continuous
function.  <q cite="http://evchk.wikia.com/wiki/Wow!_Old_news_is_so_exciting!">Old
news is so exciting!</q>  (See <a href="http://evchk.wikia.com/wiki/Wow!_Old_news_is_so_exciting!">this encyclopedia page</a> for
explanation.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Launch Portable Git Bash with proper a home folder (git-bash.bat)</span> <a href="https://vincenttam.github.io/downloads/code/git-bash.bat">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line"><span class="c">rem Setup environment (replace &#39;user&#39; with your desired username)</span>
</span><span class="line"><span class="k">set</span> <span class="nv">HOMEDRIVE</span><span class="o">=</span><span class="nv">%~d0</span>
</span><span class="line"><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span>home<span class="n">/owner</span>
</span><span class="line"><span class="k">set</span> <span class="nv">USERPROFILE</span><span class="o">=</span><span class="nv">%HOME%</span>
</span><span class="line">
</span><span class="line"><span class="c">rem Launch the git bash</span>
</span><span class="line">start git-bash.exe
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Multiple H1 Tags]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags/"/>
    
    <updated>2016-03-19T16:58:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The SEO Analysis of <a href="https://www.bing.com/webmaster">Bing Webmaster</a> complained that
each page of my blog had <em>more than one</em> <code>&lt;h1&gt;</code> tag.</p>

<p>I viewed the HTML code for the homepage of this blog to verify the
warning message of this SEO tool.  Then I found over three instances
of the <code>&lt;h1&gt;</code> tag, at the top, in the sidebar, etc.  To facilitate
this process, I used <code>git grep "&lt;h1&gt;"</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>I searched for “h1” in the issues and the pull requests of <a href="http://octopress.org">Octopress</a>
on <a href="https://github.com/imathis/octopress">GitHub</a>, and I got <em>no</em> results.  I wondered why <em>nobody</em> reported
this.  As a result, I went to Google to search “octopress more than
one h1 tag”.  Finally, reading [this article][src], I gave up the idea
of changing the <code>&lt;h1&gt;</code> tags in the sidebar into <code>&lt;h2&gt;</code>.</p>

<h2 id="remarks">Remarks</h2>

<p>Like <a href="https://www.google.com/webmaster">Google Webmaster</a>, I <em>can’t</em> simply reset the URL
of the site.  To insert an ‘s’ into the protocol “http”, one needs to
deleted the site and add it again.  Fortunately, the verification of
site ownership <em>doesn’t</em> need to be done again.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Stopped by Adobe Protected Mode]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/18/stopped-by-adobe-protected-mode/"/>
    
    <updated>2016-03-18T20:27:34+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/18/stopped-by-adobe-protected-mode</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried opening a PDF file with the freeware Adobe Reader.  Unluckily,
Blocked by the popup window below, I <em>couldn’t</em> view the content of
the file.</p>

<picture class="fancybox" title="The default is the 3rd choice.">
  <source srcset="/images/posts/AdbRdr/opt3.png" media="(min-width: 790px)" /> 
  <img alt="The default is the 3rd choice." width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/opt3.png" />
</picture>

<p>I then attempted to open this file by checking the first or the second
radio button.</p>

<picture class="fancybox" title="Neither of the 1st nor the 2nd worked.">
  <source srcset="/images/posts/AdbRdr/opt1.png" media="(min-width: 790px)" /> 
  <img alt="Neither of the 1st nor the 2nd worked." width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/opt1.png" />
</picture>

<p>Unfortunately, either choice gave rise to the <em>same</em> error.</p>

<p><img src="https://vincenttam.github.io/images/posts/AdbRdr/opt1a.png" alt="Fatal Error" title="Acrobat failed to load its Core DLL" /></p>

<h2 id="result">Result</h2>

<p>I opened the file in <em>another</em> desktop machine.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Today's Print Error]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/14/todays-print-error/"/>
    
    <updated>2016-03-14T22:22:43+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/14/todays-print-error</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I had sent a PDF file to a printer for printing.  Then I was waiting
for a person to finish her priting job.  Unfortunately, an error
occured, and she left <em>without</em> saying a word.</p>

<picture class="fancybox" title="A Print Error">
  <source srcset="/images/posts/PrinterError/20160314-191831-HDR.jpg" media="(min-width: 2800px)" />
  <img alt="A Print Error" width="300" src="https://vincenttam.github.io/images/posts/PrinterError/20160314-191831s.jpg" />
</picture>

<h2 id="result">Result</h2>

<p>If I press the “Stop” button to continue with my work, she <em>wouldn’t</em>
be able to know what’s wrong.  <em>Not</em> hoping to get into any trouble
with her, I had sent the job to <em>another</em> printer.  I had finally got
my copy of the document and returned home.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Adobe Reader Has Stopped Working]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/14/adobe-reader-has-stopped-working/"/>
    
    <updated>2016-03-14T22:01:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/14/adobe-reader-has-stopped-working</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I opened Adobe Reader on a M$ Win* 7 desktop in a library so as to
print a PDF file.  I <em>couldn’t</em> understand why this window kept
popping up.</p>

<picture class="fancybox" title="Adobe RdrCEF has stopped working">
  <source srcset="/images/posts/AdbRdr/RdrCEF.png" media="(min-width: 525px)" /> 
  <img alt="Adobe RdrCEF has stopped working" width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/RdrCEF.png" />
</picture>

<h2 id="result">Result</h2>

<p>Lacking time, I <em>won’t</em> find a solution for this problem.</p>

<p>If I choose to ignore this window, then the printing job can still be
carried out.  Therefore, I just waited until the document was printed.
Then I closed Adobe Reader.</p>

<h2 id="remarks">Remarks</h2>

<p>I choose Sumatra PDF since it is licensed under <abbr title="General Public License">GPL</abbr>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Google Webmaster Sitemap Warning]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning/"/>
    
    <updated>2016-03-12T21:19:19+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I uploaded my <code>sitemap.xml</code> to Google Webmaster, but I received
warnings: <code>404.html</code> was in the sitemap, but the crawl was blocked by
<code>robots.txt</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>Obviously, I should find a way to exclude the 404 page from the
sitemap.  In the old days, one can add the path name of the page to be
excluded.<sup id="fnref:ref"><a href="#fn:ref" class="footnote">1</a></sup></p>

<p>However, the file <code>plugins/sitemap_generator.rb</code> has been <em>deleted</em>
since commit <a href="https://github.com/octopress/octopress/commit/52f9119">52f9119</a>.  <strong>How can the 404 page be excluded from the
sitemap then?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Searching “octopress sitemap exclude url” <em>won’t</em> help.  Actually,
adding a line <code>sitemap: false</code> in <code>source/404.md</code> will do.</p>

<div class="footnotes">
  <ol>
    <li id="fn:ref">

      <p>For details, refer to <a href="http://droidyue.com/blog/2014/06/20/custom-octopress-404-page/index.html"><em>自定義Octopress404頁面</em></a> written by
androidyue. <a href="#fnref:ref" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Missing OS]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/12/missing-os/"/>
    
    <updated>2016-03-12T20:53:42+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/12/missing-os</id>
    
      <content type="html"><![CDATA[<p>I saw this error on a M$ Win* 7 machine.  If I were the
administrator, I would install GNU/Linux into that computer so that
a free and reliable operating system can be found inside.</p>

<picture class="fancybox" title="Missing Operating System">
  <source srcset="/images/posts/BoD/20160312-153126.jpg" media="(min-width: 400px)" /> 
  <img alt="Missing Operating System" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160312-153126.jpg" />
</picture>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (5)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5/"/>
    
    <updated>2016-02-29T00:35:30+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/">the third post of this series</a>, I ran the editor command</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>inside <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>, but I got a fatal error.  I
found out how to get <a href="https://github.com/mattn/gist-vim">Gist.vim</a> work <em>without</em> solving this problem.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to avoid this fatal error?</strong></p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I forgot <a href="http://polymerhk.com/articles/2016/02/03/27363/">this article about programming</a> that I’d read several
weeks ago.  I should have pay more attention of the error message
itself, rather than the Google search results of this message.  Hence,
creating a symbolic link for <code>C:\Users\foo\.gitignore</code> to the
<code>path/to/Data/settings</code> folder.</p>

<h2 id="remarks">Remarks</h2>

<p>While writing this post, I re-read
<a href="https://vincenttam.github.io/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/"><em>Rake Aborted Due to a Vim Swap File</em></a> so as to find the URL of
the article about programming.  I discovered a broken link in the
GitHub page for <a href="https://github.com/imathis/octopress/issues/600#issuecomment-6206116">Octopress issue #600</a>.  From the list of
branches in the homepage for this GitHub project, I found <code>site-2.1</code>,
on which commit <a href="https://github.com/imathis/octopress/commit/2399008">2399008</a> was located.  Therefore, I made commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commit/68b0adb">68b0adb</a> in the repository for this blog.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Another Blue Screen Windows 7]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/25/another-blue-screen-windows-7/"/>
    
    <updated>2016-02-25T22:41:06+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/25/another-blue-screen-windows-7</id>
    
      <content type="html"><![CDATA[<p>I saw a monitor which displayed the notorious blue screen of death
this evening.  Since I <em>don’t</em> know how to find out the reason of the
problem from the coredump, I use <a href="http://www.ubuntu.com/">Ubuntu</a>.</p>

<picture class="fancybox" title="A Windows 7 Blue Screen">
  <source srcset="/images/posts/BoD/20160225-185456.jpg" media="(min-width: 400px)" /> 
  <img alt="Win 7 BoD" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160225-185456.jpg" />
</picture>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (4)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4/"/>
    
    <updated>2016-02-22T18:38:00+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>, we see that the space in the
path of Git Bash can become a source of trouble.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to run external commands in GVim Portable invoked by Git Bash?</strong></p>

<!-- more -->

<h2 id="a-failed-attempt">A failed attempt</h2>

<p>I googled “vim shell path program files”, and clicked
<a href="http://stackoverflow.com/a/13917410">the first web site</a> as usual.  Even though I <em>don’t</em>, and
<em>won’t</em> have Cygwin installed in my computer, I still viewed this
page, which suggested that the path of <code>shell</code> option should be
surrounded by a pair of double quotes <code>""</code>.  I tried this, but the
above problem <em>wasn’t</em> solved.</p>

<h2 id="solution">Solution</h2>

<p>I recalled that after opening the built-in editor in Command Prompt on
M$ Win* Professional/Enterprise, the displayed path of the working
directory would be different: some tildes appear in the path.</p>

<p>Therefore, I googled “windows path without spaces”, and learnt to use
<code>DIR /X</code> in Command Prompt to <a href="https://goo.gl/a9eHZF">solve this problem</a> from an
answer to <a href="http://superuser.com/a/179450">this Super User question</a>.  Finally, usual
external commands like <code>ls</code> and <code>file</code> can be executed inside GVim
Portable.  This solves the error mentioned in the “Discussion” section
of <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>.  What I’ve wriiten in the
“Solution” section can be updated: I expect that under usual
circumstances, the external commands can be run even if the <code>shell</code>
option is set to Git Bash.</p>

<h2 id="remarks">Remarks</h2>

<p>I used an <code>if</code> statement to surround the <code>set shell=/path/to/bash.exe</code>
because <a href="http://stackoverflow.com/a/13917410">the same Stack Overflow answer</a> mentioned in the
“A failed attempt” section said that many Vim plugins used
<code>has("win32")</code>.  If a plugin failed in a GVim window triggered by Git
Bash, I can still use it by opening GVim with Command Prompt.</p>

<p>Now, though using <code>curl</code> in GVim whose <code>shell</code> is configured to
<code>cmd.exe</code>, I can finally use <code>curl</code> in GVim invoked by Git Bash.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/"/>
    
    <updated>2016-02-22T16:54:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A VIMRC is important for efficient text editing.  It can be over one
hundred lines.  It’s good to have the changes tracked.  One <em>entire</em>
folder <code>.git</code> for <em>one</em> single text file will be too much.  Since my
VIMRCs <em>don’t</em> have anything secret, I upload them to Gist like many
other users, and read others’ configuration files so as to learn from
them.</p>

<p>Nonetheless, my workflow of uploading Gists on M$ Win* was not quite
efficient.  Therefore, I re-read the installation instructions for
<a href="https://github.com/mattn/gist-vim">Gist.vim</a>.  Since <code>curl.cmd</code> has already been set up during the
installation of Vundle.vim, I used Vundle to install Gist.vim.</p>

<p>Due to the problem mentioned in
<a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the previos post in this series</a>, I opened GVim from Command
Prompt instead of Git Bash.</p>

<h2 id="problem">Problem</h2>

<p>I have already configure <code>github.user</code> to my GitHub user name, but
Gist.vim still complained that <em>no</em> GitHub user name was found.</p>

<pre class="cli"><code>You have not configured a Github account. Read ":help gist-vim-setup".
</code></pre>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>I tried looking into the source code of the Vim plugin.  I learnt from
<em>Learn Vim Script the Hard Way</em> the difference between <code>echo</code> and
<code>echom</code>: the former <em>isn’t</em> persistent; the later can be retrieved by
<code>message</code>.  It took me a few minutes to find out that Command Prompt,
the program set by <code>shell</code> option, <em>didn’t</em> take my global
configurations into account.  I viewed the list of my configurations
using the following command.</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>I <em>didn’t</em> see <code>github.user</code> in the list.  I tried adding <code>--global</code>,
and I got an error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<p>I <em>failed</em> to comprehend the second line of the above output.  I just
realised that this had something to do with GVim Portable.  If I use
GVim instead, I <em>won’t</em> have such trouble since <code>.gitconfig</code> is
located at the home folder.</p>

<h2 id="solution">Solution</h2>

<p>I searched for a tutorial of using this plugin.  Finally, from a
Japanese website which I forgot its URL, I found out that one can
manually set the variable <code>github_user</code> in VIMRC.</p>

<p>After that, I restarted the editor and invoked the plugin, which then
asked for my GitHub password and created a token in
<code>/path/to/gVimPortable/Data/settings/.gist-vim</code>.</p>

]]></content>
    
  </entry>
  
</feed>
