<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog 1]]></title>
  <link href="https://vincenttam.github.io/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-02T17:50:57+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[$L^\infty$ Is Not Separable]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/02/l-infty-is-not-separable/"/>
    
    <updated>2016-04-02T17:00:13+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/02/l-infty-is-not-separable</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>This Wednesday, I read a proof about the non-separability of
$L^\infty$ spaces.  To simplify things, I assume that it’s defined on
sequences.</p>

<div class="myeqn">
\[
  L^\infty \triangleq \{ (x_n)_{n \in \N} \mid \exists\,M \ge 0
  \text{ such that } \forall\,n \in \N, \abs{x_n} \le M \}
\]
</div>

<p>I have written down the uncountable set (see Cantor’s diagonal
argument)</p>

<div class="myeqn">
\[
  D \triangleq \{ (x_n)_{n \in \N} \mid \forall\,n \in \N, x_n=\pm1 \}
\]
</div>

<p>in my notes.  I understand</p>

<div class="myeqn">
\[
  B(x,1) \cap B(y,1) = \varnothing \quad \forall \, x,y \in D
  \text{ with } x \ne y.
\]
</div>

<h2 id="problem">Problem</h2>

<p>Then, my teacher said that the reason for the non-separability of
$L^\infty$ was like the Pigeon-Hole Principle.  I got puzzled when I
was revising the proof.  In fact, in the above equation, an element in
a <em>dense</em> set $C$ can be found in each open ball $B(x,1)$.  Since the
open balls $B(x,1)$ are <em>disjoint</em>, $C$ has <em>uncountably</em> many
elements.  Hence, $L^\infty$ is non-separable.</p>

<p>One knows that if a space is separable, we <em>can’t</em> insert a
non-separable subspace into it.  The above property of $L^\infty$
serves as a concrete example of this fact.</p>

<p>It’s easy to show that a space having a Schauder basis is separable.
Thus, we can conclude that $L^\infty$ <em>don’t</em> possess any Schauder
basis.</p>

<p>In fact, we have a more <em>direct</em> approach to the absence of Schauder
basis in $L^\infty$.  This will be discussed in my next post.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Gems on Which TLDR Pages Depend]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/29/gems-on-which-tldr-pages-depend/"/>
    
    <updated>2016-03-29T19:13:20+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/29/gems-on-which-tldr-pages-depend</id>
    
      <content type="html"><![CDATA[<p>Tonight, I’ve installed <a href="http://tldr-pages.github.io/">TLDR pages</a> by typing <code>gem install
tldrb</code> since I <em>don’t</em> have <code>npm</code> installed.</p>

<p>Here’s a list of gems actually fetched.</p>

<ol>
  <li><code>bales-0.1.2</code></li>
  <li><code>unf-0.2.0.beta2</code></li>
  <li><code>domain_name-0.5.20160310</code></li>
  <li><code>http-cookie-1.0.2</code></li>
  <li><code>mime-types-2.99.1</code></li>
  <li><code>netrc-0.11.0</code></li>
  <li><code>rest-client-1.8.0</code></li>
  <li><code>tldrb-0.0.2</code></li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[An Invalid Claim by the Government]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/27/an-invalid-claim-by-the-government/"/>
    
    <updated>2016-03-27T14:23:05+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/27/an-invalid-claim-by-the-government</id>
    
      <content type="html"><![CDATA[<p>I have viewed the Chinese version of the homepage of
<a href="http://www.cedb.gov.hk/chi/about/content.htm">the Commerce and Economic Development Bureau</a>.  I clicked on the
validation icon for HTML 4.01 at the lower right-hand corner.</p>

<picture class="fancybox" title="home page of gov webpage">
  <source srcset="/images/posts/W3CInvalid/cedb1.png" media="(min-width: 900px)" /> 
  <img alt="home page of gov webpage" width="300" src="https://vincenttam.github.io/images/posts/W3CInvalid/cedb1.png" />
</picture>

<p>To my surprise, an error was produced.</p>

<picture class="fancybox" title="W3C validator shows error">
  <source srcset="/images/posts/W3CInvalid/cedb2.png" media="(min-width: 900px)" /> 
  <img alt="W3C validator shows error" width="300" src="https://vincenttam.github.io/images/posts/W3CInvalid/cedb2.png" />
</picture>

<p>Lacking time to write an email with good grammar to the authories, I
am waiting for someone to notice this error and I am looking forward
to seeing that this problem will be rectified.</p>

<p>To know more about the usage of the W3C validation icons, you may go
to <a href="https://validator.w3.org/docs/help.html#icon-invalidpage">the FAQ for the validation service</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Missing OS (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/26/missing-os-2/"/>
    
    <updated>2016-03-26T21:48:09+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/26/missing-os-2</id>
    
      <content type="html"><![CDATA[<p>I saw a similar error <em>again</em>.  After pressing any key, the M$ Win*
logo appeared.  I <em>don’t</em> think that I’ll find out anything about this
error since I’ve other things to do.</p>

<picture class="fancybox" title="No operating system found">
  <source srcset="/images/posts/BoD/20160322-125447.jpg" media="(min-width: 400px)" /> 
  <img alt="No operating system found" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160322-125447.jpg" />
</picture>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Approximation of a Bounded Simple Function by a Continuous Function]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/21/approximation-of-a-bounded-simple-function-by-a-continuous-function/"/>
    
    <updated>2016-03-21T10:12:06+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/21/approximation-of-a-bounded-simple-function-by-a-continuous-function</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Today, I was puzzled by a <em>remark</em> of a proof that a simple function
$f:[a,b] \to \R$ is equal to a step function $\psi:[a,b] \to \R$
(resp. a continuous function $g:[a,b] \to \R$) except on a set of
arbitrarily small measure $\epsilon$.</p>

<blockquote>
  <p>If $m \le f(x) \le M \;\forall\, x\in [a,b]$, then $\bar{\psi}
\triangleq (m \vee \psi) \wedge M$ and $\bar{g} \triangleq (m \vee
g) \wedge M$ are step function and continuous function which satisfy
$m \le \bar{\psi}$ and $m \le \bar{g} \le M$ so that $f =
\bar{\psi}$ and $f = \bar{g}$ except on a set of measure less than
$\epsilon$ respectively.</p>
</blockquote>

<p>I can verify the above remark, but I wonder <em>why</em> we need to define
$\bar{\psi}$ and $\bar{g}$ so as to guarantee that they are bounded
below and above by $m$ and $M$ respectively.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Write</p>

<div class="myeqn">
\[
  f = \sum_{j = 1}^m a_j \chi_{E_j \cap [a,b]},
\]
</div>

<p><span class="myeqn">
where $E_j$ is measurable for each $j = 1,\dots,m$, so that we can
consider $E_j$.  Note that the $E_j$'s are not necessarily disjoint,
but who cares?  By drawing a simple figure of $E_j \cap [a,b]$ and
$U_j$, which is a finite disjoint union of open intervals obtained by
applying Littlewood's First Principle, I realised that I should try
constructing a simple function $f$ while focusing on $(E_j \cap [a,b])
\triangle U_j$.
</span></p>

<p>In the proof, to deal with the summation sign, we use a union sign.</p>

<div class="myeqn">
\[
  f = \psi \triangleq \sum_{j = 1}^m a_j \chi_{U_j} \text{ except on }
  \bigcup_{j = 1}^m [(E_j \cap [a,b]) \triangle U_j]
\]
</div>

<p>If we’re given that $m \le f \le M$, to find <span class="myeqn">$x \in \bigcup_{j = 1}^m [(E_j \cap [a,b]) \triangle
U_j]$</span> so that $\psi(x) &lt; m$ or $\psi(x) &gt; M$, we need to have
<em>overlapping</em> of <span class="myeqn">$E_i \cap [a,b]$ and
$E_j \cap [a,b]$, so that $\chi_{(E_i \cap [a,b]) \triangle U_i} +
\chi_{(E_j \cap [a,b]) \triangle U_j}$ will give us something
interesting.</span></p>

<p>To see <em>necessity</em> of the introduction of $\bar{\psi}$, consider <span class="myeqn">$f \triangleq \chi_{(0,1)} + \chi_{(1,2)}$
and $\psi \triangleq \chi_{[0,1]} + \chi_{[1,2]}$.  Then $f = \psi$
except on $\{0,1,2\}$ and $0 \le f \le 1$, but $\psi(1) = 2
&gt; 1$.</span>  One can easily transform a step function into a
piecewise linear (i.e. continuous) function $g$.</p>

<h2 id="remarks">Remarks</h2>

<p>It’s very difficult for a function to be continuous.  The result
provides a step for proving <a href="https://en.wikipedia.org/wiki/Lusin's_theorem">Lusin’s Theorem</a>, which says that
a measurable function can be approximated by a sequence of continuous
function.  <q cite="http://evchk.wikia.com/wiki/Wow!_Old_news_is_so_exciting!">Old
news is so exciting!</q>  (See <a href="http://evchk.wikia.com/wiki/Wow!_Old_news_is_so_exciting!">this encyclopedia page</a> for
explanation.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Launch Portable Git Bash with proper a home folder (git-bash.bat)</span> <a href="https://vincenttam.github.io/downloads/code/git-bash.bat">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line"><span class="c">rem Setup environment (replace &#39;user&#39; with your desired username)</span>
</span><span class="line"><span class="k">set</span> <span class="nv">HOMEDRIVE</span><span class="o">=</span><span class="nv">%~d0</span>
</span><span class="line"><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span>home<span class="n">/owner</span>
</span><span class="line"><span class="k">set</span> <span class="nv">USERPROFILE</span><span class="o">=</span><span class="nv">%HOME%</span>
</span><span class="line">
</span><span class="line"><span class="c">rem Launch the git bash</span>
</span><span class="line">start git-bash.exe
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Multiple H1 Tags]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags/"/>
    
    <updated>2016-03-19T16:58:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The SEO Analysis of <a href="https://www.bing.com/webmaster">Bing Webmaster</a> complained that
each page of my blog had <em>more than one</em> <code>&lt;h1&gt;</code> tag.</p>

<p>I viewed the HTML code for the homepage of this blog to verify the
warning message of this SEO tool.  Then I found over three instances
of the <code>&lt;h1&gt;</code> tag, at the top, in the sidebar, etc.  To facilitate
this process, I used <code>git grep "&lt;h1&gt;"</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>I searched for “h1” in the issues and the pull requests of <a href="http://octopress.org">Octopress</a>
on <a href="https://github.com/imathis/octopress">GitHub</a>, and I got <em>no</em> results.  I wondered why <em>nobody</em> reported
this.  As a result, I went to Google to search “octopress more than
one h1 tag”.  Finally, reading [this article][src], I gave up the idea
of changing the <code>&lt;h1&gt;</code> tags in the sidebar into <code>&lt;h2&gt;</code>.</p>

<h2 id="remarks">Remarks</h2>

<p>Like <a href="https://www.google.com/webmaster">Google Webmaster</a>, I <em>can’t</em> simply reset the URL
of the site.  To insert an ‘s’ into the protocol “http”, one needs to
deleted the site and add it again.  Fortunately, the verification of
site ownership <em>doesn’t</em> need to be done again.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Stopped by Adobe Protected Mode]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/18/stopped-by-adobe-protected-mode/"/>
    
    <updated>2016-03-18T20:27:34+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/18/stopped-by-adobe-protected-mode</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried opening a PDF file with the freeware Adobe Reader.  Unluckily,
Blocked by the popup window below, I <em>couldn’t</em> view the content of
the file.</p>

<picture class="fancybox" title="The default is the 3rd choice.">
  <source srcset="/images/posts/AdbRdr/opt3.png" media="(min-width: 790px)" /> 
  <img alt="The default is the 3rd choice." width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/opt3.png" />
</picture>

<p>I then attempted to open this file by checking the first or the second
radio button.</p>

<picture class="fancybox" title="Neither of the 1st nor the 2nd worked.">
  <source srcset="/images/posts/AdbRdr/opt1.png" media="(min-width: 790px)" /> 
  <img alt="Neither of the 1st nor the 2nd worked." width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/opt1.png" />
</picture>

<p>Unfortunately, either choice gave rise to the <em>same</em> error.</p>

<p><img src="https://vincenttam.github.io/images/posts/AdbRdr/opt1a.png" alt="Fatal Error" title="Acrobat failed to load its Core DLL" /></p>

<h2 id="result">Result</h2>

<p>I opened the file in <em>another</em> desktop machine.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Today's Print Error]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/14/todays-print-error/"/>
    
    <updated>2016-03-14T22:22:43+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/14/todays-print-error</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I had sent a PDF file to a printer for printing.  Then I was waiting
for a person to finish her priting job.  Unfortunately, an error
occured, and she left <em>without</em> saying a word.</p>

<picture class="fancybox" title="A Print Error">
  <source srcset="/images/posts/PrinterError/20160314_191831_HDR.jpg" media="(min-width: 600px)" /> 
  <img alt="A Print Error" width="300" src="https://vincenttam.github.io/images/posts/PrinterError/20160314_191831_HDR.jpg" />
</picture>

<h2 id="result">Result</h2>

<p>If I press the “Stop” button to continue with my work, she <em>wouldn’t</em>
be able to know what’s wrong.  <em>Not</em> hoping to get into any trouble
with her, I had sent the job to <em>another</em> printer.  I had finally got
my copy of the document and returned home.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Adobe Reader Has Stopped Working]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/14/adobe-reader-has-stopped-working/"/>
    
    <updated>2016-03-14T22:01:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/14/adobe-reader-has-stopped-working</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I opened Adobe Reader on a M$ Win* 7 desktop in a library so as to
print a PDF file.  I <em>couldn’t</em> understand why this window kept
popping up.</p>

<picture class="fancybox" title="Adobe RdrCEF has stopped working">
  <source srcset="/images/posts/AdbRdr/RdrCEF.png" media="(min-width: 525px)" /> 
  <img alt="Adobe RdrCEF has stopped working" width="300" src="https://vincenttam.github.io/images/posts/AdbRdr/RdrCEF.png" />
</picture>

<h2 id="result">Result</h2>

<p>Lacking time, I <em>won’t</em> find a solution for this problem.</p>

<p>If I choose to ignore this window, then the printing job can still be
carried out.  Therefore, I just waited until the document was printed.
Then I closed Adobe Reader.</p>

<h2 id="remarks">Remarks</h2>

<p>I choose Sumatra PDF since it is licensed under <abbr title="General Public License">GPL</abbr>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Google Webmaster Sitemap Warning]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning/"/>
    
    <updated>2016-03-12T21:19:19+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I uploaded my <code>sitemap.xml</code> to Google Webmaster, but I received
warnings: <code>404.html</code> was in the sitemap, but the crawl was blocked by
<code>robots.txt</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>Obviously, I should find a way to exclude the 404 page from the
sitemap.  In the old days, one can add the path name of the page to be
excluded.<sup id="fnref:ref"><a href="#fn:ref" class="footnote">1</a></sup></p>

<p>However, the file <code>plugins/sitemap_generator.rb</code> has been <em>deleted</em>
since commit <a href="https://github.com/octopress/octopress/commit/52f9119">52f9119</a>.  <strong>How can the 404 page be excluded from the
sitemap then?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Searching “octopress sitemap exclude url” <em>won’t</em> help.  Actually,
adding a line <code>sitemap: false</code> in <code>source/404.md</code> will do.</p>

<div class="footnotes">
  <ol>
    <li id="fn:ref">

      <p>For details, refer to <a href="http://droidyue.com/blog/2014/06/20/custom-octopress-404-page/index.html"><em>自定義Octopress404頁面</em></a> written by
androidyue. <a href="#fnref:ref" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Missing OS]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/12/missing-os/"/>
    
    <updated>2016-03-12T20:53:42+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/12/missing-os</id>
    
      <content type="html"><![CDATA[<p>I saw this error on a M$ Win* 7 machine.  If I were the
administrator, I would install GNU/Linux into that computer so that
a free and reliable operating system can be found inside.</p>

<picture class="fancybox" title="Missing Operating System">
  <source srcset="/images/posts/BoD/20160312-153126.jpg" media="(min-width: 400px)" /> 
  <img alt="Missing Operating System" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160312-153126.jpg" />
</picture>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (5)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5/"/>
    
    <updated>2016-02-29T00:35:30+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/">the third post of this series</a>, I ran the editor command</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>inside <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>, but I got a fatal error.  I
found out how to get <a href="https://github.com/mattn/gist-vim">Gist.vim</a> work <em>without</em> solving this problem.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to avoid this fatal error?</strong></p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I forgot <a href="http://polymerhk.com/articles/2016/02/03/27363/">this article about programming</a> that I’d read several
weeks ago.  I should have pay more attention of the error message
itself, rather than the Google search results of this message.  Hence,
creating a symbolic link for <code>C:\Users\foo\.gitignore</code> to the
<code>path/to/Data/settings</code> folder.</p>

<h2 id="remarks">Remarks</h2>

<p>While writing this post, I re-read
<a href="https://vincenttam.github.io/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/"><em>Rake Aborted Due to a Vim Swap File</em></a> so as to find the URL of
the article about programming.  I discovered a broken link in the
GitHub page for <a href="https://github.com/imathis/octopress/issues/600#issuecomment-6206116">Octopress issue #600</a>.  From the list of
branches in the homepage for this GitHub project, I found <code>site-2.1</code>,
on which commit <a href="https://github.com/imathis/octopress/commit/2399008">2399008</a> was located.  Therefore, I made commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commit/68b0adb">68b0adb</a> in the repository for this blog.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Another Blue Screen Windows 7]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/25/another-blue-screen-windows-7/"/>
    
    <updated>2016-02-25T22:41:06+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/25/another-blue-screen-windows-7</id>
    
      <content type="html"><![CDATA[<p>I saw a monitor which displayed the notorious blue screen of death
this evening.  Since I <em>don’t</em> know how to find out the reason of the
problem from the coredump, I use <a href="http://www.ubuntu.com/">Ubuntu</a>.</p>

<picture class="fancybox" title="A Windows 7 Blue Screen">
  <source srcset="/images/posts/BoD/20160225-185456.jpg" media="(min-width: 400px)" /> 
  <img alt="Win 7 BoD" width="300" src="https://vincenttam.github.io/images/posts/BoD/20160225-185456.jpg" />
</picture>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (4)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4/"/>
    
    <updated>2016-02-22T18:38:00+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>, we see that the space in the
path of Git Bash can become a source of trouble.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to run external commands in GVim Portable invoked by Git Bash?</strong></p>

<!-- more -->

<h2 id="a-failed-attempt">A failed attempt</h2>

<p>I googled “vim shell path program files”, and clicked
<a href="http://stackoverflow.com/a/13917410">the first web site</a> as usual.  Even though I <em>don’t</em>, and
<em>won’t</em> have Cygwin installed in my computer, I still viewed this
page, which suggested that the path of <code>shell</code> option should be
surrounded by a pair of double quotes <code>""</code>.  I tried this, but the
above problem <em>wasn’t</em> solved.</p>

<h2 id="solution">Solution</h2>

<p>I recalled that after opening the built-in editor in Command Prompt on
M$ Win* Professional/Enterprise, the displayed path of the working
directory would be different: some tildes appear in the path.</p>

<p>Therefore, I googled “windows path without spaces”, and learnt to use
<code>DIR /X</code> in Command Prompt to <a href="https://goo.gl/a9eHZF">solve this problem</a> from an
answer to <a href="http://superuser.com/a/179450">this Super User question</a>.  Finally, usual
external commands like <code>ls</code> and <code>file</code> can be executed inside GVim
Portable.  This solves the error mentioned in the “Discussion” section
of <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>.  What I’ve wriiten in the
“Solution” section can be updated: I expect that under usual
circumstances, the external commands can be run even if the <code>shell</code>
option is set to Git Bash.</p>

<h2 id="remarks">Remarks</h2>

<p>I used an <code>if</code> statement to surround the <code>set shell=/path/to/bash.exe</code>
because <a href="http://stackoverflow.com/a/13917410">the same Stack Overflow answer</a> mentioned in the
“A failed attempt” section said that many Vim plugins used
<code>has("win32")</code>.  If a plugin failed in a GVim window triggered by Git
Bash, I can still use it by opening GVim with Command Prompt.</p>

<p>Now, though using <code>curl</code> in GVim whose <code>shell</code> is configured to
<code>cmd.exe</code>, I can finally use <code>curl</code> in GVim invoked by Git Bash.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/"/>
    
    <updated>2016-02-22T16:54:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A VIMRC is important for efficient text editing.  It can be over one
hundred lines.  It’s good to have the changes tracked.  One <em>entire</em>
folder <code>.git</code> for <em>one</em> single text file will be too much.  Since my
VIMRCs <em>don’t</em> have anything secret, I upload them to Gist like many
other users, and read others’ configuration files so as to learn from
them.</p>

<p>Nonetheless, my workflow of uploading Gists on M$ Win* was not quite
efficient.  Therefore, I re-read the installation instructions for
<a href="https://github.com/mattn/gist-vim">Gist.vim</a>.  Since <code>curl.cmd</code> has already been set up during the
installation of Vundle.vim, I used Vundle to install Gist.vim.</p>

<p>Due to the problem mentioned in
<a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the previos post in this series</a>, I opened GVim from Command
Prompt instead of Git Bash.</p>

<h2 id="problem">Problem</h2>

<p>I have already configure <code>github.user</code> to my GitHub user name, but
Gist.vim still complained that <em>no</em> GitHub user name was found.</p>

<pre class="cli"><code>You have not configured a Github account. Read ":help gist-vim-setup".
</code></pre>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>I tried looking into the source code of the Vim plugin.  I learnt from
<em>Learn Vim Script the Hard Way</em> the difference between <code>echo</code> and
<code>echom</code>: the former <em>isn’t</em> persistent; the later can be retrieved by
<code>message</code>.  It took me a few minutes to find out that Command Prompt,
the program set by <code>shell</code> option, <em>didn’t</em> take my global
configurations into account.  I viewed the list of my configurations
using the following command.</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>I <em>didn’t</em> see <code>github.user</code> in the list.  I tried adding <code>--global</code>,
and I got an error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<p>I <em>failed</em> to comprehend the second line of the above output.  I just
realised that this had something to do with GVim Portable.  If I use
GVim instead, I <em>won’t</em> have such trouble since <code>.gitconfig</code> is
located at the home folder.</p>

<h2 id="solution">Solution</h2>

<p>I searched for a tutorial of using this plugin.  Finally, from a
Japanese website which I forgot its URL, I found out that one can
manually set the variable <code>github_user</code> in VIMRC.</p>

<p>After that, I restarted the editor and invoked the plugin, which then
asked for my GitHub password and created a token in
<code>/path/to/gVimPortable/Data/settings/.gist-vim</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/"/>
    
    <updated>2016-02-22T14:32:04+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I had been using <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> to manage plugin.  When it comes to
keeping the plugins up-to-date, <a href="https://vincenttam.github.io/blog/2014/10/11/update-vim-plugins-managed-by-pathogen-dot-vim/">I used a for-loop</a>.</p>

<h2 id="problem">Problem</h2>

<p>I would like to change it to <a href="https://github.com/VundleVim/Vundle.vim/">Vundle</a> since I <em>didn’t</em> know how to
update the helptags after merging the commits from GitHub.  Therefore,
I followed the installation guide of Vundle.  However, when I started
updating, I got the following error.</p>

<pre class="cli"><code>Processing 'tpope/vim-fugitive'
Error detected while processing function vundle#installer#new..&lt;SNR&gt;96_process..
vundle#installer#run..vundle#installer#install..&lt;SNR&gt;96_sync..&lt;SNR&gt;96_make_sync_
command..&lt;SNR&gt;96_get_current_origin_url..&lt;SNR&gt;96_system:
line    1:
E484: Can't open file C:/Temp/PortableApps/gVimPortable/Data/Temp/VIo985B.tmp
Error detected while processing function vundle#installer#new..&lt;SNR&gt;96_process..
vundle#installer#run..vundle#installer#install..&lt;SNR&gt;96_sync:
-- More -- SPACE/d/j: screen/page/line down, b/u/k: up, q: quit
</code></pre>

<p><strong>How can I get the Vim plugin updates?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Google <em>didn’t</em> help this time.  <em>Not</em> knowing what to do, I ran a
simple command <code>ls</code>, and this <em>failed</em>.</p>

<pre class="cli"><code>C:\Program Files\Git\usr\bin\bash -c "ls"
'C:\Program' is not recognized as an internal or external command,
operable program or batch file.
shell returned 1
Hit any key to close this window...
</code></pre>

<p>From the above output, one knows that the cause of this unexpected
failure is the whitespace character in the path of Git Bash.  As a
result, I searched “vim ‘C:\Program’ is not recognized as an internal
or external” in Google.  Then I realised that it was
<a href="http://vi.stackexchange.com/a/2424">a bug in Vim</a>.  Since I <em>didn’t</em> want to spend time setting
up GVim again, I stick to GVim Portable, whose runpath is <em>different</em>
from what many developers of Vim plugins, who use *nix, expect.</p>

<h2 id="solution">Solution</h2>

<p>Invoke GVim from Command Prompt,Start Menu or desktop icon instead of
Git Bash because the <code>shell</code> option will then be <code>cmd.exe</code>, whose path
contains <em>no</em> spaces.  Then everything should be fine, <em>except the
line breaks</em>.</p>

<h2 id="remarks">Remarks</h2>

<p>Some developers include a <code>.gitignore</code> file in their Vim plugins to
ignore files like <code>docs/tags</code>, while some <em>don’t</em>.  IMHO, it’s better
to have one.</p>

<p>One good point of free software is that users can interact with
developers to report and discuss the problems, or even share their
code to improve the software, for example, <a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a> pull
request <a href="https://github.com/tangledhelix/vim-octopress/pull/11">#11</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rake Deploy Fatal Error]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/rake-deploy-fatal-error/"/>
    
    <updated>2016-02-22T12:16:16+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/rake-deploy-fatal-error</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I had finished writing <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">my previous post</a>.  In <code>rake preview</code>, I
got the desired output.  Then, the next step is to commit the changes
and to deploy the generated contents to GitHub Pages.</p>

<h2 id="problem">Problem</h2>

<p>A large block of red text appeared after I ran <code>rake deploy</code>.  The
commit on the <code>master</code> branch was <em>unsuccessful</em>.</p>

<pre class="cli"><code>$ rake deploy
(in C:/github/vincenttam.github.io)
cp -r source/fancybox/.gitattributes public/fancybox/.gitattributes
cd _deploy
Already up-to-date.
cd -
rm -rf _deploy/404.html
...
rm -rf _deploy/stylesheets
cp -r public/. _deploy
cd _deploy
fatal: CRLF would be replaced by LF in fancybox/README.md.
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
        modified:   404.html
        modified:   about/index.html
        ...

Untracked files:
        blog/2016/02/21/
        blog/2016/02/22/
        downloads/code/miktex-update2/
        images/posts/MikTeXUpdate2/
        posts/31/

no changes added to commit
Everything up-to-date
cd -
## Set the codepage to 65001 for Windows machines
## Deploying branch to Github Pages
## Pulling any updates from Github Pages

## Copying public to _deploy

## Committing: Site updated at 2016-02-22 03:37:22 UTC

## Pushing generated _deploy website

## Github Pages deploy complete
</code></pre>

<p>Even though the system said that the deploy was “complete”, in fact,
it had <em>never</em> been carried out.</p>

<p><strong>How can I update my blog on GitHub Pages?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>In the above error output, it took me a minute to find out <em>at which
stage</em> the deploy had failed: the line starting with “fatal”.
Therefore, I stripped off all <code>\r</code> from <code>source/fancybox/README.md</code>.
I tried deploying it again, and it <em>failed</em>—the <em>same</em> “fatal” error
appeared for <em>another file</em>.  I tried committing the change for
<code>source/fancybox/README.md</code>, but I <em>couldn’t</em> commit this.  I tried
googling “fatal crlf would be replaced by lf”, and clicked on
<a href="http://stackoverflow.com/q/20168639">the first search result</a>.  The answers in this Stack
Overflow question suggested that the option <code>core.autocrlf</code> should be
configured to <code>false</code>.  To be safe, I
<a href="https://github.com/VundleVim/Vundle.vim/wiki#win1">turned on <code>core.safecrlf</code></a>.<sup id="fnref:2"><a href="#fn:2" class="footnote">1</a></sup></p>

<p>When I <a href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">updated Git for Windows</a>, I chose “<strong>Checkout
Windows-style, commit Unix-style line endings</strong>” (the <em>first</em> radio
button), which the Git Setup dialog recommended.</p>

<picture class="fancybox" title="Git line conversion configuration">
  <source srcset="/images/posts/GitUpdate/autocrlf.png" media="(min-width: 505px)" />
  <img alt="Git line conversion configuration" width="300" src="https://vincenttam.github.io/images/posts/GitUpdate/autocrlf.png" />
</picture>
<p><small>Picture from <a href="http://i.stack.imgur.com/vPJCI.png">here</a>.</small></p>

<p>I love using bash utilities and (G)Vim.  In Git Bash, the former gives
LF line terminators, while the later gives CRLF.  Therefore, I decided
to <code>set fileformat=unix</code> in my VIMRC.<sup id="fnref:1"><a href="#fn:1" class="footnote">2</a></sup>  However, this <em>doesn’t</em>
unify the EOL of files in the local repository.</p>

<p>As I clone Git repositories, the line terminators are automatically
converted to CRLF.</p>

<h2 id="solution">Solution</h2>

<p><em>Completely</em> get rid of carriage returns <code>\r</code> in Git repositories!</p>

<p>To see how many files had CRLF line terminators, I tried using <code>grep</code>
in Git Bash, but <a href="http://stackoverflow.com/a/73886">this answer on Stack Overflow</a> <em>didn’t</em>
work.</p>

<pre class="cli"><code>$ find source -type f -exec grep -Iq . {} \; -and -exec dos2unix {} \;
dos2unix: converting file source/404.md to Unix format...
dos2unix: converting file source/about/index.markdown to Unix format...
dos2unix: converting file source/about/mybyobuconf.markdown to Unix format...
...
dos2unix: converting file source/_posts/2016-02-22-git-for-windows-curl-with-vun
dle-1.markdown~ to Unix format...
dos2unix: converting file source/_posts/2016-02-22-testing-octopress-and-ruby-2-
dot-0-on-windows-7-3.markdown to Unix format...
dos2unix: converting file source/_posts/2016-02-22-testing-octopress-and-ruby-2-
dot-0-on-windows-7-3.markdown~ to Unix format...
</code></pre>

<p>For the explanation of the above command, you may refer to
<a href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/"><em>Used More Bash Utilities</em></a>.</p>

<p>After that, since <code>core.autocrlf</code> has been set to <code>false</code>, <code>git
checkout</code> no longer inserts <code>\r</code> into the files in the local
repository.  Therefore, even though <code>git status</code> reports unstaged
changes, running <code>git checkout -- source</code> <em>won’t</em> hurt the files.  I
can finally deploy the contents to GitHub Pages.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p><em>Never</em> run <code>rake generate</code> nor <code>rake preview</code> in <code>cmd.exe</code>!  Run this
in Git Bash, or other shells that <em>don’t</em> give you carriage returns.</p>

<p>When a new post is created with <code>rake new_post['...']</code> in either Git
Bash or Command Prompt, the created post has DOS line endings.
Therefore, we need to take extra care with this by using <code>dos2unix</code> in
Git Bash.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:2">

      <p>Refer to <a href="http://stackoverflow.com/a/1547108">this Stack Overflow question</a> for my reason
of enabling <code>core.safecrlf</code>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>Refer to line 100 of my <code>_vimrc</code> at version <a href="https://goo.gl/iETw5d">07ab878</a>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">

      <p>You may verify this by comparing the line</p>

      <pre class="cli"><code>## Committing: Site updated at 2016-02-22 03:37:22 UTC
</code></pre>

      <p>in the above error message in the “Problem” section with commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commits/748fbd7">748fbd7</a> on GitHub.  Due to the growth of this site, each commit
on the <code>master</code> branch now involves over 400 files and thousands
of lines of insertion and deletion.  If I provide a direct link to
the commit, it will take too long to load the page.  Therefore, I
give the commit history at a particular node instead. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (1)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/"/>
    
    <updated>2016-02-22T10:23:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I installed msysgit 1.9.0, and added its bash utilities to <code>PATH</code>.</p>

<h2 id="problem">Problem</h2>

<p>I attempted to open an HTML file with <code>curl</code>.  However, I got the
following error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (curl 'http://www.vim.org/index.html' -o 'C:/Temp
/PortableApps/gVimPortable/Data/Temp/VIA1ED5.html')
curl: (1) Protocol "'http" not supported or disabled in libcurl
shell returned 1
Hit any key to close this window...
</code></pre>

<h2 id="discussion">Discussion</h2>

<p>In the first line of the code block, <code>cmd.exe</code> with option <code>/c</code> ran
the command in the parenthesis <code>()</code>.  I copied the command inside <code>()</code>
and ran it in <code>cmd.exe</code>, and the error was reproduced.</p>

<p>It’s easy to find the cause of the problem.  I typed “curl protocol”
on the Google search web page, and the rest of the error message
appeared in the list of suggestions.  In the first search result,
which was <a href="http://stackoverflow.com/q/6684235">a Stack Overflow question</a>, I learnt why this
error occurred from the first answer—in the Command Prompt, one
needs to use double quotes <code>""</code> instead of single quotes <code>''</code>.  In Git
Bash, this <em>doesn’t</em> matter.</p>

<p>Since <code>curl</code> was bundled with msysgit, I suspected that the installed
version of Git was too old.  I then upgraded it.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>For a shell program (e.g. Command Prompt, bash), the option <code>-c</code>
(or <code>/c</code>) stands for “command”, and what’s left is the command to
be run.</li>
  <li><code>curl</code> will grab content from the input URL and display it as
standard output.  To save the downloaded content in a file, the
flag <code>-o</code>, which means “output”, can be used.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Testing Octopress and Ruby 2.0 on Windows 7 (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/testing-octopress-and-ruby-2-dot-0-on-windows-7-3/"/>
    
    <updated>2016-02-22T01:05:04+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/testing-octopress-and-ruby-2-dot-0-on-windows-7-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I was writing <a href="https://vincenttam.github.io/blog/2016/02/21/miktex-update-2/">my previous post</a>, which was about my recent
Mik$\rm \TeX$ update.</p>

<h2 id="problem">Problem</h2>

<p>After having finished it, I tried <code>rake generate</code>, and got results
similar to the first picture of <a href="https://vincenttam.github.io/blog/2014/09/02/testing-octopress-and-ruby-2-dot-0-on-windows-7-1/">the first post in this series</a>.</p>

<p>Last time, I solved this problem by creating the batch file
<code>python2.bat</code> in the folder where Python had been installed (i.e.
<code>C:\Python27</code>).  This time, the BAT file is already there.  In (Git)
CMD, both <code>which python</code> and <code>which python2</code> are fine.  However, in
Git bash, I run into trouble.</p>

<pre class="cli"><code>Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ which python
/c/Python27/python

Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ which python2
which: no python2 in (/c/Users/Owner/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/b
in:/mingw64/bin:/usr/bin:/c/Users/Owner/bin:/c/ProgramData/Oracle/Java/javapath:
/c/Perl/site/bin:/c/Perl/bin:/c/Program Files (x86)/Intel/iCLS Client:/c/Program
 Files/Intel/iCLS Client:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem
:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Program Files (x86)/Intel/OpenCL 
SDK/2.0/bin/x86:/c/Program Files (x86)/Intel/OpenCL SDK/2.0/bin/x64:/c/Program F
iles (x86)/Common Files/Roxio Shared/DLLShared:/c/Program Files (x86)/Common Fil
es/Roxio Shared/OEM/DLLShared:/c/Program Files (x86)/Common Files/Roxio Shared/O
EM/DLLShared:/c/Program Files (x86)/Common Files/Roxio Shared/OEM/12.0/DLLShared
:/c/Program Files (x86)/Roxio 2010/OEM/AudioCore:/c/Program Files/Intel/Intel(R)
 Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Eng
ine Components/IPT:/c/Program Files (x86)/Intel/Intel(R) Management Engine Compo
nents/DAL:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT
:/c/Temp/MikTeXPortable/miktex/bin:/c/MinGW/bin:/c/Temp/gnuwin32/bin:/c/ctags58:
/c/Temp/PortableApps/gVimPortable:/c/cscope-15.8a-win32rev1-static:/c/Python27:/
c/Ruby200-x64/bin:/c/Temp/pdf2svg-0.2.2:/c/Program Files (x86)/Skype/Phone:/cmd:
/usr/bin/vendor_perl:/usr/bin/core_perl)

Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ cd /c/Python27/

Owner@Owner-PC MINGW64 /c/Python27
$ ls
DLLs/     Lib/         NEWS.txt     pythonw.exe*  Tools/
Doc/      libs/        python.exe*  README.txt    w9xpopen.exe*
include/  LICENSE.txt  python2.bat  tcl/
</code></pre>

<p>Even though the generated contents can still be locally previewed,
<strong>how can I get rid of this error message?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I googled “which no python2 in” (<em>with surrounding double quotes</em>),
and found one line in the post <a href="http://nathanielstory.com/2013/12/28/jekyll-on-windows-with-cygwin.html"><em>Jekyll on Windows With Cygwin</em></a>
written by Nathan Story very useful.  While reading his post, I
<em>didn’t</em> read it from the start.  Instead, I just searched for
“python2”, and quickly saw the <code>ln</code> command.</p>

<p>The file type of <code>python2</code> created by <code>ln</code> was <em>different</em> from what I
expected: <code>ls -l</code> <em>didn’t</em> show that <code>python2</code> was a symbolic link,
and <code>file</code> even said that it was an executable file.</p>

<pre class="cli"><code>Owner@Owner-PC MINGW64 /c/Python27
$ ln -s python.exe python2

Owner@Owner-PC MINGW64 /c/Python27
$ ls -l
total 677
drwxr-xr-x 1 Owner 197121      0 May 25  2014 DLLs/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 Doc/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 include/
drwxr-xr-x 1 Owner 197121      0 Oct  9  2014 Lib/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 libs/
-rw-r--r-- 1 Owner 197121  38573 Nov 10  2013 LICENSE.txt
-rw-r--r-- 1 Owner 197121 375685 Nov 10  2013 NEWS.txt
-rwxr-xr-x 1 Owner 197121  26624 Nov 10  2013 python.exe*
-rwxr-xr-x 1 Owner 197121  26624 Nov 10  2013 python2*
-rw-r--r-- 1 Owner 197121     22 Aug 31  2014 python2.bat
-rwxr-xr-x 1 Owner 197121  27136 Nov 10  2013 pythonw.exe*
-rw-r--r-- 1 Owner 197121  55208 Oct 27  2013 README.txt
drwxr-xr-x 1 Owner 197121      0 May 25  2014 tcl/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 Tools/
-rwxr-xr-x 1 Owner 197121  49664 Nov 10  2013 w9xpopen.exe*

Owner@Owner-PC MINGW64 /c/Python27
$ file python2
python2: PE32 executable (console) Intel 80386, for MS Windows
</code></pre>

<p>Finally, <code>rake</code> <em>doesn’t</em> give me strange output.</p>

]]></content>
    
  </entry>
  
</feed>
