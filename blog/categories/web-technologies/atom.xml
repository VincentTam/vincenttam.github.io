<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Technologies | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/web-technologies/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-03-24T23:03:50+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Multiple H1 Tags]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags/"/>
    
    <updated>2016-03-19T16:58:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/19/multiple-h1-tags</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The SEO Analysis of <a href="https://www.bing.com/webmaster">Bing Webmaster</a> complained that
each page of my blog had <em>more than one</em> <code>&lt;h1&gt;</code> tag.</p>

<p>I viewed the HTML code for the homepage of this blog to verify the
warning message of this SEO tool.  Then I found over three instances
of the <code>&lt;h1&gt;</code> tag, at the top, in the sidebar, etc.  To facilitate
this process, I used <code>git grep "&lt;h1&gt;"</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>I searched for “h1” in the issues and the pull requests of <a href="http://octopress.org">Octopress</a>
on <a href="https://github.com/imathis/octopress">GitHub</a>, and I got <em>no</em> results.  I wondered why <em>nobody</em> reported
this.  As a result, I went to Google to search “octopress more than
one h1 tag”.  Finally, reading [this article][src], I gave up the idea
of changing the <code>&lt;h1&gt;</code> tags in the sidebar into <code>&lt;h2&gt;</code>.</p>

<h2 id="remarks">Remarks</h2>

<p>Like <a href="https://www.google.com/webmaster">Google Webmaster</a>, I <em>can’t</em> simply reset the URL
of the site.  To insert an ‘s’ into the protocol “http”, one needs to
deleted the site and add it again.  Fortunately, the verification of
site ownership <em>doesn’t</em> need to be done again.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Google Webmaster Sitemap Warning]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning/"/>
    
    <updated>2016-03-12T21:19:19+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/12/google-webmaster-sitemap-warning</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I uploaded my <code>sitemap.xml</code> to Google Webmaster, but I received
warnings: <code>404.html</code> was in the sitemap, but the crawl was blocked by
<code>robots.txt</code>.</p>

<h2 id="discussion">Discussion</h2>

<p>Obviously, I should find a way to exclude the 404 page from the
sitemap.  In the old days, one can add the path name of the page to be
excluded.<sup id="fnref:ref"><a href="#fn:ref" class="footnote">1</a></sup></p>

<p>However, the file <code>plugins/sitemap_generator.rb</code> has been <em>deleted</em>
since commit <a href="https://github.com/octopress/octopress/commit/52f9119">52f9119</a>.  <strong>How can the 404 page be excluded from the
sitemap then?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Searching “octopress sitemap exclude url” <em>won’t</em> help.  Actually,
adding a line <code>sitemap: false</code> in <code>source/404.md</code> will do.</p>

<div class="footnotes">
  <ol>
    <li id="fn:ref">

      <p>For details, refer to <a href="http://droidyue.com/blog/2014/06/20/custom-octopress-404-page/index.html"><em>自定義Octopress404頁面</em></a> written by
androidyue. <a href="#fnref:ref" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Fixed Jekyll-Bootstrap Asset Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/15/fixed-jekyll-bootstrap-asset-path/"/>
    
    <updated>2016-02-15T01:18:31+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/15/fixed-jekyll-bootstrap-asset-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>As I’ve said in <a href="/blog/2016/02/08/jekyll-blog-page-build-warning/"><em>Jekyll Blog Page Build Warning</em></a>,
<a href="https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0">GitHub Pages have upgraded to 3.0</a>.</p>

<h2 id="problem">Problem</h2>

<p>The Twitter theme for every post in <a href="/blog2">Blog 2</a> was <em>gone</em>, but
the home page and the archive page still looked good.</p>

<p>I viewed <a href="https://github.com/plusjade/jekyll-bootstrap">Jekyll-Bootstrap</a>’s <a href="https://github.com/plusjade/jekyll-bootstrap/issues">issue list</a>.  The
”{{ ASSET_PATH }}” in the title of
<a href="https://github.com/plusjade/jekyll-bootstrap/issues/295">issue #295</a> caught my eyes.  Feeling that changing
<code>_config.yml</code> is too troublesome and prone to error, I clicked some
links for related web pages, such as
<a href="http://jekyllrb.com/docs/upgrading/2-to-3/#layout-metadata">a relevant page in Jekyll’s documentation</a>, but I <em>didn’t</em> know
what to do.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>It turns out that this issue is the <em>same</em> as <a href="https://github.com/plusjade/jekyll-bootstrap/issues/290">issue #290</a>.
The status of this issue is <em>closed</em> because some ways of fixing the
problem have been shared.  Since <a href="https://github.com/plusjade/jekyll-bootstrap/pull/293/files">qh’s fix</a> has received
positive comments, I adopt his approach.</p>

<p><a href="/blog/2015/08/06/my-git-command-list-3/">Before learning more Git commands this summer</a>, I would change
this <em>manually</em>.  However, fearing that I would <a href="https://github.com/qh/jekyll-bootstrap/commit/a2526d03dad245ea389c918055ac7fe46948ab1d">make a typo</a>, I
seek an automatic way to apply the changes in <code>_includes/JB/setup</code>.</p>

<p>I searched “git apply patch” on Google, and reached
<a href="http://stackoverflow.com/q/7827002">this Stack Overflow question</a> eventually.  The command</p>

<pre class="cliUB"><code>$ curl https://github.com/JustinTulloss/zeromq.node/pull/47.patch &gt; /tmp/47.patch
</code></pre>

<p>gave me a file (<em>without EOF</em>) in <code>/tmp</code>.</p>

<pre class="cliUB"><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href="https://patch-diff.githubusercontent.com/raw/JustinTulloss/zeromq.node/pull/47.patch"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>I then tried using <code>git apply</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/blog2]$ git apply --stat /tmp/47.patch
fatal: unrecognized input
</code></pre>

<p>Even though I added the <code>--stat</code> option, the bash still said that it’s
<code>fatal</code>.  I tried googling “git apply fatal”, but I <em>couldn’t</em> see
anything useful.  The third answer to this Stack Overflow question
cleared my doubts: by comparing the date of the answers, one knows
that <code>patch-diff.githubusercontent.com</code> should be used instead.</p>

<p>Since the reputation of the owner of the second answer is higher,
<em>not</em> having enough time to check their differences, I used <code>git am</code>
instead of <code>git apply --check</code>.  Finally, everything went smooth and
the <code>git push</code> was successful.  Originally, I intended to leave a
short Git comment message with a few helpful links.  However,
everything went so good that I <em>didn’t</em> have the chance to do that in
the Git repository for Blog 2.  Therefore, I recorded my thoughts
here.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Jekyll Blog Page Build Warning]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/08/jekyll-blog-page-build-warning/"/>
    
    <updated>2016-02-08T01:45:25+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/08/jekyll-blog-page-build-warning</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>The page build of Jekyll is quite easy because one <em>doesn’t</em> need to
locally generate the HTML code of the Markdown source with <code>rake</code>.
One just needs to directly save, commit and push the source code
online.  The GitHub page support will handle the rest for you.</p>

<h2 id="problem">Problem</h2>

<p>I wrote <a href="/blog2/essai/2016/02/07/bon-nouvel-an-chinois">an article in my Jekyll blog</a> yesterday afternoon.  From
what was shown in the terminal, the page build was smooth as expected.
Then, I received a warning from <a href="https://github.com">GitHub</a>.</p>

<picture class="fancybox" title="The warning email from GitHub">
  <source srcset="/images/posts/Blog2/email635.png" media="(min-width: 400px)" />
  <img alt="The warning email from GitHub" src="https://vincenttam.github.io/images/posts/Blog2/email300.png" />
</picture>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>The problem can be easily solved: just follow what the email says.
I’ve visited <a href="https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0">this blog article on GitHub</a> to know more about the
GitHub Pages upgrade.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-05T00:18:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to work on
math.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<p><figure class='code'><figcaption><span>Put this at the bottom </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">script</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">head</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">done</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">done</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;loaded&#39;</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;complete&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">done</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">success</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">head</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="nt">&lt;/script&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>getScript(“https://cdn.mathjax.org/mathjax/latest/MathJax.js?” +
</span><span class='line'>    “config=TeX-AMS-MML_HTMLorMML” +
</span><span class='line'>    “,https://vincenttam.github.io/javascripts/MathJaxLocal.js”,
</span><span class='line'>    function(){});<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>})();
</span><span class='line'><span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<hr />
<p>(Added on SEP 3RD, 2015)</p>

<p>Now I realised that kramdown will leave the trailing two backslashes
at each line inside <code>&lt;div&gt;</code> tags in Markdown source files <em>untouched</em>.</p>

<hr />

<p>In <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
