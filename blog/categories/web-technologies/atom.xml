<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Technologies | Blog 1]]></title>
  <link href="http://vincenttam.github.io/blog/categories/web-technologies/atom.xml" rel="self"/>
  <link href="http://vincenttam.github.io/"/>
  <updated>2014-10-26T00:46:09+08:00</updated>
  <id>http://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Test Embedded Fancybox Inline Element]]></title>
      <link href="http://vincenttam.github.io/blog/2014/09/13/test-embedded-fancybox-inline-element/"/>
    
    <updated>2014-09-13T13:48:47+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/09/13/test-embedded-fancybox-inline-element</id>
    
      <content type="html"><![CDATA[<h2 id="why">Why?</h2>

<p>It’s because I’ve some code block/console input/output which have more
than 80 characters and their width <em>can’t</em> be reduced.  For example,
in <a href="/blog/2014/01/05/gnu-ddrescue-a-powerful-data-recovery-tool/"><em>GNU ddrescue—A Powerful Data Recovery Tool</em></a>, there’s a
<code>&lt;pre&gt;</code> tag which is very wide.  There’s a scrollbar at the bottom,
but it’s <em>hard</em> to see.</p>

<p>{% img fancybox /images/posts/FancyboxInline/scroll1.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig1’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll2.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig2’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll3.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig3’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll4.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig4’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll5.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig5’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll6.png 900 ‘Move the mouse to the right and click for the next image’ ‘fig6’ %}</p>

<p>{% img fancybox noscr nopr /images/posts/FancyboxInline/scroll7.png 900 ‘Move the mouse to the right and click to replay the slideshow’ ‘fig7’ %}</p>

<h2 id="result">Result</h2>

<p>Click <a href="#eg1" class="cliwide">here</a> to view the console message, which has
160 columns.  It’s so wide that putting it into a popup dialog can
help.</p>

<div id="eg1" class="noscr">
<pre class="cli"><code class="UBMono">   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition's system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)
Command (m for help): l
 0  Empty            c  FAT32 LBA       1e  Hidd FAT16 LBA  52  CP/M            80  Minix &lt;1.4a     9f  BSD/OS          bf  Solaris         eb  BeOS fs
 1  FAT12            e  FAT16 LBA       24  NEC DOS         53  OnTrackDM6 Aux3 81  Minix &gt;1.4b     a0  Thinkpad hib    c1  DRDOS/2 FAT12   ee  GPT
 2  XENIX root       f  Extended LBA    39  Plan 9          54  OnTrack DM6     82  Linux swap      a5  FreeBSD         c4  DRDOS/2 smFAT16 ef  EFI FAT
 3  XENIX usr       10  OPUS            3c  PMagic recovery 55  EZ Drive        83  Linux           a6  OpenBSD         c6  DRDOS/2 FAT16   f0  Lnx/PA-RISC bt
 4  Small FAT16     11  Hidden FAT12    40  Venix 80286     56  Golden Bow      84  OS/2 hidden C:  a7  NeXTSTEP        c7  Syrinx          f1  SpeedStor
 5  Extended        12  Compaq diag     41  PPC PReP Boot   5c  Priam Edisk     85  Linux extended  a8  Darwin UFS      da  Non-FS data     f2  DOS secondary
 6  FAT16           14  Hidd Sm FAT16   42  SFS             61  SpeedStor       86  NTFS volume set a9  NetBSD          db  CP/M / CTOS     f4  SpeedStor
 7  HPFS/NTFS       16  Hidd FAT16      4d  QNX4.x          63  GNU HURD/SysV   87  NTFS volume set ab  Darwin boot     de  Dell Utility    fd  Lnx RAID auto
 8  AIX             17  Hidd HPFS/NTFS  4e  QNX4.x 2nd part 64  Netware 286     88  Linux plaintext b7  BSDI fs         df  BootIt          fe  LANstep
 9  AIX bootable    18  AST SmartSleep  4f  QNX4.x 3rd part 65  Netware 386     8e  Linux LVM       b8  BSDI swap       e1  DOS access      ff  XENIX BBT
 a  OS/2 boot mgr   1b  Hidd FAT32      50  OnTrack DM      70  DiskSec MltBoot 93  Amoeba          bb  Boot Wizard Hid e3  DOS R/O
 b  FAT32           1c  Hidd FAT32 LBA  51  OnTrackDM6 Aux1 75  PC/IX           94  Amoeba BBT      be  Solaris boot    e4  SpeedStor
Command (m for help): x
Expert command (m for help): m
Command action
   b   move beginning of data in a partition
   c   change number of cylinders
   e   list extended partitions
   f   fix partition order
   g   create an IRIX (SGI) partition table
   h   change number of heads
   m   print this menu
   p   print the partition table
   q   quit without saving changes
   r   return to the main menu
   s   change number of sectors/track
   v   verify the partition table
   w   write table to disk and exit
Expert command (m for help): q
root@ubuntu:~# <span class="err">ddrescue -r1 -n -S -v /dev/sdf1 /dev/sda5 backup1.log</span>
ddrescue: Output file exists and is not a regular file.
ddrescue: Use <span class="UBHLCode">`--force'</span> if you really want to overwrite it, but be
ddrescue: aware that all existing data in output file will be lost.
Try `ddrescue --help' for more information.
root@ubuntu:~# ls
root@ubuntu:~# ddrescue -r1 -n -S <span class="UBHLCode">-f</span> -v /dev/sdf1 /dev/sda5 backup1.log


About to copy 3999 MBytes from /dev/sdf1 to /dev/sda5
    Starting positions: infile = 0 B,  outfile = 0 B
    Copy block size: 128 sectors
Sector size: 512  bytes
Max retries: 1
Direct: no    Sparse: yes    Split: no    Truncate: no

Press Ctrl-C to interrupt
Initial status (read from logfile)
rescued:         0 B,  errsize:       0 B,  errors:       0
Current status
rescued:   377286 kB,  errsize:    4096 B,  current rate:    2686 kB/s
rescued:   594792 kB,  errsize:   12288 B,  current rate:    1179 kB/s
   ipos:   594804 kB,   errors:       2,    average rate:     389 kB/s
   opos:   594804 kB,     time from last successful read:       0 s
Copying non-tried blocks...
</code></pre>
</div>

<p>Unluckily, I <em>can’t</em> to anything about the horizontal scrollbar at the
bottom.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Detexify $\rm \LaTeX$ Handwritten Symbol Recogntion &#9733;]]></title>
      <link href="http://detexify.kirelabs.org/classify.html"/>
    
    <updated>2014-09-07T17:07:43+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/09/07/detexify-$-slash-slash-rm-slash-slash-latex$-handwritten-symbol-recogntion</id>
    
      <content type="html"><![CDATA[<p>Searching symbols in
<a href="http://www.ctan.org/tex-archive/info/symbols/comprehensive/"><abbr title="Comprehensive TeX Archive Network">CTAN</abbr>’s Comprehensive $\rm \LaTeX$ Symbol List</a> is
time-consuming.  For example, when I was writing my
<a href="/blog/2014/09/07/a-fake-function/" title="A Fake Function">previous post</a> about groups, I made use of angle brackets and the
‘$\circ$’ symbol for composition of two functions.  At first, I typed
<code>&lt;</code> and <code>&gt;</code>, but they <em>didn’t</em> look good.  In fact, one should use
‘$\langle$’.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>  How can one find the commands for those characters?
Detexify is the answer for commonly used symbols.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>See Robert Dale’s <a href="http://web.science.mq.edu.au/~rdale/resources/writingnotes/latexstyle.html#anglebrackets"><em>$\rm \LaTeX$ Style Tips</em></a> for details. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
<p><a rel="full-article" href="http://vincenttam.github.io/blog/2014/09/07/detexify-$-slash-slash-rm-slash-slash-latex$-handwritten-symbol-recogntion/">&infin; Permalink</a></p>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Zooming SVG in Web Browsers]]></title>
      <link href="http://vincenttam.github.io/blog/2014/08/02/zooming-svg-in-web-browsers/"/>
    
    <updated>2014-08-02T18:07:08+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/08/02/zooming-svg-in-web-browsers</id>
    
      <content type="html"><![CDATA[<p>In my post about proving Pappus’s Hexagon Theorem<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, I inserted some
SVG graphics to illustrate the ideas.</p>

<p>{% img center /images/posts/PappusHexThm/PappusHexThm4.svg 600 %}<br />
<small>An example illustrating the difficulty of enlarging an SVG
graphics for ordinary users.  The image is borrowed from the post
about proving Pappus’s Hexagon Theorem.<br />
<a href="/downloads/code/PappusHexThm4.tex">$\rm \LaTeX$ Source code</a></small></p>

<p><strong>How can one enlarge SVG images <em>only</em> within web browsers?</strong></p>

<object type="image/svg+xml" data="/downloads/code/svgpan_1.2.2/PappusHexThm4.svg" width="800" height="600">
  Your browser does not support SVG
</object>
<p><small>A working example showing the zooming, panning and dragging
functions of SVG graphics.  Drag the figure to translate it, and
scroll to enlarge/reduce it.<br />
<a href="/downloads/code/svgpan_1.2.2/PappusHexThm4.svg">Source code</a></small></p>

<!-- more -->

<p>Thanks to Andrea Leofreddi, SVG graphics can now be enlarged <em>within</em>
browsers.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p>The instructions on Leofreddi’s blog post is quite easy to understand.
Then, I tried his script.</p>

<p>First, I copied lines 4–5 of the source code of official demo (a
tiger) to my file.  (i.e. <code>PappusHexThm4.svg</code>)  I also closed the <code>&lt;g
id="viewport" transform="translate(200,200)"&gt;</code> tag at the bottom of my
file.  However, I saw <em>nothing</em> in a web browser.</p>

<p>Second, I deleted <code>transform="translate(200,200)"</code>.  What I could see in
the web browser was a small picture.  I <em>couldn’t</em> use the scroll
wheel on the mouse to enlarge the figure.  I dragged the picture to the
right, but part of the image is truncated after the drag.</p>

<p>Third, if I remove <code>width="152.832pt" height="98.239pt" viewBox="0 0
152.832 98.239"</code>, then it’s done!</p>

<hr />
<p>(Added on AUG 03, 2014)</p>

<p>Yesterday, I <em>didn’t</em> know the code for enlarging an SVG image
embedded by an <code>&lt;object&gt;</code> tag.  As a result, the loaded image was
<em>too</em> small.  I’ve just checked out a guide on <abbr title="Mozilla Developer Network">MDN</abbr> about the
<code>transform</code> attribute of <code>&lt;svg&gt;</code> tags<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>, and now I know how to make
it bigger by the function <code>matrix(&lt;a&gt;,&lt;b&gt;,&lt;c&gt;,&lt;d&gt;,&lt;e&gt;,&lt;f&gt;)</code>.</p>

<p>Moreover, Chrome supports the scaling of SVG graphics just like the
scaling of other HTML elements.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Tam, V. 2014, Jul 12. <em>Pappus’s Hexagon Theorem</em>. Retrieved from <a href="https://vincenttam.github.io/blog/2014/07/12/pappuss-hexagon-theorem/">https://vincenttam.github.io/blog/2014/07/12/pappuss-hexagon-theorem/</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Leofreddi, A. 2009, Dec 8. <em>SVGPan: a Javascript SVG (Viewer) Pan/Zoom/Drag library</em>. Retrieved from <a href="http://www.cyberz.org/blog/2009/12/08/svgpan-a-javascript-svg-panzoomdrag-library/">http://www.cyberz.org/blog/2009/12/08/svgpan-a-javascript-svg-panzoomdrag-library/</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>MDN. 2014, Feb 23. <em>Transform</em>. Retrieved from <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform">https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform</a> <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Use Lynx Browser]]></title>
      <link href="http://vincenttam.github.io/blog/2014/06/07/use-lynx-browser/"/>
    
    <updated>2014-06-07T13:01:57+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/06/07/use-lynx-browser</id>
    
      <content type="html"><![CDATA[<h2 id="why">Why?</h2>

<p>This morning, I saw <a href="http://www.searchenginepeople.com/blog/see-what-google-sees.html" title="Use This Browser To See What Google Does">a post on Search Engine People Blog</a>,
and decided to make a summary of it, so that I <em>don’t</em> have to think
of the reasons for using <a href="http://lynx.isc.org/" title="Lynx Browser">Lynx</a> when I’m asked for that next time.</p>

<h3 id="past-usage">Past usage</h3>

<ul>
  <li>Lack of <abbr title="Graphical User Interface">GUI</abbr> web browsers like <a href="https://www.mozilla.org/en-US/firefox/new/" title="Mozilla Firefox">Firefox</a> and <a href="http://www.microsoft.com/en-us/download/internet-explorer.aspx" title="Microsoft Internet Explorer">Internet Explorer</a></li>
  <li>Text browsers were capable of loading contents quickly, if there’s
  <em>no</em> connection problem.</li>
  <li>The Internet wasn’t fast enought for extensive transmission of
  images and flash animations.</li>
</ul>

<h3 id="present-usage">Present usage</h3>

<ul>
  <li>“You really love text and hate images” :)</li>
  <li>“<strong>For marketing to search engines</strong>”
    <ul>
      <li>“<em>See what <abbr title="Search Engine Optimizers">SEOs</abbr> see</em>”: they use browsers similar to Lynx.</li>
    </ul>
  </li>
</ul>

<p><small>Remarks: Due to my laziness, reasons for search engines to use
text browsers, instead of “a modern browser”, are omitted.</small></p>

<!-- more -->

<h2 id="how">How?</h2>

<p>For GNU/Linux, type the command for installing Lynx.  For</p>

<h3 id="ubuntudebian-based-distros">Ubuntu/Debian-based Distros</h3>

<pre class="cliUB"><code>$ sudo apt-get install lynx
</code></pre>

<h3 id="fedora">Fedora</h3>

<pre class="cli"><code>$ su
# yum install lynx
</code></pre>

<h3 id="microsoft-windows">Microsoft Windows</h3>

<p>Refer to the section <em>Lynx Links</em> in the post on Search Engine People
Blog.</p>

<h2 id="what-can-i-see">What can I see?</h2>

<p>This is a screenshot taken in Linux text mode.</p>

<p>{% img fancybox /images/posts/Lynx/Screenshot.png 800 ‘Lynx browser in Linux text mode’ ‘fig1’ %}</p>

<h2 id="some-useful-keys">Some useful keys</h2>

<h3 id="help">Help</h3>

<ul>
  <li>Use <code>k</code> for keymap</li>
  <li>Use <code>h</code> or <code>?</code> for help</li>
</ul>

<h3 id="browsing">Browsing</h3>

<ul>
  <li>Use <code>g</code> for inputting URL</li>
  <li>Use <code>G</code> for inputting URL similar to the one of the current page.</li>
  <li>Use <code>l</code> for displaying URLs of hyperlinks.</li>
  <li>Use <code>&lt;Backspace&gt;</code> for displaying browsing history.</li>
  <li>Use <code>\</code> to view the source code</li>
</ul>

<h3 id="searches">Searches</h3>

<ul>
  <li>Use <code>/</code> for forward search</li>
  <li>Use <code>n</code> for repeating search forwardly</li>
  <li>Use <code>N</code> for repeating search backwardly</li>
</ul>

<h2 id="how-to-save-the-pages">How to save the pages?</h2>

<ul>
  <li>Source code
    <ul>
      <li>Inside Lynx
        <ol>
          <li>Highlight the link using the cursor</li>
          <li>Press <code>d</code> to download the source code</li>
        </ol>
      </li>
      <li>Outside Lynx<br />
  Use the following command</li>
    </ul>

    <pre class="cli">$ lynx -source [URL]</pre>
  </li>
  <li>
    <p>Formatted output</p>

    <pre class="cli">$ lynx -dump [URL]</pre>
  </li>
</ul>

<p>{% include_code Google’s Homepage Downloaded with <code>lynx -dump</code> lang:text LynxDumpGoogle.txt %}</p>

<!-- vim:se tw=70: -->
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Testing jQuery Image Popup]]></title>
      <link href="http://vincenttam.github.io/blog/2014/03/30/testing-jquery-image-popup/"/>
    
    <updated>2014-03-30T01:50:50+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/03/30/testing-jquery-image-popup</id>
    
      <content type="html"><![CDATA[<p>What’s below is a small picture.  The words inside the screenshot
<em>can’t</em> be displayed.  Users may right-click on the picture and select
“View Image”, if there’s a script that enables a magnified image to
show up right after a user has clicked on the image, it’ll be <em>more
convenient</em> for the user.</p>

<p>{% img fancybox /images/posts/GitStatusOfMyOctopressFolder/GitStatus.png ‘My Big Image’ ‘fig1’ %}</p>

<p>I tried following <a href="http://goo.gl/5qCaj">Clapper’s guide</a>, but as I generate
the site using <code>rake</code>, I got two errors. The first one was about CSS,
while the second one was about one of the two required Ruby gems.
(Namely, <a href="http://goo.gl/qeN28">mini_magick</a> and <a href="http://goo.gl/0oZy6">Erubis</a>.)</p>

<!-- more -->

<p>For the first error, I got something like <code>Undefined mixin
'centered'</code>, and so I googled <code>octopress "Undefined mixin
'centered'"</code>.  Using this query string, no match was returned.
Instead, Google performed a similar search using a query string
<em>without the double quotes</em>.  Among the search results, I found an
article also written by Clapper.<sup id="fnref:toc"><a href="#fn:toc" class="footnote">1</a></sup>  I’ve known that I also need to
download <code>sass/custom/_mixins.scss</code>
<a href="http://goo.gl/qvYPRI">from his GitHub repo</a>.</p>

<p>For the second error, I’ve realised that I forgot to include those
gems in <code>Gemfile</code>, because I lacked knowledge in Ruby, and the guide
didn’t mention that.  In fact, adding the following two lines into
<code>Gemfile</code> solved the problem.</p>

<pre><code>gem 'mini_magick'
gem 'erubis'
</code></pre>

<p><del>I don’t know why.  The plugin doesn’t work, but</del> I can get
jQuery working here.  The following script from Clapper doesn’t work
for me.</p>

<p>{% codeblock jQuery on the Google CDN lang:html http://goo.gl/hOF4mR %}
<script type="text/javascript">
  // Revert jQuery's '$' alias, to avoid clashes with ender.js. NOTE:
  // Use
  // jQuery(...), instead of $(...) from here on.
  jQuery.noConflict();
</script>
{% endcodeblock %}</p>

<p>The <code>noConflict</code> method disabled my button for hiding the sidebar on
the right hand side.  <del>Anyways, I gave up trying this
plugin.</del>  Before trying <del>it again</del> more things, I think
I should have more knowledge in jQuery first.</p>

<p>To get things work, I played some <em>dirty and little</em> tricks on
<code>plugins/img_popup.html.erb</code>.  Since some features of Octopress’s
codeblock are <em>not</em> working<sup id="fnref:no_start_num"><a href="#fn:no_start_num" class="footnote">2</a></sup>, I just manually include
part of the code.</p>

<p>{% codeblock My adaptations of the plugin lang:js+erb http://goo.gl/53fIEZ %}
$(document).ready(function() {
  $(“#image-dialog-&lt;%= id %&gt;”).hide();
  $(“#image-dialog-&lt;%= id %&gt;”).dialog({
    autoOpen:  false,
    modal:     true,
    draggable: false,
    minWidth:  &lt;%= full_width + 40 %&gt;,
    minHeight: &lt;%= full_height + 40 %&gt;,
    &lt;% if title -%&gt;
    title:     “&lt;%= title %&gt;”,
    &lt;% end -%&gt;
    show:      ‘scale’,
    hide:      ‘scale’
  });</p>

<p>$(“#image-&lt;%= id %&gt;”).click(function() {
    $(“#image-dialog-&lt;%= id %&gt;”).dialog(‘open’);
  });</p>

<p>});
{% endcodeblock %}</p>

<p>What I’ve actually done in the above code block is to replace <code>jQuery</code>
with <code>$</code>.  At that time, if I ran <code>rake generate</code>, Octopress let me
pass.  However, when I locally previewed the result, clicking on the
picture <em>couldn’t</em> trigger a popup window showing a larger picture.</p>

<p>I tried comparing the generated HTML source code of my site and that
of Clapper’s site unproductively.  I decided to give up, and wrote a
paragraph on this.  Then I removed the related files and sections of
code.  Since I was running <code>rake preview</code>, I pressed <code>&lt;F5&gt;</code> and
expected to see a <em>static</em> picture.  I was surprised to see <em>two</em>
pictures.  The lower one was a static picture that I had seen for
numerous times during this test.  The uppper one is smaller, and as I
clicked on it, a popup window showed up.  This result amazed me.  As a
result, I decided to grab back the files from Clapper’s GitHub repo,
and studied his Sass settings.</p>

<p>I re-worked the whole thing again, and tried adapting Clapper’s Sass
rules to mine, but I <em>couldn’t</em> manage to create the popup window
again.  Then I tried to reduce the complexity of the relations of the
SCSS files by reducing the amount of files.  I appended the following
lines of code to <code>sass/screen.scss</code>. (You may refer to
<a href="http://goo.gl/BNqlL7">my original file</a>.)</p>

<p>{% codeblock My <em>temporary</em> <code>sass/screen.scss</code> lang:scss %}
@import “compass”;
@include global-reset;</p>

<p>@import “custom/colors”;
@import “custom/fonts”;
@import “custom/layout”;
@import “base”;
@import “partials”;
@import “plugins/<em>*/</em>”;
@import “custom/styles”;
/* I appended the following lines. */
@import “custom/mixins”;</p>

<p>.caption {
    font-style: italic;
    font-size: 90% !important;
    text-align: center;
    @include centered(100%);
}</p>

<p>div.imgpopup {
    border: 1px solid $base2;
    @include rounded-border(10px);
    @include centered(60%);
    margin: 10px;
    text-align: center;
    .caption {
	margin: 0 !important;
    }
}</p>

<p>.screen {
    display: none;
}</p>

<p>.illustration {
        @include centered(100%);
}
{% endcodeblock %}</p>

<p>I did something strange: <em>while <code>rake preview</code> was running</em>, in my
<code>sass/screen.scss</code>, I commented the line <code>@import custom/mixins</code>.  One
would expect I got error due to the line <code>@include centered(100%)</code>.
Although the Solarized theme was gone, the image popup window was
<em>back</em>.  Without changing other lines of code, I repeated the process
for a few times, and discovered that if <code>@import custom/mixins</code> was
<em>gone</em>, then the popup window was <em>back</em>.  It was important for me
<em>not to stop the <code>rake preview</code> command</em>. Otherwise, the command <code>rake
generate</code> would <em>fail</em> me.  I wondered how these two lines could
coexist.  I finally noticed that the <code>screen</code> class was <em>hidden</em> due
to <code>display: none;</code>!  I commented that line and imported
<code>sass/custom/_mixins.scss</code>, then the two images are <em>back</em>!</p>

<p>This time, in order to find out useful information such as the class
name and the id of relevant HTML elements, I used Firefox to quickly
inspect the code.  Finally, I found out that for pictures that
<em>couldn’t</em> trigger a popup window, it was inside a <code>&lt;div&gt;</code> container
of classes <code>illustration</code> and <code>print</code>, and there’s <em>another</em> image in
<em>another</em> <code>&lt;div&gt;</code> container of classes <code>imgpopup</code> and <code>screen</code>.
However, it didn’t show up because of the line <code>display: none;</code> inside
the <code>screen</code> class.  Looking at Clapper’s Sass settings again on his
GitHub repo, I eventually have a clue on the two SCSS code blocks in
Clapper’s blog post about his Octopress image popup plugin.</p>

<p>The <em>true</em> reason for my failure in creating the image popup window at
the beginning is on line 20 of the code block below: it should be
<code>print</code> instead of <code>screen</code> since it’s a user’s custom Sass rule for
the display on the web browser. (i.e. <em>screen</em>), and we want to <em>hide</em>
the static picture, which is for printing.</p>

<p>{% codeblock Correct <code>sass/custom/_screen.scss</code> lang:scss http://goo.gl/Vw52BS %}
.caption {
    font-style: italic;
    font-size: 80% !important;
    text-align: center;
    @include centered(100%);
}</p>

<p>div.imgpopup {
    border: 1px solid #cccccc;
    @include rounded-border(10px);
    margin: 10px;
    @include centered(80%);
    text-align: center;</p>

<pre><code>.caption {
margin: 0 !important;
} }
</code></pre>

<p>.print { // It should be <em>print</em>, instead of <em>screen</em>.
    display: none;
}
{% endcodeblock %}</p>

<p>In Clapper’s guide, the SCSS code block below the above one should be
included in <code>sass/custom/_print.scss</code>.  Then, a new file
<code>sass/print.scss</code> is created.</p>

<p>{% codeblock <code>sass/screen.scss</code> lang:scss %}
@import “custom/print”;
{% endcodeblock %}</p>

<hr />

<!-- vim:set tw=70:wrap: -->
<div class="footnotes">
  <ol>
    <li id="fn:toc">
      <p><a href="http://goo.gl/hOF4mR">http://goo.gl/hOF4mR</a> <a href="#fnref:toc" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:no_start_num">
      <p><a href="http://goo.gl/o5IeWk">http://goo.gl/o5IeWk</a> <a href="#fnref:no_start_num" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
