<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="http://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://vincenttam.github.io/"/>
  <updated>2015-03-08T18:01:52+08:00</updated>
  <id>http://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Updated VIMRC for Vundle]]></title>
      <link href="http://vincenttam.github.io/blog/2015/02/28/updated-vimrc-for-vundle/"/>
    
    <updated>2015-02-28T16:30:16+08:00</updated>
    <id>http://vincenttam.github.io/blog/2015/02/28/updated-vimrc-for-vundle</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Three days ago, I made a change in <a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786">my VIMRC on *nix</a> due to
<a href="https://github.com/gmarik/Vundle.vim" title="A Vim plugin manager">Vundle</a>’s interface change a year ago.<sup id="fnref:src"><a href="#fn:src" class="footnote">1</a></sup><sup id="fnref:vundle_change"><a href="#fn:vundle_change" class="footnote">2</a></sup></p>

<p>With the following <a href="http://www.vim.org">Vim</a> editor command, the replacement was done
quickly.</p>

<pre><code>:%s/\(Plugin \)\@&lt;="\([^"]*\)"/'\2'/
</code></pre>

<h2 id="problem">Problem</h2>

<p>I got some errors when I opened Vim again.</p>

<pre class="cliUB"><code>Error detected while processing /home/owner/.vimrc:
line   38:
E471: Argument required: Plugin 
line   39:
E471: Argument required: Plugin 
line   40:
E471: Argument required: Plugin 
line   42:
E471: Argument required: Plugin 
line   45:
E471: Argument required: Plugin 
line   46:
E471: Argument required: Plugin 
line   47:
E471: Argument required: Plugin 
line   48:
E471: Argument required: Plugin 
Press ENTER or type command to continue
</code></pre>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>The number of errors I had received was <em>less</em> than that of the
plugins I had installed.  Therefore, it was reasonable for me to
conclude that the lines in my VIMRC for some plugin were <em>still</em>
correct.</p>

<h2 id="solution">Solution</h2>

<p>After I had saved the console error output into a text file, I opened
my VIMRC with Vim, so that I could use <code>38G</code> to jump to the first
erroneous line.  Above that line, I also had some lines starting with
<code>Plugin</code>.  I compared their differences, and jumped to other erroneous
lines as well.  I finally discovered that one should <em>never</em> use a
double quote for indicating the name of the plugin — use single
quote only.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:src">

      <p>Commit <a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786/247f888a3c00d90b42ff0f2e2b367ce3294bf874">247f888a3c00d90b42ff0f2e2b367ce3294bf874</a> of my VIMRC
on Gist. <a href="#fnref:src" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:vundle_change">
      <p>Vundle <a href="https://github.com/gmarik/Vundle.vim/commit/0521de9">version 0.10.2</a> <a href="#fnref:vundle_change" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Switch Tmux Panes and Vim-$\rm \LaTeX$]]></title>
      <link href="http://vincenttam.github.io/blog/2015/02/19/switch-tmux-panes-and-vim-latex/"/>
    
    <updated>2015-02-19T10:37:53+08:00</updated>
    <id>http://vincenttam.github.io/blog/2015/02/19/switch-tmux-panes-and-vim-latex</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="http://byobu.co">Byobu</a> with <a href="http://tmux.sourceforge.net">Tmux</a> backend.<sup id="fnref:pp_tmux"><a href="#fn:pp_tmux" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<ul>
  <li>Moving across panes is inconvenient.</li>
  <li>If I have a Vim vertical/horizontal split in a Tmux pane, I need to
  use <em>two</em> different sets of key bindings to navigate the adjacent
  panes.</li>
  <li>In the copy mode, it’s great that most of the key bindings follow
  from those of <a href="http://www.vim.org">Vim</a>, <em>but not the most important two</em>:
    <ul>
      <li>start selection</li>
      <li>copy</li>
    </ul>
  </li>
</ul>

<h2 id="solution">Solution</h2>

<p>I find two articles on <em>Giant Robots</em> very useful.</p>

<ol>
  <li><a href="http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits"><em>Seamlessly Navigate Vim and tmux Splits</em></a></li>
  <li><a href="http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future"><em>Tmux Copy &amp; Paste on OS X: A Better Future</em></a></li>
</ol>

<p>Therefore, I followed the steps in the first blog post, and installed
<a href="https://github.com/christoomey/vim-tmux-navigator">Vim Tmux Navigator</a>.</p>

<h2 id="another-problem">Another problem</h2>

<p>After the installation of the Vim plugin, I got another problem while
editing my VIMRC: The <code>{Down-Mapping}</code> <em>didn’t</em> work.
<a href="https://github.com/vim-latex/vim-latex">Vim-$\rm \LaTeX$</a> should know the reason.  I found an
article describing a similar problem.<sup id="fnref:choy"><a href="#fn:choy" class="footnote">2</a></sup>  However, I <em>wouldn’t</em>
like to change <code>~/.vim/bundle/vim-latex/plugin/imaps.vim</code>, so I got
stuck at this point for hours.  I tried to substitute <code>{Down-Mapping}</code>
with <code>&lt;C-a&gt;j</code> in VIMRC, but it <em>didn’t</em> work.</p>

<h2 id="lessons-learnt">Lessons Learnt</h2>

<ol>
  <li>
    <p>Accept simple ways to do things</p>

    <p>Even though I <em>can’t</em> set <code>{Down-Mapping}</code> to <code>&lt;C-j&gt;</code>, the Vim
 editor command <code>:TmuxNavigateDown</code> <em>isn’t</em> so hard to type.  I
 failed to realise that typing <code>:tm&lt;Tab&gt;</code> will do, and wasted time
 on that.  Now I accept the use of <em>two</em> different sets of
 keystrokes for switching to the Tmux pane/Vim buffer below.  We
 can look at this problem from another angle.</p>
  </li>
  <li>
    <p>Store a list of windows in a file</p>

    <p>A sample file can be found on Super User.<sup id="fnref:su"><a href="#fn:su" class="footnote">3</a></sup>  I found that if I
 had run Byobu before, a session <code>0</code> would <em>also</em> be created on top
 of <code>tmuxs</code>.  To avoid this problem, remove the first line in the
 sample window list and type <code>byobu attach -t 0</code> starting from the
 second time of opening Byobu.</p>
  </li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp_tmux">

      <p>See <a href="blog/2015/02/14/use-tmux-for-previewing-posts/"><em>Use Tmux for Previewing Posts</em></a> in this blog for
details. <a href="#fnref:pp_tmux" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:choy">

      <p>See <a href="https://chrischoy.github.io/blog/notes/vim-tmux-navigation-and-vim-latex/"><em>Key mapping collision between vim-navigation and vim-latex</em></a>
by Chris Choy for details. <a href="#fnref:choy" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:su">

      <p>See <a href="http://superuser.com/a/747819"><em>Proper Format for Byobu’s windows.tmux?</em></a> on Super
User. <a href="#fnref:su" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Edit Gist Descriptions With Gist.vim]]></title>
      <link href="http://vincenttam.github.io/blog/2014/12/13/edit-gist-descriptions-with-gist-dot-vim/"/>
    
    <updated>2014-12-13T23:58:28+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/13/edit-gist-descriptions-with-gist-dot-vim</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="https://github.com/mattn/gist-vim">Gist.vim</a> to post code to <a href="https://gist.github.com">Gist</a> directly in a <a href="http://www.vim.org">Vim</a> buffer for
efficiency.<sup id="fnref:pp"><a href="#fn:pp" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>In the manual of <a href="https://github.com/mattn/gist-vim">Gist.vim</a>, it’s said that after opening the Gist
buffer in <a href="http://www.vim.org">Vim</a>, one can add/change the description of a <a href="https://gist.github.com">Gist</a> with
<code>:Gist -e -s something</code>.  To add a description for a <a href="https://gist.github.com">Gist</a>, I typed
<code>:Gist -s foo bar ...</code> in a buffer for the particular <a href="https://gist.github.com">Gist</a> — I
tried to use it like <code>:!echo foo bar</code> — and what I got in the list
of my Gists was <em>just</em> the last word.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>After one encounters such a problem, he/she will be likely to solve
the problem within seconds: use a double quote to surround the whole
description.</p>

<p>When I was in doubt of the words in the manual, I used simple examples
for testing, so I could quickly see the output and get the concepts
written in the documentation.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp">

      <p>See <a href="/blog/2014/01/30/posting-code-to-gist-efficiently/"><em>Posting Code to Gist Efficiently</em></a> in Blog 1 for the
reasons of installing <a href="https://github.com/mattn/gist-vim">Gist.vim</a>. <a href="#fnref:pp" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[My Improved Custom Autocompletion Mappings in Vim]]></title>
      <link href="http://vincenttam.github.io/blog/2014/12/13/my-improved-custom-autocompletion-mappings-in-vim/"/>
    
    <updated>2014-12-13T14:40:44+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/13/my-improved-custom-autocompletion-mappings-in-vim</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Inspired by <a href="http://vim-latex.sourceforge.net">$\rm \LaTeX$-Suite</a>, I added some
autocompletion mappings in my VIMRC last year.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup>  Three months
later, I saw the word “FileType” in <a href="http://vimdoc.sourceforge.net/htmldoc/usr_40.html#40.3">Vim’s User Manual</a>,
and shortened these autocommand a little bit.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup>  In my opinion,
it’s incredibly amazing since I can type text at the speed of thought.</p>

<h2 id="problem">Problem</h2>

<p>If I’ve finished editing an HTML file and open another $\rm \LaTeX$
file, then my insert mode mappings will interfere with those defined
by <a href="http://vim-latex.sourceforge.net">$\rm \LaTeX$-Suite</a>.  <strong>How can I restrict my custom
mappings to the current working buffer only?</strong></p>

<!-- more -->

<p>Since I <em>didn’t</em> know how to describe this problem in words in
February, I spent <em>hours</em> searching for webpages on <a href="http://www.google.com">Google</a>, but got
<em>nothing</em>.  At that time, I had focus on my homework and exams, so I
put this problem aside.  As a <a href="https://www.gnu.org/gnu/linux-and-gnu.en.html">GNU/Linux</a> user, I adjust my
wants according to what I know and what I can do, after accepting the
fact that M$ Off* has <em>no</em> known plan to support the free operating
system.</p>

<p>Last night, when I wrote a
<a href="/blog/2014/12/12/how-to-stop-auto-indenting/" title="How to Stop Auto Indenting?">recent linklog about Vim’s auto indenting</a>, I did some
configurations on <a href="http://www.vim.org">Vim</a>.  This reminded me of hte problem of setting
up autocompletion for brackets.  After writing over 150 blog posts in
<a href="http://www.vim.org">Vim</a>, I realise the inconvenience <em>without</em> these keyboard shortcuts
for autocompletion in the insert mode.</p>

<h2 id="solution">Solution</h2>

<p>First, I glanced through the codeblocks in the cited posts in the
<a href="#fn:pp1">first two footnotes</a>.  After that, I googled “autocmd
group”, and found two sites very useful.</p>

<ol>
  <li>
    <p><a href="http://stackoverflow.com/a/8826323"><em>Vim inoremap for specific filetypes</em></a> on Stack
Overflow.</p>

    <p><code>&lt;buffer&gt;</code> is the missing part of the autocommands.</p>
  </li>
  <li>
    <p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/14.html"><em>Autocommand Groups</em></a> on <em>Learn Vimscript the Hard Way</em>.</p>

    <p><code>au!</code> avoids <a href="http://www.vim.org">Vim</a> to slow down after running <code>:so $MYVIMRC</code>.
 Therefore, I also added <code>!</code> after the function <code>MyDiff</code> in my
 VIMRC on M$ Win* 7.<sup id="fnref:vimrc_ms"><a href="#fn:vimrc_ms" class="footnote">3</a></sup></p>
  </li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">
      <p>See <a href="/blog/2013/12/11/links-to-good-posts/"><em>Links to Good Posts</em></a> in Blog 1 for the mappings. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>See the bottom part of
<a href="/blog/2014/01/26/working-with-vims-autocommand-groups/"><em>Working With Vim’s Autocommand Groups</em></a> in Blog 1 for the
shorter mappings. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:vimrc_ms">

      <p>View my VIMRC on M$ Win* 7 at commit <a href="https://gist.github.com/VincentTam/abc1cbd2b2181ad69165/c11d1a1e42cd5bfbe1e76347b098880e6e73ebc9">c11d1a1</a>.</p>

      <p>This morning, I tried to write similar keyboard shortcuts for
‘&#8217;’, ‘&#8221;’ and ‘`’ at lines 62–63 and 67.  However, typing two
‘&#8221;’s quickly on M$ Win* 7, GVim <em>duplicated</em> my input.
Therefore, I changed the rules so that they would only be invoked
when one quickly typed any one of these characters <em>twice</em>.</p>

      <p>Remarks: On Ubuntu 14.04 LTS, I have the <em>same</em> experience.  Thus,
I just copied the whole autocommand group to
<a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786">my VIMRC there</a>. <a href="#fnref:vimrc_ms" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[How to Stop Auto Indenting? &#9733;]]></title>
      <link href="http://vim.wikia.com/wiki/How_to_stop_auto_indenting"/>
    
    <updated>2014-12-12T22:31:11+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/12/how-to-stop-auto-indenting</id>
    
      <content type="html"><![CDATA[<p>After reading this guide, I created a file
<code>$HOME/vimfiles/indent/html.vim</code> with only one line.</p>

<pre><code>let b:did_indent = 1
</code></pre>

<p>In the past, I would <code>:setlocal noautoident nosmartindent</code> before
pasting anything into a <a href="http://www.vim.org">Vim</a> buffer.  However, as I paste the
<a href="http://jquery.com">jQuery</a> code from a website while I was writing a recent post, the
code was <em>still</em> wrongly indented.<sup id="fnref:pp"><a href="#fn:pp" class="footnote">1</a></sup>  After reading the last
section of the tip, I now know to use <code>:set paste</code>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp">

      <p>See <a href="/blog/2014/12/11/cheat-in-an-online-quiz/"><em>Cheat in an Online Quiz</em></a> in Blog 1 for the copied
<a href="http://jquery.com">jQuery</a> function. <a href="#fnref:pp" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
<p><a rel="full-article" href="http://vincenttam.github.io/blog/2014/12/12/how-to-stop-auto-indenting/">&infin; Permalink</a></p>]]></content>
    
  </entry>
  
</feed>
