<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-02-10T00:46:09+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Indentation of Titles in Markdown Files in Vim]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/10/indentation-of-titles-in-markdown-files-in-vim/"/>
    
    <updated>2016-02-10T00:05:04+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/10/indentation-of-titles-in-markdown-files-in-vim</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>While I was writing
<a href="/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/">a post about a technical problem encountered</a> while writing
<a href="/blog/2016/02/09/my-venn-diagram-mistake/">another post about Venn diagram</a>, I encountered another
technical problem.</p>

<h2 id="problem">Problem</h2>

<p>I tried including the error message into the previous post by the Vim
editor command <code>:r ~/temp-swp.mkd</code>.  To have it surrounded with
<code>&lt;pre&gt;&lt;code&gt;</code> in HTML, one needs to indent it by four spaces.</p>

<p>{% include_code A section of the error message temp-swp.mkd %}</p>

<p>I usally do this by applying the right-shift operator <code>&gt;</code> to the text
selected in visual line mode.  However, the line starting with <code>#</code>
<em>wasn’t</em> indented like the others.</p>

<p>{% include_code A failed indentation temp-swp1.mkd %}</p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>If I started <a href="http://www.vim.org">Vim</a> with all plugins disabled with <code>vim -u NONE -N</code>,
then the above problem <em>won’t</em> happen.</p>

<h2 id="solution">Solution</h2>

<p>Use the visual block mode instead.  Either one way will do.</p>

<ol>
  <li>Keep using the <code>&gt;</code> operator.</li>
  <li>Use <code>I    </code> instead of <code>&gt;</code>.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rake Aborted Due to a Vim Swap File]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/"/>
    
    <updated>2016-02-09T20:49:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I’m using <a href="https://github.com/tpope/vim-fugitive" title="a Git wrapper in Vim">fugitive.vim</a> for efficient verson control.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>Tonight, I wrote <a href="/blog/2016/02/09/my-venn-diagram-mistake/">an article about Venn diagram</a>, and I attempted
to publish it using the Vim editor command</p>

<pre class="cliUB"><code>:Gpush|!rake gen_deploy &amp;&amp; rake notify
</code></pre>

<p>After that, the following error message popped up.</p>

<pre class="cliUB"><code>[owner@localhost ~/octopress]$ vi
To git@github.com:VincentTam/vincenttam.github.io.git
   c6c422a..fc8d6b8  source -&gt; source

## Generating Site with Jekyll
    write source/stylesheets/screen.css
Configuration file: /home/owner/octopress/_config.yml
            Source: source
       Destination: public
      Generating... 
                    done.
 Auto-regeneration: disabled. Use --watch to enable.
cp -r source/_posts/.2016-02-09-my-venn-diagram-mistake.markdown.swp public/_posts/.2016-02-09-my-venn-diagram-mistake.markdown.swp
rake aborted!
Errno::ENOENT: No such file or directory @ rb_sysopen - public/_posts/.2016-02-09-my-venn-diagram-mistake.markdown.swp
/home/owner/octopress/Rakefile:276:in `block (2 levels) in &lt;top (required)&gt;'
/home/owner/octopress/Rakefile:275:in `block in &lt;top (required)&gt;'
/home/owner/octopress/Rakefile:265:in `block in &lt;top (required)&gt;'
/home/owner/.rvm/gems/ruby-2.1.2/bin/ruby_executable_hooks:15:in `eval'
/home/owner/.rvm/gems/ruby-2.1.2/bin/ruby_executable_hooks:15:in `&lt;main&gt;'
Tasks: TOP =&gt; copydot
(See full trace by running task with --trace)

shell returned 1

Press ENTER or type command to continue
</code></pre>

<p>When one sees an error message like above for the first time, one
needs <em>not</em> look directly into code, even though one is writing code
in an <abbr title="Integrated Development Environment">IDE</abbr>.  Instead, one may <a href="http://polymerhk.com/articles/2016/02/03/27363/">view the error log</a> to see what’s
wrong.</p>

<p>From the command <code>cp -r ...</code>, I realised that the problem came from
<code>Rakefile</code>, which tried to copy the non-existent
<code>.2016-blablabla.markdown.swp</code> in the <code>public</code> folder in the local
folder for this blog to the <code>_deploy</code> folder.<sup id="fnref:gitrepo"><a href="#fn:gitrepo" class="footnote">2</a></sup>  (There are
<em>no</em> <code>_posts</code> folder under the <code>public</code> folder.)</p>

<p><strong>How can I do the task <em>within</em> Vim?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I googled “rake generate ignore swp”, and clicked on
<a href="https://github.com/imathis/octopress/issues/1073">the first search result</a>, which is Octopress issue #1073.  It
provided a link to <a href="https://github.com/imathis/octopress/issues/600">issue #600</a>.  Bradon Mathis said that <q cite="https://github.com/imathis/octopress/blob/2.1/Rakefile#L265">this
has been <a href="https://github.com/imathis/octopress/blob/2.1/Rakefile#L265">fixed in 2.1</a></q>.  Unluckily, after hitting that
hyperlink, I found that the version of <code>Rakefile</code> shown online was
<em>different</em> from mine. Finally, I installed <a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a> to solve
this problem.<sup id="fnref:installation"><a href="#fn:installation" class="footnote">3</a></sup>  If this plugin supports background tasks
like <code>rake preview</code>, the blogging experience using <a href="http://octopress.org">Octopress</a> within
<a href="http://www.vim.org">Vim</a> will be further enhanced.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve learnt to use <a href="http://www.w3schools.com/tags/att_q_cite.asp">the HTML cite tag</a> when I directly quote
a short phrase from others to avoid being penalised by the Google
search engine for lacking originality.</p>

<p>Moreover, I revised the usage of these two Vim plugins.</p>

<ol>
  <li><a href="https://github.com/bronson/vim-visual-star-search">Visual Star Search</a>: Select text in visual
mode and search it with an asterisk <code>*</code>.</li>
  <li><a href="https://github.com/kana/vim-textobj-lastpat">textobj-lastpat</a>: Add the last search pattern as an text
object.</li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">
      <p>I’ve used this Vim plugin <a href="/blog/2016/02/09/my-venn-diagram-mistake/#fugitivevim">for more than a year</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:gitrepo">

      <p>Strictly speaking, the <code>public</code> folder <em>isn’t</em> in the <em>Git
repository</em> because <em>this folder isn’t *tracked by the version
control system</em> (VCS). <a href="#fnref:gitrepo" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:installation">

      <p>For more details, you may see my gist for the <code>.vimrc</code> on Ubuntu
at version <a href="https://goo.gl/2Uq5AU">a2c8028</a>. <a href="#fnref:installation" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Find Files for Vim to Edit in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash/"/>
    
    <updated>2015-08-23T23:48:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Since copying and pasting the output of a command can be a tedious
job.  For example, if you want to create your blog using a framework,
you may first logon to your <a href="https://github.com">GitHub</a> account and create an <em>empty</em>
repository there, then <code>git clone</code> <a href="http://octopress.org">Octopress</a>/<a href="http://jekyllbootstrap.com">Jekyll-Bootstrap</a> from
GitHub, reset the <code>origin</code> <abbr title="Uniform Resource Locator">URL</abbr>, and input the new <abbr title="Uniform Resource Locator">URL</abbr> based on the old
one.</p>

<p>After having created a repository online, you will see the <abbr title="Uniform Resource Locator">URL</abbr> of the
repository using the <abbr title="Secure SHell">SSH</abbr> protocol.  If one <em>doesn’t</em> want to repeat
the start of the <abbr title="Uniform Resource Locator">URL</abbr> <code>git@github.com:</code>, one may use the bash commands
introduced in <a href="/blog/2015/08/22/used-more-bash-utilities/">the previous post</a> to extract its useful parts for
the <code>sed</code> substitution.</p>

<pre class="cliUB"><code>$ git remote -v
octopress	git@github.com:imathis/octopress.git (fetch)
octopress	git@github.com:imathis/octopress.git (push)
origin	git@github.com:VincentTam/vincenttam.github.io.git (fetch)
origin	git@github.com:VincentTam/vincenttam.github.io.git (push)
$ name=userName; repo=repoName
$ git remote -v | sed -n '3{p;q}' | awk '{print $2}' | sed -r \
"s;(\w*)/(.*).git;$name/$repo.git;"
$ unset name repo
</code></pre>

<h2 id="problem">Problem</h2>

<p>I tried extracting a list of Markdown files containing a particular
word and passing them to <a href="http://www.vim.org">Vim</a> as arguments using <code>find</code>, <code>grep</code> and
<code>xargs</code>.  Unluckily, I got an error.</p>

<pre class="cliUB"><code>$ find source/_posts/ -name "*.markdown" -exec grep -q ^tag {} \; \
&gt; -print | xargs vi
Vim: Warning: Input is not from a terminal
3 files to edit
$ 
</code></pre>

<p>Note: <em>Without</em> the <code>-print</code> flag, the above command <em>won’t</em> work.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>As a result, I searched “vim warning input is not from a terminal
xargs” on Google, and found <a href="http://superuser.com/q/336016">this question</a> very useful.  I
should have wrapped the <code>find</code> command like <code>$(find ...)</code>.</p>

<pre class="cliUB"><code>$ vi $(find source/_posts/ -name "*.markdown" -exec \
&gt; grep -q ^tag {} \; -print | xargs)
3 files to edit
</code></pre>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="sed">sed</h3>
<ul>
  <li><code>3{p;q}</code>: quit after printing the third line for the sake of
  efficiency</li>
  <li><code>-r</code>: use extended regular expression to save the trouble of
  escaping <code>()</code> for submatches.</li>
  <li><code>-n</code>: suppress standard output.</li>
  <li>Enclose the expression
    <ul>
      <li>with <em>single</em> quotes to <em>disable</em> interpretation of bash
  variables</li>
      <li>with <em>double</em> quotes to <em>enable</em> interpretation of bash
  variables.</li>
    </ul>
  </li>
  <li>One can replace the delimiter <code>/</code> in the expression
  <code>s/{pat}/{repl}/</code> by any one character from <code>_;#| </code>.</li>
  <li>Specify a custom delimiter like <code>\%.%s%foo%bar%</code>.  (The
  variable/range <code>.</code> is <em>needed</em>.)</li>
</ul>

<h3 id="bash">bash</h3>

<ul>
  <li>Set variables using <code>var1=value1;var2=value2;...</code></li>
  <li>Unset variable usign <code>unset var1 var2 ...</code></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-05T00:18:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to work on
math.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<p>{% codeblock Put this at the bottom lang:html %}
<script type="text/javascript">
(function() {
  function getScript(url,success){
    var script=document.createElement('script');
    script.src=url;
    var head=document.getElementsByTagName('head')[0],
    done=false;
    script.onload=script.onreadystatechange = function(){
      if ( !done &amp;&amp; (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete') ) {
      done=true;
      success();
      script.onload = script.onreadystatechange = null;
      head.removeChild(script);
      }
    };
    head.appendChild(script);
  }</script></p>

<p>getScript(“https://cdn.mathjax.org/mathjax/latest/MathJax.js?” +
    “config=TeX-AMS-MML_HTMLorMML” +
    “,https://vincenttam.github.io/javascripts/MathJaxLocal.js”,
    function(){});</p>

<p>})();
&lt;/script&gt;
{% endcodeblock %}</p>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<hr />
<p>(Added on SEP 3RD, 2015)</p>

<p>Now I realised that kramdown will leave the trailing two backslashes
at each line inside <code>&lt;div&gt;</code> tags in Markdown source files <em>untouched</em>.</p>

<hr />

<p>In <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Recent Vundle Plugin Update]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/16/recent-vundle-plugin-update/"/>
    
    <updated>2015-05-16T16:42:01+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/16/recent-vundle-plugin-update</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="https://github.com/gmarik/Vundle.vim">Vundle</a> for managing my Vim plugins.<sup id="fnref:eg"><a href="#fn:eg" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>I typed <code>:PluginUpdate</code> in Vim as usual for keeping all of the plugins
up-to-date, and the system prompted me to supply my user name and
password for GitHub.<sup id="fnref:rec"><a href="#fn:rec" class="footnote">2</a></sup>  Initially, I <em>refused</em> to do so.  Then
Vundle skipped the first plugin and proceeded to another one.  I was
prompted again for the user name, and my response was still the same.
This repeated for several times, and finally <em>nothing</em> was updated.</p>

<p>I quitted Vim and re-opened it again, and issued the <em>same</em> editor
command for updating the plugins, and ran into the <em>same</em> trouble.</p>

<h2 id="result">Result</h2>

<p>Since I <em>didn’t</em> have much time, I finally input correctly the
required account information in order to get the plugins updated.
Luckily, this was needed for <em>once</em> only, instead of once for each
plugin.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="never-use-vim-surround-for-code-blocks">Never use vim-surround for code blocks</h3>

<p><a href="https://github.com/tpope/vim-surround">Vim-surround</a> changes some whitespaces to tabs, which Google
<em>doesn’t</em> recommend for indentation.<sup id="fnref:guide"><a href="#fn:guide" class="footnote">3</a></sup></p>

<h3 id="setting-the-font-of-a-code-block">Setting the font of a code block</h3>

<p>Specifying the <code>font-family</code> of a <code>&lt;pre&gt;</code> tag is <em>useless</em>—change
<code>pre</code> to <code>code</code> instead.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:eg">

      <p>For example, you may refer to the screenshot in a comment for my
post <a href="/blog/2014/08/29/clang-complete-on-ubuntu-14-dot-04/">Clang Complete on Ubuntu 14.04</a> on <em>Blog 1</em>. <a href="#fnref:eg" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:rec">
      <p>You may click <a href="/downloads/code/vundle.html">here</a> for what I actually saw inside Vim. <a href="#fnref:rec" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:guide">

      <p>Refer to the “<a href="https://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml#Indentation">General Formatting Rules</a>” in <em>Google
HTML/CSS Style Guide</em> Revision 2.23. <a href="#fnref:guide" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
