<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-09T01:18:33+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Searching Git Commit Messages]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages/"/>
    
    <updated>2016-04-03T19:42:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The solution for the problem posed in the title is pretty simple.  For
instance, I want to find all Git commits whose commit message contains
“HTTPS”.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS"
commit 7400582e268f4a5b776269cf0cc08c04886a4769
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Sun Mar 20 20:19:47 2016 +0800

    Updated my Rakefile with HTTPS

commit b6f4f1fc872affc1107b330042d7b43b45e60595
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Mon Feb 8 00:45:02 2016 +0800

    A new article about Flair, Octopress and HTTPS
</code></pre>

<p>However, I think that the output <em>isn’t</em> compact enough.  I would like
to display the following information.</p>

<pre class="cliUB"><code>&lt;short SHA1&gt; &lt;commit time&gt; &lt;commit message title&gt;
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Some pretty formats in Git
    <ul>
      <li><code>%h</code>: short SHA1</li>
      <li><code>%H</code>: full SHA1</li>
      <li><code>%an</code>: author name</li>
      <li><code>%cd</code>: commit date</li>
      <li><code>%s</code>: subject</li>
      <li><code>%b</code>: body</li>
    </ul>
  </li>
  <li>Automatically escape special characters in Vim
    <ul>
      <li>
        <p>Adding a backslash before <em>each</em> <code>%</code> in</p>

        <pre class="cliUB"><code>  :r !git log -2 --grep="HTTPS" --pretty="\%h \%cd \%s"
</code></pre>

        <p>is tedious and prone to errors.</p>
      </li>
      <li>
        <p>A more convenient way</p>

        <pre class="cliUB"><code>  :exec escape('r !git log -2 --grep="HTTPS" --pretty="%h %cd %s"', '%')
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">

      <p>To avoid junk mail, I replaced the first four letters of my email
address with <code>fake</code>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<p><figure class='code'><figcaption><span>Launch Portable Git Bash with proper a home folder (git-bash.bat)</span> <a href='/downloads/code/git-bash.bat'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">rem Setup environment (replace &#39;user&#39; with your desired username)</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOMEDRIVE</span><span class="o">=</span><span class="nv">%~d0</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span>home<span class="n">/owner</span>
</span><span class='line'><span class="k">set</span> <span class="nv">USERPROFILE</span><span class="o">=</span><span class="nv">%HOME%</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem Launch the git bash</span>
</span><span class='line'>start git-bash.exe
</span></code></pre></td></tr></table></div></figure></p>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (5)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5/"/>
    
    <updated>2016-02-29T00:35:30+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/29/git-for-windows-curl-gist-dot-vim-with-vundle-5</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/">the third post of this series</a>, I ran the editor command</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>inside <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>, but I got a fatal error.  I
found out how to get <a href="https://github.com/mattn/gist-vim">Gist.vim</a> work <em>without</em> solving this problem.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to avoid this fatal error?</strong></p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I forgot <a href="http://polymerhk.com/articles/2016/02/03/27363/">this article about programming</a> that I’d read several
weeks ago.  I should have pay more attention of the error message
itself, rather than the Google search results of this message.  Hence,
creating a symbolic link for <code>C:\Users\foo\.gitignore</code> to the
<code>path/to/Data/settings</code> folder.</p>

<h2 id="remarks">Remarks</h2>

<p>While writing this post, I re-read
<a href="/blog/2016/02/09/rake-aborted-due-to-a-vim-swap-file/"><em>Rake Aborted Due to a Vim Swap File</em></a> so as to find the URL of
the article about programming.  I discovered a broken link in the
GitHub page for <a href="https://github.com/imathis/octopress/issues/600#issuecomment-6206116">Octopress issue #600</a>.  From the list of
branches in the homepage for this GitHub project, I found <code>site-2.1</code>,
on which commit <a href="https://github.com/imathis/octopress/commit/2399008">2399008</a> was located.  Therefore, I made commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commit/68b0adb">68b0adb</a> in the repository for this blog.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (4)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4/"/>
    
    <updated>2016-02-22T18:38:00+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-4</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>, we see that the space in the
path of Git Bash can become a source of trouble.</p>

<h2 id="problem">Problem</h2>

<p><strong>How to run external commands in GVim Portable invoked by Git Bash?</strong></p>

<!-- more -->

<h2 id="a-failed-attempt">A failed attempt</h2>

<p>I googled “vim shell path program files”, and clicked
<a href="http://stackoverflow.com/a/13917410">the first web site</a> as usual.  Even though I <em>don’t</em>, and
<em>won’t</em> have Cygwin installed in my computer, I still viewed this
page, which suggested that the path of <code>shell</code> option should be
surrounded by a pair of double quotes <code>""</code>.  I tried this, but the
above problem <em>wasn’t</em> solved.</p>

<h2 id="solution">Solution</h2>

<p>I recalled that after opening the built-in editor in Command Prompt on
M$ Win* Professional/Enterprise, the displayed path of the working
directory would be different: some tildes appear in the path.</p>

<p>Therefore, I googled “windows path without spaces”, and learnt to use
<code>DIR /X</code> in Command Prompt to <a href="https://goo.gl/a9eHZF">solve this problem</a> from an
answer to <a href="http://superuser.com/a/179450">this Super User question</a>.  Finally, usual
external commands like <code>ls</code> and <code>file</code> can be executed inside GVim
Portable.  This solves the error mentioned in the “Discussion” section
of <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the second post in this series</a>.  What I’ve wriiten in the
“Solution” section can be updated: I expect that under usual
circumstances, the external commands can be run even if the <code>shell</code>
option is set to Git Bash.</p>

<h2 id="remarks">Remarks</h2>

<p>I used an <code>if</code> statement to surround the <code>set shell=/path/to/bash.exe</code>
because <a href="http://stackoverflow.com/a/13917410">the same Stack Overflow answer</a> mentioned in the
“A failed attempt” section said that many Vim plugins used
<code>has("win32")</code>.  If a plugin failed in a GVim window triggered by Git
Bash, I can still use it by opening GVim with Command Prompt.</p>

<p>Now, though using <code>curl</code> in GVim whose <code>shell</code> is configured to
<code>cmd.exe</code>, I can finally use <code>curl</code> in GVim invoked by Git Bash.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3/"/>
    
    <updated>2016-02-22T16:54:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A VIMRC is important for efficient text editing.  It can be over one
hundred lines.  It’s good to have the changes tracked.  One <em>entire</em>
folder <code>.git</code> for <em>one</em> single text file will be too much.  Since my
VIMRCs <em>don’t</em> have anything secret, I upload them to Gist like many
other users, and read others’ configuration files so as to learn from
them.</p>

<p>Nonetheless, my workflow of uploading Gists on M$ Win* was not quite
efficient.  Therefore, I re-read the installation instructions for
<a href="https://github.com/mattn/gist-vim">Gist.vim</a>.  Since <code>curl.cmd</code> has already been set up during the
installation of Vundle.vim, I used Vundle to install Gist.vim.</p>

<p>Due to the problem mentioned in
<a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/">the previos post in this series</a>, I opened GVim from Command
Prompt instead of Git Bash.</p>

<h2 id="problem">Problem</h2>

<p>I have already configure <code>github.user</code> to my GitHub user name, but
Gist.vim still complained that <em>no</em> GitHub user name was found.</p>

<pre class="cli"><code>You have not configured a Github account. Read ":help gist-vim-setup".
</code></pre>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>I tried looking into the source code of the Vim plugin.  I learnt from
<em>Learn Vim Script the Hard Way</em> the difference between <code>echo</code> and
<code>echom</code>: the former <em>isn’t</em> persistent; the later can be retrieved by
<code>message</code>.  It took me a few minutes to find out that Command Prompt,
the program set by <code>shell</code> option, <em>didn’t</em> take my global
configurations into account.  I viewed the list of my configurations
using the following command.</p>

<pre class="cli"><code>:!git config --list
</code></pre>

<p>I <em>didn’t</em> see <code>github.user</code> in the list.  I tried adding <code>--global</code>,
and I got an error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (git config --global --list)
fatal: unable to read config file 'C:\Temp\PortableApps\gVimPortable\Data\settin
gs/.gitconfig': No such file or directory
shell returned 128
Hit any key to close this window...
</code></pre>

<p>I <em>failed</em> to comprehend the second line of the above output.  I just
realised that this had something to do with GVim Portable.  If I use
GVim instead, I <em>won’t</em> have such trouble since <code>.gitconfig</code> is
located at the home folder.</p>

<h2 id="solution">Solution</h2>

<p>I searched for a tutorial of using this plugin.  Finally, from a
Japanese website which I forgot its URL, I found out that one can
manually set the variable <code>github_user</code> in VIMRC.</p>

<p>After that, I restarted the editor and invoked the plugin, which then
asked for my GitHub password and created a token in
<code>/path/to/gVimPortable/Data/settings/.gist-vim</code>.</p>

]]></content>
    
  </entry>
  
</feed>
