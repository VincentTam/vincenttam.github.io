<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="http://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://vincenttam.github.io/"/>
  <updated>2014-12-26T18:11:02+08:00</updated>
  <id>http://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Edit Gist Descriptions With Gist.vim]]></title>
      <link href="http://vincenttam.github.io/blog/2014/12/13/edit-gist-descriptions-with-gist-dot-vim/"/>
    
    <updated>2014-12-13T23:58:28+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/13/edit-gist-descriptions-with-gist-dot-vim</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="https://github.com/mattn/gist-vim">Gist.vim</a> to post code to <a href="https://gist.github.com">Gist</a> directly in a <a href="http://www.vim.org">Vim</a> buffer for
efficiency.<sup id="fnref:pp"><a href="#fn:pp" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>In the manual of <a href="https://github.com/mattn/gist-vim">Gist.vim</a>, it’s said that after opening the Gist
buffer in <a href="http://www.vim.org">Vim</a>, one can add/change the description of a <a href="https://gist.github.com">Gist</a> with
<code>:Gist -e -s something</code>.  To add a description for a <a href="https://gist.github.com">Gist</a>, I typed
<code>:Gist -s foo bar ...</code> in a buffer for the particular <a href="https://gist.github.com">Gist</a> — I
tried to use it like <code>:!echo foo bar</code> — and what I got in the list
of my Gists was <em>just</em> the last word.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>After one encounters such a problem, he/she will be likely to solve
the problem within seconds: use a double quote to surround the whole
description.</p>

<p>When I was in doubt of the words in the manual, I used simple examples
for testing, so I could quickly see the output and get the concepts
written in the documentation.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp">

      <p>See <a href="/blog/2014/01/30/posting-code-to-gist-efficiently/"><em>Posting Code to Gist Efficiently</em></a> in Blog 1 for the
reasons of installing <a href="https://github.com/mattn/gist-vim">Gist.vim</a>. <a href="#fnref:pp" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[My Improved Custom Autocompletion Mappings in Vim]]></title>
      <link href="http://vincenttam.github.io/blog/2014/12/13/my-improved-custom-autocompletion-mappings-in-vim/"/>
    
    <updated>2014-12-13T14:40:44+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/13/my-improved-custom-autocompletion-mappings-in-vim</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Inspired by <a href="http://vim-latex.sourceforge.net">$\rm \LaTeX$-Suite</a>, I added some
autocompletion mappings in my VIMRC last year.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup>  Three months
later, I saw the word “FileType” in <a href="http://vimdoc.sourceforge.net/htmldoc/usr_40.html#40.3">Vim’s User Manual</a>,
and shortened these autocommand a little bit.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup>  In my opinion,
it’s incredibly amazing since I can type text at the speed of thought.</p>

<h2 id="problem">Problem</h2>

<p>If I’ve finished editing an HTML file and open another $\rm \LaTeX$
file, then my insert mode mappings will interfere with those defined
by <a href="http://vim-latex.sourceforge.net">$\rm \LaTeX$-Suite</a>.  <strong>How can I restrict my custom
mappings to the current working buffer only?</strong></p>

<!-- more -->

<p>Since I <em>didn’t</em> know how to describe this problem in words in
February, I spent <em>hours</em> searching for webpages on <a href="http://www.google.com">Google</a>, but got
<em>nothing</em>.  At that time, I had focus on my homework and exams, so I
put this problem aside.  As a <a href="https://www.gnu.org/gnu/linux-and-gnu.en.html">GNU/Linux</a> user, I adjust my
wants according to what I know and what I can do, after accepting the
fact that M$ Off* has <em>no</em> known plan to support the free operating
system.</p>

<p>Last night, when I wrote a
<a href="/blog/2014/12/12/how-to-stop-auto-indenting/" title="How to Stop Auto Indenting?">recent linklog about Vim’s auto indenting</a>, I did some
configurations on <a href="http://www.vim.org">Vim</a>.  This reminded me of hte problem of setting
up autocompletion for brackets.  After writing over 150 blog posts in
<a href="http://www.vim.org">Vim</a>, I realise the inconvenience <em>without</em> these keyboard shortcuts
for autocompletion in the insert mode.</p>

<h2 id="solution">Solution</h2>

<p>First, I glanced through the codeblocks in the cited posts in the
<a href="#fn:pp1">first two footnotes</a>.  After that, I googled “autocmd
group”, and found two sites very useful.</p>

<ol>
  <li>
    <p><a href="http://stackoverflow.com/a/8826323"><em>Vim inoremap for specific filetypes</em></a> on Stack
Overflow.</p>

    <p><code>&lt;buffer&gt;</code> is the missing part of the autocommands.</p>
  </li>
  <li>
    <p><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/14.html"><em>Autocommand Groups</em></a> on <em>Learn Vimscript the Hard Way</em>.</p>

    <p><code>au!</code> avoids <a href="http://www.vim.org">Vim</a> to slow down after running <code>:so $MYVIMRC</code>.
 Therefore, I also added <code>!</code> after the function <code>MyDiff</code> in my
 VIMRC on M$ Win* 7.<sup id="fnref:vimrc_ms"><a href="#fn:vimrc_ms" class="footnote">3</a></sup></p>
  </li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">
      <p>See <a href="/blog/2013/12/11/links-to-good-posts/"><em>Links to Good Posts</em></a> in Blog 1 for the mappings. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>See the bottom part of
<a href="/blog/2014/01/26/working-with-vims-autocommand-groups/"><em>Working With Vim’s Autocommand Groups</em></a> in Blog 1 for the
shorter mappings. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:vimrc_ms">

      <p>View my VIMRC on M$ Win* 7 at commit <a href="https://gist.github.com/VincentTam/abc1cbd2b2181ad69165/c11d1a1e42cd5bfbe1e76347b098880e6e73ebc9">c11d1a1</a>.</p>

      <p>This morning, I tried to write similar keyboard shortcuts for
‘&#8217;’, ‘&#8221;’ and ‘`’ at lines 62–63 and 67.  However, typing two
‘&#8221;’s quickly on M$ Win* 7, GVim <em>duplicated</em> my input.
Therefore, I changed the rules so that they would only be invoked
when one quickly typed any one of these characters <em>twice</em>.</p>

      <p>Remarks: On Ubuntu 14.04 LTS, I have the <em>same</em> experience.  Thus,
I just copied the whole autocommand group to
<a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786">my VIMRC there</a>. <a href="#fnref:vimrc_ms" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[How to Stop Auto Indenting? &#9733;]]></title>
      <link href="http://vim.wikia.com/wiki/How_to_stop_auto_indenting"/>
    
    <updated>2014-12-12T22:31:11+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/12/12/how-to-stop-auto-indenting</id>
    
      <content type="html"><![CDATA[<p>After reading this guide, I created a file
<code>$HOME/vimfiles/indent/html.vim</code> with only one line.</p>

<pre><code>let b:did_indent = 1
</code></pre>

<p>In the past, I would <code>:setlocal noautoident nosmartindent</code> before
pasting anything into a <a href="http://www.vim.org">Vim</a> buffer.  However, as I paste the
<a href="http://jquery.com">jQuery</a> code from a website while I was writing a recent post, the
code was <em>still</em> wrongly indented.<sup id="fnref:pp"><a href="#fn:pp" class="footnote">1</a></sup>  After reading the last
section of the tip, I now know to use <code>:set paste</code>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp">

      <p>See <a href="/blog/2014/12/11/cheat-in-an-online-quiz/"><em>Cheat in an Online Quiz</em></a> in Blog 1 for the copied
<a href="http://jquery.com">jQuery</a> function. <a href="#fnref:pp" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
<p><a rel="full-article" href="http://vincenttam.github.io/blog/2014/12/12/how-to-stop-auto-indenting/">&infin; Permalink</a></p>]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Update Vim Plugins Managed by pathogen.vim]]></title>
      <link href="http://vincenttam.github.io/blog/2014/10/11/update-vim-plugins-managed-by-pathogen-dot-vim/"/>
    
    <updated>2014-10-11T16:58:38+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/10/11/update-vim-plugins-managed-by-pathogen-dot-vim</id>
    
      <content type="html"><![CDATA[<h2 id="objective">Objective</h2>

<p>To update <em>many</em> Vim plugins under <code>runtimepath</code> managed by
<a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> <em>efficiently</em>.</p>

<h2 id="raison-dtre">Raison d’être</h2>

<p>With the <code>:BundleUpdate</code> editor command, users of <a href="https://github.com/gmarik/Vundle.vim">Vundle</a> can easily
keep his/her plugins up to date with the remote repository.  However,
pathogen.vim is a popular plugin, so it’s worth studying.</p>

<!-- more -->

<h2 id="method">Method</h2>

<p>Write a for-loop which runs through the directories (i.e. plugins
folders) and</p>

<ol>
  <li><code>cd $f</code>: change to the plugin folder</li>
  <li><code>git pull</code>: fetch and merge commits from the tracking branch
    <ul>
      <li>One can set the tracking branch with <code>git branch -u
 [remote]/branch</code>.  In this case, the command is <code>git branch -u
 origin/master</code>.</li>
    </ul>
  </li>
  <li><code>cd ..</code>: <em>without</em> this command, it won’t proceed to the next
folder.</li>
</ol>

<pre class="cliUB"><code>$ for f in $(ls); do cd $f;echo $f;git pull;echo "";cd ..;done
DrawIt~
Already up-to-date.

FuzzyFinder
Already up-to-date.

L9
Already up-to-date.

OmniCppComplete
Already up-to-date.

a.vim
Already up-to-date.

c.vim
Already up-to-date.

cscope.vim
Already up-to-date.

loremipsum
Already up-to-date.

nerdtree
Already up-to-date.

taglist.vim
Already up-to-date.

tlib_vim
remote: Counting objects: 9, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 9 (delta 1), reused 4 (delta 1)
Unpacking objects: 100% (9/9), done.
From git://github.com/tomtom/tlib_vim
   b7fc1e3..bc4097b  master     -&gt; origin/master
Updating b7fc1e3..bc4097b
Fast-forward
 autoload/tlib/input.vim | 20 ++++++++++++++------
 plugin/02tlib.vim       |  4 ++--
 2 files changed, 16 insertions(+), 8 deletions(-)

vim-addon-mw-utils
Already up-to-date.

vim-easy-align
remote: Counting objects: 24, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 24 (delta 6), reused 14 (delta 2)
Unpacking objects: 100% (24/24), done.
From https://github.com/junegunn/vim-easy-align
   cbb005e..2595ebf  master     -&gt; origin/master
Updating cbb005e..2595ebf
Fast-forward
 .travis.yml                 |  4 +++-
 README.md                   |  2 +-
 autoload/easy_align.vim     | 20 ++++++--------------
 test/blockwise.vader        | 22 ++++++++++++++++++++++
 test/fixed.vader            | 13 +++++++++++++
 test/include/setup.vader    |  1 +
 test/include/teardown.vader |  3 ++-
 7 files changed, 48 insertions(+), 17 deletions(-)
 create mode 100644 test/blockwise.vader

vim-easymotion
remote: Counting objects: 27, done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 27 (delta 11), reused 18 (delta 9)
Unpacking objects: 100% (27/27), done.
From https://github.com/Lokaltog/vim-easymotion
   3b8a2dd..868cd71  master     -&gt; origin/master
Updating 3b8a2dd..868cd71
Fast-forward
 TODO.md                              | 54 ------------------------------------
 autoload/EasyMotion.vim              | 17 ++++++++----
 autoload/EasyMotion/cmigemo.vim      |  1 -
 autoload/EasyMotion/command_line.vim |  1 -
 autoload/EasyMotion/helper.vim       |  1 -
 autoload/EasyMotion/highlight.vim    |  1 -
 plugin/EasyMotion.vim                |  4 +--
 t/easymotion_spec.vim                |  1 -
 t/operator_pending_spec.vim          |  1 -
 t/smartsign_spec.vim                 |  1 -
 10 files changed, 12 insertions(+), 70 deletions(-)
 delete mode 100644 TODO.md

vim-fugitive
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 4 (delta 0), reused 2 (delta 0)
Unpacking objects: 100% (4/4), done.
From github.com:tpope/vim-fugitive
   90ee6fb..0374322  master     -&gt; origin/master
Updating 90ee6fb..0374322
Fast-forward
 plugin/fugitive.vim | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

vim-latex
Already up-to-date.

vim-markdown
remote: Counting objects: 119, done.
remote: Compressing objects: 100% (61/61), done.
remote: Total 119 (delta 59), reused 85 (delta 41)
Receiving objects:  64% (77/11
R)
Receiving objects: 100% (119/119), 25.96 KiB | 0 bytes/s, done.
Resolving deltas: 100% (59/59), done.
From git://github.com/plasticboy/vim-markdown
   9a3b312..74c9c60  master     -&gt; origin/master
Updating 9a3b312..74c9c60
Fast-forward
 .travis.yml            |  12 ++++
 CONTRIBUTING.md        |  10 +--
 README.md              |  72 ++++++++++++++++-----
 after/ftplugin/mkd.vim |   8 ---
 ftplugin/mkd.vim       |   5 +-
 indent/mkd.vim         |   3 +-
 syntax/mkd.vim         |  28 ++++++--
 test/README.md         |   7 ++
 test/indent.md         |  26 ++++++++
 test/run-tests.sh      |   3 +
 test/syntax.md         |  74 +++++++++++++++++++++-
 test/syntax.vader      | 169 +++++++++++++++++++++++++++++++++++++++++++++++++
 test/vimrc             |   8 +++
 13 files changed, 379 insertions(+), 46 deletions(-)
 create mode 100644 .travis.yml
 create mode 100644 test/README.md
 create mode 100644 test/indent.md
 create mode 100755 test/run-tests.sh
 create mode 100644 test/syntax.vader
 create mode 100644 test/vimrc

vim-misc
remote: Counting objects: 40, done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 40 (delta 12), reused 30 (delta 9)
Unpacking objects: 100% (40/40), done.
From https://github.com/xolox/vim-misc
   6ce98ee..77b23c8  master     -&gt; origin/master
 * [new tag]         1.16.1     -&gt; 1.16.1
 * [new tag]         1.15.1     -&gt; 1.15.1
 * [new tag]         1.16       -&gt; 1.16
Updating 8551f2b..77b23c8
Fast-forward
 README.md                          | 357 ++++++++++++++++++++++++++++++-
 autoload/xolox/misc.vim            |   4 +-
 autoload/xolox/misc/async.vim      | 261 +++++++++++++++++++++++
 autoload/xolox/misc/complete.vim   |   8 +-
 autoload/xolox/misc/cursorhold.vim |  71 +++++++
 autoload/xolox/misc/path.vim       |  29 ++-
 autoload/xolox/misc/perm.vim       | 100 +++++++++
 autoload/xolox/misc/persist.vim    |  50 +++++
 autoload/xolox/misc/str.vim        |   7 +-
 autoload/xolox/misc/timer.vim      |  80 ++++++-
 doc/misc.txt                       | 424 +++++++++++++++++++++++++++++++++----
 plugin/xolox/misc.vim              |  19 ++
 12 files changed, 1342 insertions(+), 68 deletions(-)
 create mode 100644 autoload/xolox/misc/async.vim
 create mode 100644 autoload/xolox/misc/cursorhold.vim
 create mode 100644 autoload/xolox/misc/perm.vim
 create mode 100644 autoload/xolox/misc/persist.vim
 create mode 100644 plugin/xolox/misc.vim

vim-repeat
Already up-to-date.

vim-session~
remote: Counting objects: 8, done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 8 (delta 1), reused 5 (delta 1)
Unpacking objects: 100% (8/8), done.
From https://github.com/xolox/vim-session
   6773a22..4fb9cdd  master     -&gt; origin/master
 * [new tag]         2.7        -&gt; 2.7
Updating a55318b..4fb9cdd
Fast-forward
 README.md                              |  54 +++++++++++--
 autoload/xolox/session.vim             | 136 ++++++++++++++++++++-------------
 autoload/xolox/session/suggestions.vim |  42 ++++++++++
 doc/session.txt                        | 112 +++++++++++++++++++++------
 plugin/session.vim                     |  21 +++--
 5 files changed, 277 insertions(+), 88 deletions(-)
 create mode 100644 autoload/xolox/session/suggestions.vim

vim-snipmate
remote: Counting objects: 6, done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 6 (delta 0), reused 2 (delta 0)
Unpacking objects: 100% (6/6), done.
From git://github.com/garbas/vim-snipmate
   f8aa804..e6eb057  master     -&gt; origin/master
Updating f8aa804..e6eb057
Fast-forward
 Contributors.md     | 1 +
 plugin/snipMate.vim | 4 ++++
 2 files changed, 5 insertions(+)

vim-snippets
remote: Counting objects: 290, done.
remote: Compressing objects: 100% (175/175), done.
remote: Total 290 (delta 177), reused 195 (delta 115)
Receiving objects:  80% (232
Receiving obj
Receiving objects: 100% (290/290), 67.94 KiB | 0 bytes/s, done.
Resolving deltas: 100% (177/177), done.
From git://github.com/honza/vim-snippets
   049934c..3216ac2  master     -&gt; origin/master
Updating 049934c..3216ac2
Fast-forward
 UltiSnips/c.snippets                              |   1 -
 UltiSnips/javascript_angular.snippets             |  46 +-
 UltiSnips/javascript_jsdoc.snippets               |   2 +-
 UltiSnips/pandoc.snippets                         |  11 +-
 UltiSnips/perl.snippets                           |   7 +
 UltiSnips/php.snippets                            |  79 +-
 UltiSnips/python.snippets                         |  48 +-
 UltiSnips/rust.snippets                           |  14 +-
 UltiSnips/scss.snippets                           |  22 +-
 UltiSnips/tex.snippets                            |   2 +-
 snippets/coffee/requirejs_coffee.snippets         |  11 +
 snippets/eruby.snippets                           |   2 +
 snippets/html.snippets                            |  45 +-
 snippets/javascript/javascript-requirejs.snippets |  14 +
 snippets/javascript/javascript.node.snippets      |   3 +-
 snippets/javascript/javascript.snippets           | 185 ++--
 snippets/perl.snippets                            |  10 +-
 snippets/rails.snippets                           |   2 +
 snippets/ruby.snippets                            |   6 +-
 snippets/rust.snippets                            |  14 +-
 snippets/scala.snippets                           |  19 +-
 snippets/stylus.snippets                          | 993 ++++++++++++++++++++++
 snippets/zsh.snippets                             |  12 +-
 23 files changed, 1403 insertions(+), 145 deletions(-)
 create mode 100644 snippets/coffee/requirejs_coffee.snippets
 create mode 100644 snippets/javascript/javascript-requirejs.snippets
 create mode 100644 snippets/stylus.snippets

vim-surround
Already up-to-date.

visualrepeat
Already up-to-date.
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Commits With fugitive.vim on Windows]]></title>
      <link href="http://vincenttam.github.io/blog/2014/09/03/git-commits-with-fugitive-dot-vim-on-windows/"/>
    
    <updated>2014-09-03T00:48:13+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/09/03/git-commits-with-fugitive-dot-vim-on-windows</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In *nix, one can use <code>:Gcommit</code> to commit the staged changes,
provided that <a href="https://github.com/tpope/vim-fugitive" title="An awesome Git wrapper">fugitive.vim</a> has been installed.</p>

<h2 id="problem">Problem</h2>

<p>How can one use the Vim plugin <em>within</em> Vim on M$ Win*?</p>

<h2 id="discussion">Discussion</h2>

<p>Inspired by <a href="http://stackoverflow.com/a/19416705" title="GCommit doesn't work with fugitive.vim under windows xp?">a Stack Overflow question</a>, I set my
<code>core.editor</code> to <code>gvim -f</code> through <code>git config</code>.</p>

<p>Then I tried running <code>git commit</code> in 
<img class="nobd" src="/images/posts/OctopressOnOtherDev/gitbash1.png" title="‘icon’ ‘Git Bash icon’" >,
but it’s “aborting commit due to empty commit message”.</p>

<p>Why is the <code>-f</code> flag there?  It’s because the <code>--nofork</code> option causes
gVim to be in the foreground in *nix.  I’ve learnt this from <a href="https://help.github.com/articles/associating-text-editors-with-git" title="Associating text editors with Git">here</a>.
The <code>-w</code> flag in the commands for setting other editors as the default
editor for Git is the key for the above quoted message.</p>

<p>I tried to solve this problem by reading Vim’s offical manual about
<code>nofork</code>, and it’s clearly stated that this option <em>wasn’t</em> supported
in M$ Win* unless I’m “running it with an installed … gvim.bat”.</p>

<p>To conclude, if I’m working on M$ Win*, I’ll just forget about
<code>:Gcommit</code> in Vim, and use
<img class="nobd" src="/images/posts/OctopressOnOtherDev/gitbash1.png" title="‘icon’ ‘Git Bash icon’" >.</p>

]]></content>
    
  </entry>
  
</feed>
