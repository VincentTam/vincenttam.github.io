<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2015-08-05T01:27:09+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-05T00:18:45+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to
[work on math]<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup>.</p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<p><figure class='code'><figcaption><span>Put this at the bottom </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="nx">success</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">script</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">head</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">done</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">done</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;loaded&#39;</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;complete&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">done</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">success</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">head</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="nt">&lt;/script&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>getScript(“https://cdn.mathjax.org/mathjax/latest/MathJax.js?” +
</span><span class='line'>    “config=TeX-AMS-MML_HTMLorMML” +
</span><span class='line'>    “,https://vincenttam.github.io/javascripts/MathJaxLocal.js”,
</span><span class='line'>    function(){});<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>})();
</span><span class='line'><span class="ni">&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<p>In <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Recent Vundle Plugin Update]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/16/recent-vundle-plugin-update/"/>
    
    <updated>2015-05-16T16:42:01+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/16/recent-vundle-plugin-update</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="https://github.com/gmarik/Vundle.vim">Vundle</a> for managing my Vim plugins.<sup id="fnref:eg"><a href="#fn:eg" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<p>I typed <code>:PluginUpdate</code> in Vim as usual for keeping all of the plugins
up-to-date, and the system prompted me to supply my user name and
password for GitHub.<sup id="fnref:rec"><a href="#fn:rec" class="footnote">2</a></sup>  Initially, I <em>refused</em> to do so.  Then
Vundle skipped the first plugin and proceeded to another one.  I was
prompted again for the user name, and my response was still the same.
This repeated for several times, and finally <em>nothing</em> was updated.</p>

<p>I quitted Vim and re-opened it again, and issued the <em>same</em> editor
command for updating the plugins, and ran into the <em>same</em> trouble.</p>

<h2 id="result">Result</h2>

<p>Since I <em>didn’t</em> have much time, I finally input correctly the
required account information in order to get the plugins updated.
Luckily, this was needed for <em>once</em> only, instead of once for each
plugin.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="never-use-vim-surround-for-code-blocks">Never use vim-surround for code blocks</h3>

<p><a href="https://github.com/tpope/vim-surround">Vim-surround</a> changes some whitespaces to tabs, which Google
<em>doesn’t</em> recommend for indentation.<sup id="fnref:guide"><a href="#fn:guide" class="footnote">3</a></sup></p>

<h3 id="setting-the-font-of-a-code-block">Setting the font of a code block</h3>

<p>Specifying the <code>font-family</code> of a <code>&lt;pre&gt;</code> tag is <em>useless</em>—change
<code>pre</code> to <code>code</code> instead.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:eg">

      <p>For example, you may refer to the screenshot in a comment for my
post <a href="/blog/2014/08/29/clang-complete-on-ubuntu-14-dot-04/">Clang Complete on Ubuntu 14.04</a> on <em>Blog 1</em>. <a href="#fnref:eg" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:rec">
      <p>You may click <a href="/downloads/code/vundle.html">here</a> for what I actually saw inside Vim. <a href="#fnref:rec" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:guide">

      <p>Refer to the “<a href="https://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml#Indentation">General Formatting Rules</a>” in <em>Google
HTML/CSS Style Guide</em> Revision 2.23. <a href="#fnref:guide" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Looping Through Lines]]></title>
      <link href="https://vincenttam.github.io/blog/2015/04/10/looping-through-lines/"/>
    
    <updated>2015-04-10T15:01:48+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/04/10/looping-through-lines</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I copied lines from an enumerated list in this blog and pasted it to
Vim.  The content in each list item was seen in the current Vim
buffer, but <em>not</em> the numbers.</p>

<h3 id="an-illustration-of-the-problem">An illustration of the problem</h3>

<p>A sample ordered list with 2015 items</p>

<ol>
  <li>Item one</li>
  <li>Item two</li>
  <li>Item three</li>
</ol>

<p>…</p>

<ol start="2015"><li>Item 2015</li></ol>

<p>What is seen in Vim after copy and paste</p>

<pre><code>Item one
Item two
Item three
...
Item 2015
</code></pre>

<p>If one writes in Markdown and he/she copies a numbered list from
elsewhere to a text editor, then it will be very <em>inconvenient</em> to
manually add back the numbers.  To exaggerate this inconvenience, I
put “2015” above.</p>

<h2 id="goal">Goal</h2>

<p>Insert the item number at the beginning.</p>

<pre><code>1. Item one
2. Item two
3. Item three
...
2015. Item 2015
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I read chapters 28–30 and 36 of
<a href="http://learnvimscriptthehardway.stevelosh.com/"><em>Learn Vimscript the Hard Way</em></a> by Steve Losh, and searched
“vim loop through lines” on Google.  After I saw <code>while liner &lt;
line("$")</code> in a forum thread, I typed the following editor commands in
Vim.</p>

<p><figure class='code'><figcaption><span>A while-loop which runs through the lines </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">l</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="m">1</span>
</span><span class='line'><span class="k">wh</span> <span class="k">l</span> &amp;<span class="k">lt</span>;<span class="p">=</span> line<span class="p">(</span>“$”<span class="p">)</span>
</span><span class='line'>  exe “norm<span class="p">!</span> I” . <span class="k">l</span> . “&amp;<span class="k">lt</span>;esc&amp;gt;<span class="k">j</span>”
</span><span class='line'>  <span class="k">let</span> <span class="k">l</span> <span class="p">+=</span> <span class="m">1</span>
</span><span class='line'><span class="k">endwh</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Why is <code>exe "norm!</code> used instead of <code>norm</code>?  Since <code>\&lt;esc&gt;</code> <em>can’t</em> go
with <code>norm</code>.  Similarly, to include compound keys like <code>&lt;S-v&gt;</code> in <code>exe
norm!</code>, insert a backslash <code>\</code> before <code>&lt;</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Updated VIMRC for Vundle]]></title>
      <link href="https://vincenttam.github.io/blog/2015/02/28/updated-vimrc-for-vundle/"/>
    
    <updated>2015-02-28T16:30:16+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/02/28/updated-vimrc-for-vundle</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Three days ago, I made a change in <a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786">my VIMRC on *nix</a> due to
<a href="https://github.com/gmarik/Vundle.vim" title="A Vim plugin manager">Vundle</a>’s interface change a year ago.<sup id="fnref:src"><a href="#fn:src" class="footnote">1</a></sup><sup id="fnref:vundle_change"><a href="#fn:vundle_change" class="footnote">2</a></sup></p>

<p>With the following <a href="http://www.vim.org">Vim</a> editor command, the replacement was done
quickly.</p>

<pre><code>:%s/\(Plugin \)\@&lt;="\([^"]*\)"/'\2'/
</code></pre>

<h2 id="problem">Problem</h2>

<p>I got some errors when I opened Vim again.</p>

<pre class="cliUB"><code>Error detected while processing /home/owner/.vimrc:
line   38:
E471: Argument required: Plugin 
line   39:
E471: Argument required: Plugin 
line   40:
E471: Argument required: Plugin 
line   42:
E471: Argument required: Plugin 
line   45:
E471: Argument required: Plugin 
line   46:
E471: Argument required: Plugin 
line   47:
E471: Argument required: Plugin 
line   48:
E471: Argument required: Plugin 
Press ENTER or type command to continue
</code></pre>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>The number of errors I had received was <em>less</em> than that of the
plugins I had installed.  Therefore, it was reasonable for me to
conclude that the lines in my VIMRC for some plugin were <em>still</em>
correct.</p>

<h2 id="solution">Solution</h2>

<p>After I had saved the console error output into a text file, I opened
my VIMRC with Vim, so that I could use <code>38G</code> to jump to the first
erroneous line.  Above that line, I also had some lines starting with
<code>Plugin</code>.  I compared their differences, and jumped to other erroneous
lines as well.  I finally discovered that one should <em>never</em> use a
double quote for indicating the name of the plugin — use single
quote only.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:src">

      <p>Commit <a href="https://gist.github.com/VincentTam/2379ba75d6ad703a3786/247f888a3c00d90b42ff0f2e2b367ce3294bf874">247f888a3c00d90b42ff0f2e2b367ce3294bf874</a> of my VIMRC
on Gist. <a href="#fnref:src" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:vundle_change">
      <p>Vundle <a href="https://github.com/gmarik/Vundle.vim/commit/0521de9">version 0.10.2</a> <a href="#fnref:vundle_change" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Switch Tmux Panes and Vim-$\rm \LaTeX$]]></title>
      <link href="https://vincenttam.github.io/blog/2015/02/19/switch-tmux-panes-and-vim-latex/"/>
    
    <updated>2015-02-19T10:37:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/02/19/switch-tmux-panes-and-vim-latex</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use <a href="http://byobu.co">Byobu</a> with <a href="http://tmux.sourceforge.net">Tmux</a> backend.<sup id="fnref:pp_tmux"><a href="#fn:pp_tmux" class="footnote">1</a></sup></p>

<h2 id="problem">Problem</h2>

<ul>
  <li>Moving across panes is inconvenient.</li>
  <li>If I have a Vim vertical/horizontal split in a Tmux pane, I need to
  use <em>two</em> different sets of key bindings to navigate the adjacent
  panes.</li>
  <li>In the copy mode, it’s great that most of the key bindings follow
  from those of <a href="http://www.vim.org">Vim</a>, <em>but not the most important two</em>:
    <ul>
      <li>start selection</li>
      <li>copy</li>
    </ul>
  </li>
</ul>

<h2 id="solution">Solution</h2>

<p>I find two articles on <em>Giant Robots</em> very useful.</p>

<ol>
  <li><a href="http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits"><em>Seamlessly Navigate Vim and tmux Splits</em></a></li>
  <li><a href="http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future"><em>Tmux Copy &amp; Paste on OS X: A Better Future</em></a></li>
</ol>

<p>Therefore, I followed the steps in the first blog post, and installed
<a href="https://github.com/christoomey/vim-tmux-navigator">Vim Tmux Navigator</a>.</p>

<h2 id="another-problem">Another problem</h2>

<p>After the installation of the Vim plugin, I got another problem while
editing my VIMRC: The <code>{Down-Mapping}</code> <em>didn’t</em> work.
<a href="https://github.com/vim-latex/vim-latex">Vim-$\rm \LaTeX$</a> should know the reason.  I found an
article describing a similar problem.<sup id="fnref:choy"><a href="#fn:choy" class="footnote">2</a></sup>  However, I <em>wouldn’t</em>
like to change <code>~/.vim/bundle/vim-latex/plugin/imaps.vim</code>, so I got
stuck at this point for hours.  I tried to substitute <code>{Down-Mapping}</code>
with <code>&lt;C-a&gt;j</code> in VIMRC, but it <em>didn’t</em> work.</p>

<h2 id="lessons-learnt">Lessons Learnt</h2>

<ol>
  <li>
    <p>Accept simple ways to do things</p>

    <p>Even though I <em>can’t</em> set <code>{Down-Mapping}</code> to <code>&lt;C-j&gt;</code>, the Vim
 editor command <code>:TmuxNavigateDown</code> <em>isn’t</em> so hard to type.  I
 failed to realise that typing <code>:tm&lt;Tab&gt;</code> will do, and wasted time
 on that.  Now I accept the use of <em>two</em> different sets of
 keystrokes for switching to the Tmux pane/Vim buffer below.  We
 can look at this problem from another angle.</p>
  </li>
  <li>
    <p>Store a list of windows in a file</p>

    <p>A sample file can be found on Super User.<sup id="fnref:su"><a href="#fn:su" class="footnote">3</a></sup>  I found that if I
 had run Byobu before, a session <code>0</code> would <em>also</em> be created on top
 of <code>tmuxs</code>.  To avoid this problem, remove the first line in the
 sample window list and type <code>byobu attach -t 0</code> starting from the
 second time of opening Byobu.</p>
  </li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp_tmux">

      <p>See <a href="/blog/2015/02/14/use-tmux-for-previewing-posts/"><em>Use Tmux for Previewing Posts</em></a> in this blog for
details. <a href="#fnref:pp_tmux" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:choy">

      <p>See <a href="https://chrischoy.github.io/blog/notes/vim-tmux-navigation-and-vim-latex/"><em>Key mapping collision between vim-navigation and vim-latex</em></a>
by Chris Choy for details. <a href="#fnref:choy" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:su">

      <p>See <a href="http://superuser.com/a/747819"><em>Proper Format for Byobu’s windows.tmux?</em></a> on Super
User. <a href="#fnref:su" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
