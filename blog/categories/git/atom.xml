<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-02-07T19:03:02+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git Merge Failed?]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/03/git-merge-failed/"/>
    
    <updated>2015-09-03T14:34:31+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/03/git-merge-failed</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Octopress has recently removed Rubypants, so the automatic smartquotes
<em>aren’t</em> supported any more.  However, after typing <code>git pull
octopress master</code> on the <code>source</code> branch of the local working
directory for this blog, <code>git</code> simply said that it’s “already
up-to-date”.  I compared the stored trees for <code>plugins/</code> by using <code>git
show HEAD:plugins</code> on the <code>source</code> and <code>octopress/master</code> branches.
If the former has the commits of the later, then
<code>plugins/rubypants.rb</code> <em>shouldn’t</em> be found on the former.  I issued
the command <code>git merge octopress/master</code> again, and the version
control system still said that there’s <em>no</em> unmerged commits from the
<code>octopress/master</code> branch.<sup id="fnref:remote"><a href="#fn:remote" class="footnote">1</a></sup></p>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>By using <code>git log --abbrev-commit --pretty=oneline --graph</code> and <code>git
merge-base octopress/master HEAD</code>, I can quickly browse through the
commits.  Finally, I identified the reason for this failed merge: I
reverted the first merge of those two branches three months ago.  I
belive that I can revert this reversion to achieve my desired merge.</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:remote">

      <p>Since Octopress 3 is currently in development, I still use the
original version. <a href="#fnref:remote" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Used More Bash Utilities]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/"/>
    
    <updated>2015-08-22T11:59:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Same as what has been written in my older post
<a href="/blog/2014/12/12/using-xclip/"><em>Using Xclip</em></a>.</p>

<h2 id="drawback">Drawback</h2>

<p>Inputing the keyboard command for the paste action is, in my opinion,
<em>laborious</em>.</p>

<h2 id="tools-used">Tools used</h2>

<ol>
  <li><code>find</code></li>
  <li><code>grep</code></li>
  <li><code>sed</code></li>
  <li><code>awk</code></li>
  <li><code>xargs</code></li>
</ol>

<!-- more -->

<h3 id="the-find-command">The find command</h3>

<pre class="cliUB"><code>find . -path ./dir -prune -o -name '*.txt' -type f -print
find ./foo -exec wc {} \;
</code></pre>

<ul>
  <li><code>-path ./dir -prune -o</code>: exclude the directory <code>./dir</code></li>
  <li><code>-name '*.txt'</code>: match the name of the file</li>
  <li><code>-type f</code>: match files only, not directories</li>
  <li><code>-print</code>: print all matched paths</li>
  <li><code>-exec {cmd} {} \;</code>
    <ul>
      <li>execute <em>one single</em> command <code>{cmd}</code>, no pipes are allowed</li>
      <li><code>{}</code>: an instance of matched path</li>
      <li><code>\;</code>: terminator</li>
    </ul>
  </li>
</ul>

<p>I’ve found that if <code>-type f</code> goes <em>before</em> <code>-path ./dir -prune -o</code>,
the path <code>./dir</code> <em>won’t</em> be excluded.  <strong>Don’t use <code>./</code>, use <code>.</code>!</strong> on
Mac.</p>

<p>Using <code>-not -path ./dir</code> option <em>doesn’t</em> work.</p>

<h3 id="the-grep-command">The grep command</h3>

<ul>
  <li><code>-I</code>: ignore binary files</li>
  <li><code>-q . {}</code>: match any characters and suppress output for faster
  execution</li>
</ul>

<h3 id="the-sed-command">The sed command</h3>

<ul>
  <li><code>-i .bak</code>: edit file with backup extension <code>.bak</code> (Mac only, not in
  *nix)</li>
  <li><code>-i ''</code>: no backup (Also Mac only)</li>
  <li><code>sed 'p;s/foo/bar/'</code>: print original and replaced strings, separated
by whitespace.</li>
</ul>

<h3 id="the-awk-command">The awk command</h3>

<p>The command <code>awk '{ print $2 }'</code> extracts the second column.  For more
examples, see <a href="http://www.hcs.harvard.edu/~dholland/computers/awk.html">the simple awk tutorial</a>.</p>

<h3 id="the-xargs-command">The xargs command</h3>

<p>This is a very powerful command when combined with <code>find</code>.  This
utility reads from <code>stdin</code> and echos it.</p>

<ul>
  <li>no flags: all output joined into a single line</li>
  <li><code>-n3</code>: 3 space-delimited stdin in each line</li>
  <li><code>xargs -n2 {cmd}</code>: execute <code>{cmd} {arg1} {arg2}</code>, …, <code>{cmd}
  {arg2n-1} {arg2n}</code>.</li>
</ul>

<h3 id="putting-things-together">Putting things together</h3>

<p>Here’s some sample commands.</p>

<h4 id="find-and-replace-for-all-text-files-under-a-path">Find and replace for all text files under a path</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -type f -exec grep -Iq . {} \; -and \
-exec sed -i 's/foo/bar/g' {} \;
</code></pre>

<p>Ignore the <code>.git</code> folder, which is the Git repository, to avoid
damaging it.</p>

<h4 id="find-and-replace-substrings-in-path-names">Find and replace substrings in path names</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -name "*foo*" -print | sed \
'p;s/foo/bar/g' | xargs -n2 mv
</code></pre>

<p>All instances of <code>foo</code> in path names are replaced with <code>bar</code>.  Note
that that <code>-print</code> option <em>should be included</em>.  Otherwise, the path
<code>./.git</code> which is intended to be omitted will appear in the piped
output and processed by <code>sed</code>, and then the terminal will throw the
follow error message.</p>

<pre class="cliUB"><code>fatal: can not move directory into itself, source=.git, destination=.git/.git
</code></pre>

<h4 id="find-and-replace-git-remote-paths">Find and replace Git remote paths</h4>

<pre class="cliUB"><code>$ git remote -v | awk '{ print $2 }' | head -1 | \
xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList1.git (fetch)
origin	https://github.com/VincentTam/StudentList1.git (push)
$ git remote -v | awk '{ print $2 }' | head -1 | sed \
's/StudentList1/StudentList4/' | xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList4.git (fetch)
origin	https://github.com/VincentTam/StudentList4.git (push)
</code></pre>

<hr />
<p>(ADDED ON DEC 26TH, 2015)</p>

<h4 id="the-highlighting-of-grep-after-find">The highlighting of grep after find</h4>

<p>In Gnome Terminal, the <code>grep</code> command alone highlights the matched
text in red by default.  However, if it’s placed after <code>find ...
-exec</code>, then the highlighting will be <em>disabled</em>.  In order to enable
it again, add the option <code>--color=auto</code> to <code>grep</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h3>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (4): General Trees]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/"/>
    
    <updated>2015-08-07T23:41:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>After I’ve written <a href="/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the third post</a> in this series, I believed
that I could generate the SHA-1 hash of <em>all</em> Git objects.</p>

<h2 id="problem">Problem</h2>

<p>In order to understand the object ID of an arbitrary tree object, it
is necessary that I create a file in a sub-folder.  Suppose that I
copied the file <code>hello.txt</code> to the sub-directory <code>subdir</code> in the
directory <code>hello</code> in <a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>  In short, I just
followed the steps in Chapter 4 of <em>Version Control with Git</em>.  I
include the setup here for convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ mkdir subdir
$ cp hello.txt subdir
$ git add subdir/hello.txt
$ git write-tree
492413269336d21fac079d4a4672e55d5d2147ac
$ git cat-file -p 492413269336d21fac079d4a4672e55d5d2147ac
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt
040000 tree 68aba62e560c0ebc3396e8ae9335232cd93a3f60	subdir
</code></pre>

<p>After having successfully generated the SHA-1 hash for the tree object
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> in <a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>
in this series, I tried the same task for another tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.  Using the <em>same</em>
technique describe in <a href="/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the previous post</a>, I got another
<em>wrong</em> SHA-1 hash <code>06eb95bda67a8f86e65bb1590744f10a61eeccef</code>.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 71\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad040000 subdir\x00\x68\xab\xa6\x2e\x56\x
0c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60"
06eb95bda67a8f86e65bb1590744f10a61eeccef  -
</code></pre>

<p><em>How to get the <strong>right object ID</strong></em>?</p>

<!-- more -->

<h2 id="cause-of-error">Cause of error</h2>

<p>I realised that I had misunderstood the structure of a tree object
again after reading the first Google search result of “git tree object
format”.  It’s a Stack Overflow question on the “format of Git tree
object”.  I read the largest code block of
<a href="http://stackoverflow.com/a/21599232">the first answer</a>, and find out that <em>the leftmost zero
digit in</em> <code>040000</code> <em>should be taken away</em>.</p>

<h2 id="a-primitive-method">A primitive method</h2>

<h3 id="get-the-object-size-with-the-wc-command">Get the object size with the wc command</h3>

<pre class="cliUB"><code>$ printf "100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x00\xdd\x08\x
ae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0c\x0e\xbc\x
33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | wc -c
70
</code></pre>

<h3 id="sha-1-hash">SHA-1 hash</h3>

<pre class="cliUB"><code>$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0
c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<h2 id="a-more-time-saving-method">A more time-saving method</h2>

<p>The above <code>printf</code> command is error-prone.  Here’re some less
laborious commands.</p>

<h3 id="understand-the-tree-object">Understand the tree object</h3>

<p>While searching for the cause of error, I jumped through many web
pages, and I went back to
<a href="http://stackoverflow.com/a/13977017">the Stack Overflow question stated in the second post</a>
in this series.</p>

<pre class="cliUB"><code>$ git cat-file tree 492413269336d21fac079d4a4672e55d5d2147ac | od -c
0000000   1   0   0   6   4   4       h   e   l   l   o   .   t   x   t
0000020  \0   ; 030 345 022 333 247 236   L 203  \0 335  \b 256 263 177
0000040 216   r 213 215 255   4   0   0   0   0       s   u   b   d   i
0000060   r  \0   h 253 246   .   V  \f 016 274   3 226 350 256 223   5
0000100   #   , 331   :   ?   `
0000106
</code></pre>

<ul>
  <li>The <code>c</code> flag: show the input as characters if possible, otherwise as
  octal 1-byte units.</li>
  <li>The <code>b</code> flag: show the input as octal 1-byte units.</li>
</ul>

<p>Note that the number of bytes can be found at the bottom left hand
corner.  This is actually the object size of the tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.</p>

<p>One can capture the binary output and dump it to <code>od</code> with one
command.</p>

<pre class="cliUB"><code>$ git cat-file tree 4924132 | tee test.txt | od -c
</code></pre>

<h3 id="an-improved-printf-command">An improved printf command</h3>

<pre class="cliUB"><code>$ printf "tree 70\0" &gt; len.txt
$ cat len.txt test.txt | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<p>We finally get the target object ID in three steps.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="another-use-of-git-cat-file">Another use of git cat-file</h3>

<pre class="cliUB"><code>$ git cat-file -s 492413269336d21fac079d4a4672e55d5d2147ac
70
</code></pre>

<ul>
  <li>The <code>-s</code> flag: size</li>
  <li>The <code>-p</code> flag: pretty-print</li>
</ul>

<p>From the word “pretty” in the man page for <code>git-cat-file</code>, I
understand why I had misunderstood the structure of Git tree objects.</p>

<h3 id="use-od-like-hd">Use od like hd</h3>

<p>From a comment to the second answer to
<a href="http://stackoverflow.com/a/21599232">the Stack Overflow question</a> about the “format of git
tree object”, I saw the word <code>hexdump</code>, and I viewed its man page.  At
first, I <em>didn’t</em> know their difference, so I googled “od vs hexdump”,
and then I saw the abbreviation <code>hd</code> for <code>hexdump</code>, so I changed the
search query string to “hd vs od”, but found out that their functions
are basically the <em>same</em>, but their display is <em>different</em> by default.
I like the default display of <code>hd</code>.  To use <code>od</code> like <code>hd</code>, one only
needs to copy the command from the man page of <code>od</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (3): Trees With Multiple Blobs]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/"/>
    
    <updated>2015-08-07T22:30:55+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Having written <a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series, I thought that
I understood how to compute the SHA-1 hash of Git tree objects.</p>

<h2 id="problem">Problem</h2>

<p>Suppose that I add a file named <code>rose</code> which consisted merely of the
word <code>sweet</code> and a line terminator to the folder <code>hello</code> in
<a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a> in this series.  I include the setup here for
convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ echo "sweet" &gt; rose
$ git add rose
$ git write-tree
b12767ff2f8a8160bca15abfb775bca5ba31ccf1
$ git cat-file -p b12767ff2f8a8160bca15abfb775bca5ba31ccf1 | tee test.txt
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    hello.txt
100644 blob aa823728ea7d592acc69b36875a482cdf3fd5c8d    rose
</code></pre>

<p>Therefore, our target hash is
<code>b12767ff2f8a8160bca15abfb775bca5ba31ccf1</code>.</p>

<p>Just like what I’d done in the previous post, I manually changed the
hashes into a <code>printf</code> command that writes out the binary value of the
hashes.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad\n100644 rose\x00\xaa\x82\x37\x28\xea\x
7d\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
a4b430f9da3e22c0854fb26c97da77db271e5acf  -
</code></pre>

<p>What I got is <code>a4b430f9da3e22c0854fb26c97da77db271e5acf</code>, which is
<em>different</em> from the target.  <em>How can I get back <strong>the right SHA-1
hash</strong>?</em></p>

<!-- more -->

<h2 id="method">Method</h2>

<p>I read domegetter’s comment on <a href="https://gist.github.com/masak/2415865">this Gist</a>, and removed the
newline character <code>\n</code> in the middle of the quoted string in the above
<code>printf</code> command.  Then I decreased the object size by one since a
character had been taken out.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 69\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad100644 rose\x00\xaa\x82\x37\x28\xea\x7d
\x59\x2a\xcc\x69\xb3\x68\x75\xa4\x82\xcd\xf3\xfd\x5c\x8d" | shasum
b12767ff2f8a8160bca15abfb775bca5ba31ccf1  -
</code></pre>

<p>We’re done!</p>

]]></content>
    
  </entry>
  
</feed>
