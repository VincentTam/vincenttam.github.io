<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-08-21T20:20:48+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Fixed Jekyll-Bootstrap Asset Path (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/08/18/fixed-jekyll-bootstrap-asset-path-2/"/>
    
    <updated>2016-08-18T16:15:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/08/18/fixed-jekyll-bootstrap-asset-path-2</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I attempted to manually fix a <a href="/blog/2016/02/15/fixed-jekyll-bootstrap-asset-path/">problem in the first post</a> in this
series half a year ago.</p>

<h2 id="problem">Problem</h2>

<p>I have just updated the Jekyll source code for <a href="/blog2">Blog 2</a>.</p>

<pre class="cliUB"><code>[owner@localhost ~/blog2]$ git pull jekyll master
remote: Counting objects: 37, done.
remote: Total 37 (delta 10), reused 10 (delta 10), pack-reused 27
Unpacking objects: 100% (37/37), done.
From github.com:plusjade/jekyll-bootstrap
 * branch            master     -&gt; FETCH_HEAD
   3a34785..8193869  master     -&gt; jekyll/master
Removing sitemap.txt
Auto-merging _includes/JB/setup
CONFLICT (content): Merge conflict in _includes/JB/setup
Auto-merging _config.yml
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p><strong>How to repair this failed merge?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>In the file <code>_includes/JB/setup</code>, I deleted the <code>HEAD</code> part, and
adopted the official changes in the remote repository for Jekyll.
Then, everything should be fine.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Restore Corrupt Git Repository]]></title>
      <link href="https://vincenttam.github.io/blog/2016/08/17/restore-corrupt-git-repository/"/>
    
    <updated>2016-08-17T11:16:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/08/17/restore-corrupt-git-repository</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I <em>hadn’t</em> used <a href="http://www.vim.org">Vim</a> on my GNU/Linux desktop for a month.  When I
used it again, an error message was shown on the screen.</p>

<pre class="cliUB"><code>[owner@localhost ~]$ vi
Error detected while processing
/home/owner/.vim/bundle/nerdtree/plugin/NERD_tree.vim:
line  153:
E117: Unknown function: nerdtree#ui_glue#setupCommands
Error detected while processing function nerdtree#postSourceActions:
line    2:
E117: Unknown function: nerdtree#ui_glue#createDefaultBindings
Press ENTER or type command to continue
</code></pre>

<p>Since I was occupied with <a href="/blog2">another blog</a>, thinking that the
problem would be quickly fixed by an update of
<a href="https://github.com/scrooloose/nerdtree/">the NERD tree</a>, a <a href="http://www.vim.org">Vim</a> plugin for showing a file tree in a
sidebar, I <em>didn’t</em> want to find out the cause.</p>

<h2 id="problem">Problem</h2>

<p>During this <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> update, an exclamation mark with red background
was displayed on the LHS of the item <code>Plugin 'scrooloose/nerdtree'</code> in
the list contained in the status bar.  I then checked Vundle’s update
log.</p>

<pre class="cliUB"><code>[2016-08-12 15:18:40] Plugin scrooloose/nerdtree
[2016-08-12 15:18:40] $ cd '/home/owner/.vim/bundle/nerdtree' &amp;&amp; git pull &amp;&amp; git submodule update --init --recursive
[2016-08-12 15:18:40] &gt; error: object file .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d is empty
[2016-08-12 15:18:40] &gt; error: object file .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d is empty
[2016-08-12 15:18:40] &gt; fatal: loose object 2e2b649232d6ae4d02d74793e5da0ee08480ad8d (stored in .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d) is corrupt
[2016-08-12 15:18:40] &gt; fatal: The remote end hung up unexpectedly
[2016-08-12 15:18:40] &gt; 
</code></pre>

<p>While I was trying to update this plugin manually by typing in
<a href="/blog/2014/06/16/my-git-command-list-1/">Git commands</a> in bash, the electricity supply of my desktop went
off suddenly.  After it had been switched on again, I tried typing in
the commands again, and I got the same error.</p>

<p><strong>How can the Git repository be restored to its previous state</strong>, so
that it’s intact?</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>This problem can be fixed by simply undoing all changes done to the
directory <code>.git/</code>.  First, a list of recently changed files is needed,
and <code>find</code> can be used for this purpose.  I searched “ls filter by
time”, then this <a href="http://unix.stackexchange.com/a/10043">question about <code>ls</code></a> on Unix &amp; Linux
Stack Exchange appeared in the search results.  After reading the
first answer, I tried to find the defective binary objects in
<code>.git/objects</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ find . -maxdepth 1 -mindepth 1 \
&gt; -mtime -1 -type d -print -and -exec ls -lt {} \;
./2e
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:18 2b649232d6ae4d02d74793e5da0ee08480ad8d
-r--r--r-- 1 owner owner 256 May 12 20:38 c9b3dd9d6b8d11f2a3c12924f88588a846517d
./7e
total 44

-r--r--r-- 1 owner owner  341 May 12 20:38 8be22b1d5052e9140fc7c7b840755980cb960
9
-r--r--r-- 1 owner owner   49 May 12 20:38 9492c9f3b3b463114c0b6308a8ccd46ce3869
2
-r--r--r-- 1 owner owner 3029 Nov  1  2014 12c042bb8f5ab387a2bd0aabcfe30fce25027
f
./a0
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 019ff4d6b033f37efd9b1a99daf6c9797796b1
-r--r--r-- 1 owner owner 468 May 12 20:38 b89b83d8cd02f8043840a48b0b2cf3724bee1c
./29
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 24ab207162ca18cf5844d00b351ade1b5122f6
-r--r--r-- 1 owner owner 342 May 12 20:38 0935cab8f1e7dec23bb3bda0e2f7dd84c867d9
./38
total 20
-r--r--r-- 1 owner owner  0 Aug 12 15:43 d79fd1123213f2ceb3d6c32e8dad42bd587ec8
-r--r--r-- 1 owner owner 55 May 15  2015 569aab72ab0cbf466c40658ab9a3d86b55263e
./d7
total 8
-r--r--r-- 1 owner owner 0 Aug 12 15:43 9f81cd6e309fa01e063f3e12fb7615e712d7f4
./2a
total 36
-r--r--r-- 1 owner owner    0 Aug 12 15:43 a3bece220f147f85172fe43430d069276d835
c
-r--r--r-- 1 owner owner 7025 Jun 24  2015 f07ddbaf243cef8de791b45e7ff4232025a93
6
-r--r--r-- 1 owner owner  277 May 15  2015 a1964c1ba8fd40f3fdebf64efd0ba3756115a
f
./b7
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 23fee57c918ba3fd06057398e0a905fde7b80e
-r--r--r-- 1 owner owner 277 May 15  2015 2300417059ab5c52ac26c318e6b67bcefbe1e2
./c9
total 20
-r--r--r-- 1 owner owner  0 Aug 12 15:43 9312442b0961241eb0de3d6d65893c52f4d9d1
-r--r--r-- 1 owner owner 49 May 15  2015 ab6021b2473c60ba443c5ad197f2e3e3692895
./e8
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 7e67fafb0d6c63b790b37ab46f67cf0654ea22
-r--r--r-- 1 owner owner 466 May 15  2015 258b21d3a02dfcc0c5c10f3ab186763ae0c38b
./4c
total 36
-r--r--r-- 1 owner owner    0 Aug 12 15:43 bfb3869eb16ca691d93e1a3a05d375e87c1c7
7
-r--r--r-- 1 owner owner   57 May 15  2015 be8a2baee075d0935e3af349d85c2553d77bf
8
-r--r--r-- 1 owner owner 6830 Nov  1  2014 df1a366dbdf08c5f7412ff867d859d6818376
4
</code></pre>

<p>Objects are grouped according to the first two digits of their <a href="https://git-scm.com/">Git</a>
hash.  The following list is easier to read.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git/objects]$ find . -mindepth 2 \
&gt; -maxdepth 2 -mtime 0 -type f -exec file {} \;
./2e/2b649232d6ae4d02d74793e5da0ee08480ad8d: empty 
./7e/e42eb25e86a6825cdba370f20d2e146ed61ae6: empty 
./a0/019ff4d6b033f37efd9b1a99daf6c9797796b1: empty 
./29/24ab207162ca18cf5844d00b351ade1b5122f6: empty 
./38/d79fd1123213f2ceb3d6c32e8dad42bd587ec8: empty 
./d7/9f81cd6e309fa01e063f3e12fb7615e712d7f4: empty 
./2a/a3bece220f147f85172fe43430d069276d835c: empty 
./b7/23fee57c918ba3fd06057398e0a905fde7b80e: empty 
./c9/9312442b0961241eb0de3d6d65893c52f4d9d1: empty 
./e8/7e67fafb0d6c63b790b37ab46f67cf0654ea22: empty 
./4c/bfb3869eb16ca691d93e1a3a05d375e87c1c77: empty 
</code></pre>

<p>I <em>removed</em> these files and typed <code>git status</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree]$ git status
fatal: bad object HEAD
</code></pre>

<p>I googled “invalid sha1 pointer in cache-tree”, and read a webpage a
Stack Overflow <a href="http://stackoverflow.com/q/11706215">post on empty Git objects</a>.  The command
<code>git fsck --full</code> can be used to check the integrity of a <a href="https://git-scm.com/">Git</a>
repository.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (3525/3525), done.
error: HEAD: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5da0ee08480ad8d
error: refs/heads/master: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5da0ee08
480ad8d
error: refs/remotes/origin/HEAD: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5
da0ee08480ad8d
error: refs/remotes/origin/master: invalid sha1 pointer 2e2b649232d6ae4d02d74793
e5da0ee08480ad8d
error: HEAD: invalid reflog entry 2e2b649232d6ae4d02d74793e5da0ee08480ad8d
error: refs/heads/master: invalid reflog entry 2e2b649232d6ae4d02d74793e5da0ee08
480ad8d
error: refs/remotes/origin/master: invalid reflog entry 2e2b649232d6ae4d02d74793
e5da0ee08480ad8d
error: d79f81cd6e309fa01e063f3e12fb7615e712d7f4: invalid sha1 pointer in cache-t
ree
missing blob 2aa3bece220f147f85172fe43430d069276d835c
</code></pre>

<p>The above message inspired me to make the following list of files
changed due to this failed <a href="https://git-scm.com/">Git</a> pull.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ find . -mtime 0 -type f -print
./refs/heads/master
./refs/remotes/origin/master
./FETCH_HEAD
./logs/HEAD
./logs/refs/heads/master
./logs/refs/remotes/origin/master
./ORIG_HEAD
./index
</code></pre>

<p>I looked at the relevant files in the folder <code>logs/refs/</code>.  The change
time in Unix timestamp, the old and new commit IDs were found.
I restored these files (including the logs) with the help of these
logs <em>except</em> <code>FETCH_HEAD</code> and <code>index</code>.</p>

<p>At this stage, <code>git status</code> would still throw out an error if it was
invoked.  However, since the references to <code>HEAD</code> and <code>ORIG_HEAD</code> had
been manually set, <code>git reset --hard HEAD</code> could restore the <a href="https://git-scm.com/">Git</a>
repository.</p>

<h2 id="result">Result</h2>

<p>Finally, I could update <a href="https://github.com/scrooloose/nerdtree/">the NERD Tree</a>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree]$ git pull
remote: Counting objects: 11, done.
remote: Total 11 (delta 3), reused 3 (delta 3), pack-reused 8
Unpacking objects: 100% (11/11), done.
From https://github.com/scrooloose/nerdtree
   d280b15..2e2b649  master     -&gt; origin/master
Updating d280b15..2e2b649
Fast-forward
 autoload/nerdtree/ui_glue.vim | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="find">find</h3>

<ul>
  <li>Control the depth of the search with <code>-maxdepth</code> and <code>-mindepth</code>.</li>
  <li>Search files by time.  (To be put <em>before</em> <code>-type</code>)
    <ul>
      <li><code>-mtime [n]</code>: last modified time equal to <code>n</code> <del>day(s)</del>
  <code>*24</code> hours.  (rounded down to an integer)
        <ul>
          <li><code>-mtime +[n]</code>: modified <em>before</em> <code>n</code> <del>day(s)</del> <code>*24</code>
  hours.</li>
          <li><code>-mtime -[n]</code>: modified <em>within</em> the last <code>n</code>
  <del>day(s)</del> <code>*24</code> hours.</li>
          <li><code>-mmin [n]</code>: modified time calculated in number of <em>minutes</em>
  instead of days.</li>
        </ul>
      </li>
      <li><code>-atime [n]</code>, <code>-amin [n]</code>: last access time</li>
      <li><code>-ctime [n]</code>, <code>-cmin [n]</code>: last change of file status</li>
      <li><code>-anewer</code>, <code>-cnewer</code>, <code>-newer</code>: followed by filename (<code>-mnewer</code>
  <em>doesn’t</em> exist.)</li>
      <li><code>-daystart</code>: use the start of day for calculations.  (Preceed
  <code>-mtime</code>)</li>
    </ul>
  </li>
</ul>

<h3 id="ls">ls</h3>

<p>Use <code>-t</code> flag to sort files using their last modified time in
descending order.</p>

<h3 id="git">Git</h3>

<p>One can find files from a Git SHA1 hash using <code>git ls-tree -r &lt;hash&gt;</code>.
To search contents in commits, you may refer to a
<a href="http://stackoverflow.com/q/460331">question about Git</a> on Stack Overflow.</p>

<p>When I wrote my <a href="/blog/2015/08/06/my-git-command-list-3/">list of low-level commands</a> last year, I
<em>couldn’t</em> understand the role of <code>index</code>.  Now, I know that the
binary objects stored in <code>objets/</code> and the references can work
<em>independently</em> of <code>index</code>, which can be re-created by <code>git
write-tree</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[$\rm \LaTeX$-Suite in Portable Git]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git/"/>
    
    <updated>2016-04-09T14:34:38+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A year ago, I was using msysgit on M$ Win* 7. Its support for
Unicode characters <em>isn’t</em> so good, and I <em>can’t</em> write a text file
with accents like “café” in the Vim editor that shipped with msysgit.
As a result, I needed GVim for editing my $\rm \LaTeX$ documents.</p>

<p>Unluckily, unlike Linux, the GVim can <em>never</em> have forward control.
Therefore, I needed to switch windows between GVim and Git Bash.</p>

<p>More importantly, if I want to apply the Linux skills and the tools on
M$ Win*, I need <em>portable</em> programs excutable on a USB unless I
carry my laptop.</p>

<p>Luckily, the bash shell in Git for Windows has improved a lot.  The
accents are well supported.  Then, I have switched from GVim to the
embedded Vim in Git for Windows.  Luckily, the setup of Vundle was
smooth. Most of the installed plugins work fine in terminal Vim.</p>

<h2 id="problem-1">Problem 1</h2>

<p>In the post <a href="/blog/2016/03/20/git-portable-home-path/"><em>Git Portable Home Path</em></a>, a BAT file is included so
that the home folder and the <code>HOMEDRIVE</code> environment are automatically
set.  Since the <em>same</em> Git repository can be shared among multiple
devices, such as my Linux desktop, my M$ Win* 7 laptop, and my USB
stick, a bare repository is needed for efficient pulling and pushing
of Git commits.  Since I work outside home, I place a bare Git repo in
my USB stick.  However, for each local Git repository stored in the
USB stick (under <code>~/local_repo</code>, a.k.a.
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>), I need to run the
following command for each time I use Git Bash.</p>

<h2 id="problem-2">Problem 2</h2>

<p>After making some changes on a $\rm \TeX$ file, I compiled the file
using Mik$\rm \TeX$ Portable.</p>

<ol>
  <li>Browse the folder <code>$HOMEDRIVE/MikTeXPortable/</code>.</li>
  <li>Double-click on <code>miktex-portable.cmd</code>.</li>
  <li>In the Command Prompt popped up, switch to
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>.</li>
  <li>Type <code>pdflatex file.tex</code>.</li>
</ol>

<p>This sounds really slow.  The goal is to find a more efficient $\rm
\LaTeX$ editing workflow.</p>

<p>That’s <em>not</em> the end.  Another bad news came from <code>eu1lmr.fd</code>.  I’ve
got error similar to <a href="http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=75679">fengbaobao6’s</a>.  The compilation was
<em>stuck</em> at <code>...\tex\latex\euenc\eu1lmr.fd</code>.  Then an error was shown:
“Fontconfig error: Cannot load config file”.</p>

<!-- more -->

<h2 id="solution-1">Solution 1</h2>

<ol>
  <li>Create a file <code>~/.bashrc</code> if it <em>doesn’t</em> exist.</li>
  <li>Write an array consisting of all local Git repositories saved in
the USB stick in BASHRC.</li>
  <li>Then Write a for loop to reset the remote location.</li>
</ol>

<h2 id="solution-2">Solution 2</h2>

<p>Searching the error text, I found kounoupis’s answer on
<a href="http://askubuntu.com/a/708541">Ask Ubuntu</a>.  Even though the <code>export</code> command <em>didn’t</em>
work for me, I still found his answer informative.</p>

<p>Finally, reading <code>miktex-portable.cmd</code>, I gave up on investigating the
problem, and added the last line of this file into BASHRC since I have
other important things to do.</p>

<p><figure class='code'><figcaption><span>Actual CMD file found in Mik$\rm \TeX$ Portable  (miktex-portable.cmd)</span> <a href='/downloads/code/miktex-portable.cmd'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">cd</span> <span class="n">/d</span> <span class="nv">%~dp0</span>
</span><span class='line'>miktex\bin\miktex-taskbar-icon.exe
</span></code></pre></td></tr></table></div></figure></p>

<p>To include Mik$\rm \TeX$ into <code>PATH</code>, I first extracted <code>$HOMEDRIVE</code>
in the form <code>/f</code> instead of <code>F:/</code>.  If not, Mik$\rm \TeX$ <em>won’t</em>
work.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Here’s my BASHRC for Git Bash.</p>

<p><figure class='code'><figcaption><span>My BASHRC (bashrc)</span> <a href='/downloads/code/bashrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">stty</span><span class="w"> </span><span class="o">-</span><span class="vg">ixon</span>
</span><span class='line'><span class="vg">cd</span><span class="w"> </span><span class="o">~</span>
</span><span class='line'>
</span><span class='line'><span class="vg">HOMEDRIVE</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="vg">perl</span><span class="w"> </span><span class="o">-</span><span class="vg">e</span><span class="w"> </span><span class="c1">&#39;($var) = $ENV{HOMEDRIVE} =~ /([A-Z]):/; print &quot;/&quot;.lc($1)&#39;)</span>
</span><span class='line'><span class="vg">if</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="vg">perl</span><span class="w"> </span><span class="o">-</span><span class="vg">e</span><span class="w"> </span><span class="c1">&#39;($var) = $ENV{PATH} !~ /tex/i; print STDOUT $var&#39;) ]</span>
</span><span class='line'><span class="vg">then</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="err">&quot;</span><span class="vg">No</span><span class="w"> </span><span class="vg">LaTeX</span><span class="w"> </span><span class="vg">found!</span><span class="w">  </span><span class="vg">Added</span><span class="w"> </span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="vg">MikTeXPortable</span><span class="o">/</span><span class="vg">miktex</span><span class="o">/</span><span class="vg">bin</span>
</span><span class='line'><span class="w">    </span><span class="vg">to</span><span class="w"> </span><span class="vg">path</span><span class="o">.</span><span class="err">&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">PATH</span><span class="o">=</span><span class="err">$</span><span class="nl">PATH:</span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="vg">MikTeXPortable</span><span class="o">/</span><span class="vg">miktex</span><span class="o">/</span><span class="vg">bin</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="s2">&quot;IMPORTANT: Close MikTeX Taskbar icon before exit.&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="s2">&quot;Otherwise this shell WON&#39;T close.&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">miktex</span><span class="o">-</span><span class="vg">taskbar</span><span class="o">-</span><span class="vg">icon</span>
</span><span class='line'><span class="vg">fi</span>
</span><span class='line'>
</span><span class='line'><span class="vg">loc_repo</span><span class="o">=</span><span class="p">(</span>
</span><span class='line'><span class="c1">&#39;resume2015&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vg">for</span><span class="w"> </span><span class="vg">f</span><span class="w"> </span><span class="vg">in</span><span class="w"> </span><span class="err">$</span><span class="p">{</span><span class="vg">loc_repo</span><span class="p">[</span><span class="err">@</span><span class="p">]};</span><span class="w"> </span><span class="vg">do</span>
</span><span class='line'><span class="w">    </span><span class="vg">cd</span><span class="w"> </span><span class="err">$</span><span class="vg">f</span>
</span><span class='line'><span class="w">    </span><span class="vg">git</span><span class="w"> </span><span class="vg">remote</span><span class="w"> </span><span class="vg">set</span><span class="o">-</span><span class="vg">url</span><span class="w"> </span><span class="vg">origin</span><span class="w"> </span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="err">$</span><span class="vg">f</span><span class="o">.</span><span class="vg">git</span>
</span><span class='line'><span class="w">    </span><span class="vg">cd</span><span class="w"> </span><span class="o">-</span>
</span><span class='line'><span class="vg">done</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If the setup is correct, then <code>\ll</code> in $\rm \LaTeX$-Suite should
automatically trigger the $\rm \LaTeX$ compilation.  I give up on
finding ways to open a viewer with <code>\lv</code> since I can use the keyboard
to switch to a web browser to see the compiled PDF file <em>without</em>
installing another PDF viewer in my USB stick.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve learnt some Perl and bash after writing this BASHRC.</p>

<ol>
  <li>A little bit of Perl
    <ul>
      <li><code>$ENV{HOMEDRIVE}</code> for extracting the environment variable
  <code>HOMEDRIVE</code>.</li>
      <li><code>/(regex_pat)/;</code> for extracting matching string to capture
  groups <code>$1</code>, <code>$2</code>…  (The <code>()</code> around <code>regex_pat</code> is
  <em>crucial</em>.)</li>
      <li><code>.</code> for string concatenation.</li>
      <li><code>lc()</code> for converting a string to lowercase.</li>
    </ul>
  </li>
  <li>Bash for loop writing: described in <a href="/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/">one of my recent posts</a>.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Oneline Perl]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/04/oneline-perl/"/>
    
    <updated>2016-04-04T00:47:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/04/oneline-perl</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>Knowing some regular expressions in Vim, I hope to apply these
concepts to Perl so that I can search and replace some simple strings
directly in base <em>without</em> having to open the editor.</p>

<p>As a Vim user, the class of special characters in Perl is more
<em>natural</em> than that of <code>sed</code>.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2016/04/03/searching-git-commit-messages/">the previous post</a>, the list of Git commit messages containing
the string “HTTPS” is the main focus.  However, the alignment of this
list <em>isn’t</em> good: in the column representing the day, the data can be
either one or two digit.  Though I can still extract information with
<code>awk '{print $[col_num]}'</code>, it’s better to fix the alignment.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<!-- more -->

<h2 id="start-using-perl">Start using Perl</h2>

<p>Searching “perl intro” online, one can easily find some basic Perl
scripts.  I tried to issue some simple one-line Perl command to save
time, but I <em>couldn’t</em> easily find them.  Thanks to
<a href="http://articles.mongueurs.net/magazines/linuxmag50.html">a webpage by Philippe Bruhat</a>, I managed to starting using
Perl.  I jot them down here.</p>

<pre class="cliUB"><code>$ perl -e 'print "hello \n"'  # single quote outside
hello
$ perl -e "\$str='abc'; print \$str;"  # escape $, no EOL
abc
$ perl -e "$str='test'; print $str.'\n';"  # not desired
test\n
$ perl -e '$str="test"; print $str."\n";'  # want newlne
test
</code></pre>

<p>The <code>-e</code> flag above stands for “execute”.</p>

<h2 id="read-from-external-command">Read from external command</h2>

<p>Unluckily, I <em>didn’t</em> know how to use <code>system()</code> nor backticks to pass
output of a command into Perl.  After trying a few search keywords,
“perl oneline read command output” worked best for me.  It was quite
<em>uncommon</em> that I found the <em>eighth</em> result useful.  In the article
<a href="http://www.theperlreview.com/articles/one-liners.html"><em>Perl One-liners</em></a>, I found out the answer.</p>

<pre class="cliUB"><code>$ for (( i = 1; i &lt;= 10; i++ )); do
  echo $i
  done | perl -e 'while (&lt;&gt;) {s/(?&lt;!\d)\d{1}(?!\d)/0$&amp;/; print $_}'
01
02
03
04
05
06
07
08
09
10
</code></pre>

<p>In fact, the flag <code>-n</code> can be used to replace the <code>while (&lt;&gt;) {...}</code>
loop.  The <code>-p</code> flag has the function of <code>-n</code> but <em>also</em> prints the
output.  I learnt them from <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">Git manual web page for git-log</a>.</p>

<h2 id="solution">Solution</h2>

<p>Combine the above observations together.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s" \
  | perl -pe 's/(?&lt;=\u\l\l )\d{1}(?= )/0$&amp;/'
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 08 00:45:02 2016 +0800 A new article about Flair, Octopress and 
HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Perl: Apart from the above syntax, I’ve also learnt to use <code>$&amp;</code> and
<code>\b</code> in the replacement.  This is the Perl counterpart of <code>&amp;</code> and
<code>\&lt;</code> or <code>\&gt;</code> in Vim respectively.</li>
  <li>Git: In <code>git log</code> and <code>git show</code>,
    <ul>
      <li><code>--name-only</code>: suppress the diff hunk</li>
      <li><code>--pretty=format:</code> display nothing</li>
      <li><code>format</code> vs <code>tformat</code>: <code>t</code> stands for “terminator” (a.k.a. EOL)</li>
    </ul>

    <p>Each of each flags seems to be useless.  Nevertheless, <em>when
 combined together</em>, they help extract the edited files in a
 particular commit.</p>
  </li>
  <li>
    <p>Posting long commands in a blog entry</p>

    <p>From the two codeblocks explaining the difference between <code>format</code>
 and <code>tformat</code> in the Git manual, I understand that it’s better to
 end each line with a backslash, then continue with the command.
 In bash,  a <code>&gt;</code> is then automatically inserted at the beginning of
 each line.  This is carried from the shell to the source file of
 the blog article by copy and paste.  I used to think that it’s
 good to keep this so that this and the Ubuntu font will give a
 sense of reality to the reader.  However, this also causes
 inconvenience to those who want to try this command.  From now on,
 I <em>won’t</em> include this character anymore at the beginning of a
 long command exceeding 80 characters.  I will replace it with a
 white space instead.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Searching Git Commit Messages]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages/"/>
    
    <updated>2016-04-03T19:42:33+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/03/searching-git-commit-messages</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>The solution for the problem posed in the title is pretty simple.  For
instance, I want to find all Git commits whose commit message contains
“HTTPS”.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS"
commit 7400582e268f4a5b776269cf0cc08c04886a4769
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Sun Mar 20 20:19:47 2016 +0800

    Updated my Rakefile with HTTPS

commit b6f4f1fc872affc1107b330042d7b43b45e60595
Author: Vincent Tam &lt;fake@live.hk&gt;
Date:   Mon Feb 8 00:45:02 2016 +0800

    A new article about Flair, Octopress and HTTPS
</code></pre>

<p>However, I think that the output <em>isn’t</em> compact enough.  I would like
to display the following information.</p>

<pre class="cliUB"><code>&lt;short SHA1&gt; &lt;commit time&gt; &lt;commit message title&gt;
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Some pretty formats in Git
    <ul>
      <li><code>%h</code>: short SHA1</li>
      <li><code>%H</code>: full SHA1</li>
      <li><code>%an</code>: author name</li>
      <li><code>%cd</code>: commit date</li>
      <li><code>%s</code>: subject</li>
      <li><code>%b</code>: body</li>
    </ul>
  </li>
  <li>Automatically escape special characters in Vim
    <ul>
      <li>
        <p>Adding a backslash before <em>each</em> <code>%</code> in</p>

        <pre class="cliUB"><code>  :r !git log -2 --grep="HTTPS" --pretty="\%h \%cd \%s"
</code></pre>

        <p>is tedious and prone to errors.</p>
      </li>
      <li>
        <p>A more convenient way</p>

        <pre class="cliUB"><code>  :exec escape('r !git log -2 --grep="HTTPS" --pretty="%h %cd %s"', '%')
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">

      <p>To avoid junk mail, I replaced the first four letters of my email
address with <code>fake</code>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
