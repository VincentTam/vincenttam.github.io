<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-02-22T11:57:06+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (1)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/"/>
    
    <updated>2016-02-22T10:23:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I installed msysgit 1.9.0, and added its bash utilities to <code>PATH</code>.</p>

<h2 id="problem">Problem</h2>

<p>I attempted to open an HTML file with <code>curl</code>.  However, I got the
following error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (curl 'http://www.vim.org/index.html' -o 'C:/Temp
/PortableApps/gVimPortable/Data/Temp/VIA1ED5.html')
curl: (1) Protocol "'http" not supported or disabled in libcurl
shell returned 1
Hit any key to close this window...
</code></pre>

<h2 id="discussion">Discussion</h2>

<p>In the first line of the code block, <code>cmd.exe</code> with option <code>/c</code> ran
the command in the parenthesis <code>()</code>.  I copied the command inside <code>()</code>
and ran it in <code>cmd.exe</code>, and the error was reproduced.</p>

<p>It’s easy to find the cause of the problem.  I typed “curl protocol”
on the Google search web page, and the rest of the error message
appeared in the list of suggestions.  In the first search result,
which was <a href="http://stackoverflow.com/q/6684235">a Stack Overflow question</a>, I learnt why this
error occurred from the first answer—in the Command Prompt, one
needs to use double quotes <code>""</code> instead of single quotes <code>''</code>.  In Git
Bash, this <em>doesn’t</em> matter.</p>

<p>Since <code>curl</code> was bundled with msysgit, I suspected that the installed
version of Git was too old.  I then upgraded it.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>For a shell program (e.g. Command Prompt, bash), the option <code>-c</code>
(or <code>/c</code>) stands for “command”, and what’s left is the command to
be run.</li>
  <li><code>curl</code> will grab content from the input URL and display it as
standard output.  To save the downloaded content in a file, the
flag <code>-o</code>, which means “output”, can be used.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Fixed Jekyll-Bootstrap Asset Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/15/fixed-jekyll-bootstrap-asset-path/"/>
    
    <updated>2016-02-15T01:18:31+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/15/fixed-jekyll-bootstrap-asset-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>As I’ve said in <a href="/blog/2016/02/08/jekyll-blog-page-build-warning/"><em>Jekyll Blog Page Build Warning</em></a>,
<a href="https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0">GitHub Pages have upgraded to 3.0</a>.</p>

<h2 id="problem">Problem</h2>

<p>The Twitter theme for every post in <a href="/blog2">Blog 2</a> was <em>gone</em>, but
the home page and the archive page still looked good.</p>

<p>I viewed <a href="https://github.com/plusjade/jekyll-bootstrap">Jekyll-Bootstrap</a>’s <a href="https://github.com/plusjade/jekyll-bootstrap/issues">issue list</a>.  The
{% raw %}”{{ ASSET_PATH }}”{% endraw %} in the title of
<a href="https://github.com/plusjade/jekyll-bootstrap/issues/295">issue #295</a> caught my eyes.  Feeling that changing
<code>_config.yml</code> is too troublesome and prone to error, I clicked some
links for related web pages, such as
<a href="http://jekyllrb.com/docs/upgrading/2-to-3/#layout-metadata">a relevant page in Jekyll’s documentation</a>, but I <em>didn’t</em> know
what to do.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>It turns out that this issue is the <em>same</em> as <a href="https://github.com/plusjade/jekyll-bootstrap/issues/290">issue #290</a>.
The status of this issue is <em>closed</em> because some ways of fixing the
problem have been shared.  Since <a href="https://github.com/plusjade/jekyll-bootstrap/pull/293/files">qh’s fix</a> has received
positive comments, I adopt his approach.</p>

<p><a href="/blog/2015/08/06/my-git-command-list-3/">Before learning more Git commands this summer</a>, I would change
this <em>manually</em>.  However, fearing that I would <a href="https://github.com/qh/jekyll-bootstrap/commit/a2526d03dad245ea389c918055ac7fe46948ab1d">make a typo</a>, I
seek an automatic way to apply the changes in <code>_includes/JB/setup</code>.</p>

<p>I searched “git apply patch” on Google, and reached
<a href="http://stackoverflow.com/q/7827002">this Stack Overflow question</a> eventually.  The command</p>

<pre class="cliUB"><code>$ curl https://github.com/JustinTulloss/zeromq.node/pull/47.patch &gt; /tmp/47.patch
</code></pre>

<p>gave me a file (<em>without EOF</em>) in <code>/tmp</code>.</p>

<pre class="cliUB"><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href="https://patch-diff.githubusercontent.com/raw/JustinTulloss/zeromq.node/pull/47.patch"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>I then tried using <code>git apply</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/blog2]$ git apply --stat /tmp/47.patch
fatal: unrecognized input
</code></pre>

<p>Even though I added the <code>--stat</code> option, the bash still said that it’s
<code>fatal</code>.  I tried googling “git apply fatal”, but I <em>couldn’t</em> see
anything useful.  The third answer to this Stack Overflow question
cleared my doubts: by comparing the date of the answers, one knows
that <code>patch-diff.githubusercontent.com</code> should be used instead.</p>

<p>Since the reputation of the owner of the second answer is higher,
<em>not</em> having enough time to check their differences, I used <code>git am</code>
instead of <code>git apply --check</code>.  Finally, everything went smooth and
the <code>git push</code> was successful.  Originally, I intended to leave a
short Git comment message with a few helpful links.  However,
everything went so good that I <em>didn’t</em> have the chance to do that in
the Git repository for Blog 2.  Therefore, I recorded my thoughts
here.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Merge Failed?]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/03/git-merge-failed/"/>
    
    <updated>2015-09-03T14:34:31+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/03/git-merge-failed</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>Octopress has recently removed Rubypants, so the automatic smartquotes
<em>aren’t</em> supported any more.  However, after typing <code>git pull
octopress master</code> on the <code>source</code> branch of the local working
directory for this blog, <code>git</code> simply said that it’s “already
up-to-date”.  I compared the stored trees for <code>plugins/</code> by using <code>git
show HEAD:plugins</code> on the <code>source</code> and <code>octopress/master</code> branches.
If the former has the commits of the later, then
<code>plugins/rubypants.rb</code> <em>shouldn’t</em> be found on the former.  I issued
the command <code>git merge octopress/master</code> again, and the version
control system still said that there’s <em>no</em> unmerged commits from the
<code>octopress/master</code> branch.<sup id="fnref:remote"><a href="#fn:remote" class="footnote">1</a></sup></p>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>By using <code>git log --abbrev-commit --pretty=oneline --graph</code> and <code>git
merge-base octopress/master HEAD</code>, I can quickly browse through the
commits.  Finally, I identified the reason for this failed merge: I
reverted the first merge of those two branches three months ago.  I
belive that I can revert this reversion to achieve my desired merge.</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:remote">

      <p>Since Octopress 3 is currently in development, I still use the
original version. <a href="#fnref:remote" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Used More Bash Utilities]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/"/>
    
    <updated>2015-08-22T11:59:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Same as what has been written in my older post
<a href="/blog/2014/12/12/using-xclip/"><em>Using Xclip</em></a>.</p>

<h2 id="drawback">Drawback</h2>

<p>Inputing the keyboard command for the paste action is, in my opinion,
<em>laborious</em>.</p>

<h2 id="tools-used">Tools used</h2>

<ol>
  <li><code>find</code></li>
  <li><code>grep</code></li>
  <li><code>sed</code></li>
  <li><code>awk</code></li>
  <li><code>xargs</code></li>
</ol>

<!-- more -->

<h3 id="the-find-command">The find command</h3>

<pre class="cliUB"><code>find . -path ./dir -prune -o -name '*.txt' -type f -print
find ./foo -exec wc {} \;
</code></pre>

<ul>
  <li><code>-path ./dir -prune -o</code>: exclude the directory <code>./dir</code></li>
  <li><code>-name '*.txt'</code>: match the name of the file</li>
  <li><code>-type f</code>: match files only, not directories</li>
  <li><code>-print</code>: print all matched paths</li>
  <li><code>-exec {cmd} {} \;</code>
    <ul>
      <li>execute <em>one single</em> command <code>{cmd}</code>, no pipes are allowed</li>
      <li><code>{}</code>: an instance of matched path</li>
      <li><code>\;</code>: terminator</li>
    </ul>
  </li>
</ul>

<p>I’ve found that if <code>-type f</code> goes <em>before</em> <code>-path ./dir -prune -o</code>,
the path <code>./dir</code> <em>won’t</em> be excluded.  <strong>Don’t use <code>./</code>, use <code>.</code>!</strong> on
Mac.</p>

<p>Using <code>-not -path ./dir</code> option <em>doesn’t</em> work.</p>

<h3 id="the-grep-command">The grep command</h3>

<ul>
  <li><code>-I</code>: ignore binary files</li>
  <li><code>-q . {}</code>: match any characters and suppress output for faster
  execution</li>
</ul>

<h3 id="the-sed-command">The sed command</h3>

<ul>
  <li><code>-i .bak</code>: edit file with backup extension <code>.bak</code> (Mac only, not in
  *nix)</li>
  <li><code>-i ''</code>: no backup (Also Mac only)</li>
  <li><code>sed 'p;s/foo/bar/'</code>: print original and replaced strings, separated
by whitespace.</li>
</ul>

<h3 id="the-awk-command">The awk command</h3>

<p>The command <code>awk '{ print $2 }'</code> extracts the second column.  For more
examples, see <a href="http://www.hcs.harvard.edu/~dholland/computers/awk.html">the simple awk tutorial</a>.</p>

<h3 id="the-xargs-command">The xargs command</h3>

<p>This is a very powerful command when combined with <code>find</code>.  This
utility reads from <code>stdin</code> and echos it.</p>

<ul>
  <li>no flags: all output joined into a single line</li>
  <li><code>-n3</code>: 3 space-delimited stdin in each line</li>
  <li><code>xargs -n2 {cmd}</code>: execute <code>{cmd} {arg1} {arg2}</code>, …, <code>{cmd}
  {arg2n-1} {arg2n}</code>.</li>
</ul>

<h3 id="putting-things-together">Putting things together</h3>

<p>Here’s some sample commands.</p>

<h4 id="find-and-replace-for-all-text-files-under-a-path">Find and replace for all text files under a path</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -type f -exec grep -Iq . {} \; -and \
-exec sed -i 's/foo/bar/g' {} \;
</code></pre>

<p>Ignore the <code>.git</code> folder, which is the Git repository, to avoid
damaging it.</p>

<h4 id="find-and-replace-substrings-in-path-names">Find and replace substrings in path names</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -name "*foo*" -print | sed \
'p;s/foo/bar/g' | xargs -n2 mv
</code></pre>

<p>All instances of <code>foo</code> in path names are replaced with <code>bar</code>.  Note
that that <code>-print</code> option <em>should be included</em>.  Otherwise, the path
<code>./.git</code> which is intended to be omitted will appear in the piped
output and processed by <code>sed</code>, and then the terminal will throw the
follow error message.</p>

<pre class="cliUB"><code>fatal: can not move directory into itself, source=.git, destination=.git/.git
</code></pre>

<h4 id="find-and-replace-git-remote-paths">Find and replace Git remote paths</h4>

<pre class="cliUB"><code>$ git remote -v | awk '{ print $2 }' | head -1 | \
xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList1.git (fetch)
origin	https://github.com/VincentTam/StudentList1.git (push)
$ git remote -v | awk '{ print $2 }' | head -1 | sed \
's/StudentList1/StudentList4/' | xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList4.git (fetch)
origin	https://github.com/VincentTam/StudentList4.git (push)
</code></pre>

<hr />
<p>(ADDED ON DEC 26TH, 2015)</p>

<h4 id="the-highlighting-of-grep-after-find">The highlighting of grep after find</h4>

<p>In Gnome Terminal, the <code>grep</code> command alone highlights the matched
text in red by default.  However, if it’s placed after <code>find ...
-exec</code>, then the highlighting will be <em>disabled</em>.  In order to enable
it again, add the option <code>--color=auto</code> to <code>grep</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h3>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
</feed>
