<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2015-08-12T11:37:17+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h2 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h2>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (4): General Trees]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees/"/>
    
    <updated>2015-08-07T23:41:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/07/git-object-id-generation-4-general-trees</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>After I’ve written <a href="/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the third post</a> in this series, I believed
that I could generate the SHA-1 hash of <em>all</em> Git objects.</p>

<h2 id="problem">Problem</h2>

<p>In order to understand the object ID of an arbitrary tree object, it
is necessary that I create a file in a sub-folder.  Suppose that I
copied the file <code>hello.txt</code> to the sub-directory <code>subdir</code> in the
directory <code>hello</code> in <a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>  In short, I just
followed the steps in Chapter 4 of <em>Version Control with Git</em>.  I
include the setup here for convenience.</p>

<pre class="cliUB"><code>$ mkdir hello &amp;&amp; cd hello
$ git init
$ echo "hello world" &gt; hello.txt
$ git add hello.txt
$ git write-tree
68aba62e560c0ebc3396e8ae9335232cd93a3f60
$ mkdir subdir
$ cp hello.txt subdir
$ git add subdir/hello.txt
$ git write-tree
492413269336d21fac079d4a4672e55d5d2147ac
$ git cat-file -p 492413269336d21fac079d4a4672e55d5d2147ac
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	hello.txt
040000 tree 68aba62e560c0ebc3396e8ae9335232cd93a3f60	subdir
</code></pre>

<p>After having successfully generated the SHA-1 hash for the tree object
<code>68aba62e560c0ebc3396e8ae9335232cd93a3f60</code> in <a href="/blog/2015/08/07/git-object-id-generation-2-trees-with-one-single-blob/">the second post</a>
in this series, I tried the same task for another tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.  Using the <em>same</em>
technique describe in <a href="/blog/2015/08/07/git-object-id-generation-3-trees-with-multiple-blobs/">the previous post</a>, I got another
<em>wrong</em> SHA-1 hash <code>06eb95bda67a8f86e65bb1590744f10a61eeccef</code>.</p>

<pre class="cliUB"><code># Note: I *didn't* type enter in the following command.  Just keep typing.
$ printf "tree 71\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad040000 subdir\x00\x68\xab\xa6\x2e\x56\x
0c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60"
06eb95bda67a8f86e65bb1590744f10a61eeccef  -
</code></pre>

<p><em>How to get the <strong>right object ID</strong></em>?</p>

<!-- more -->

<h2 id="cause-of-error">Cause of error</h2>

<p>I realised that I had misunderstood the structure of a tree object
again after reading the first Google search result of “git tree object
format”.  It’s a Stack Overflow question on the “format of Git tree
object”.  I read the largest code block of
<a href="http://stackoverflow.com/a/21599232">the first answer</a>, and find out that <em>the leftmost zero
digit in</em> <code>040000</code> <em>should be taken away</em>.</p>

<h2 id="a-primitive-method">A primitive method</h2>

<h3 id="get-the-object-size-with-the-wc-command">Get the object size with the wc command</h3>

<pre class="cliUB"><code>$ printf "100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x00\xdd\x08\x
ae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0c\x0e\xbc\x
33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | wc -c
70
</code></pre>

<h3 id="sha-1-hash">SHA-1 hash</h3>

<pre class="cliUB"><code>$ printf "tree 70\x00100644 hello.txt\x00\x3b\x18\xe5\x12\xdb\xa7\x9e\x4c\x83\x0
0\xdd\x08\xae\xb3\x7f\x8e\x72\x8b\x8d\xad40000 subdir\x00\x68\xab\xa6\x2e\x56\x0
c\x0e\xbc\x33\x96\xe8\xae\x93\x35\x23\x2c\xd9\x3a\x3f\x60" | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<h2 id="a-more-time-saving-method">A more time-saving method</h2>

<p>The above <code>printf</code> command is error-prone.  Here’re some less
laborious commands.</p>

<h3 id="understand-the-tree-object">Understand the tree object</h3>

<p>While searching for the cause of error, I jumped through many web
pages, and I went back to
<a href="http://stackoverflow.com/a/13977017">the Stack Overflow question stated in the second post</a>
in this series.</p>

<pre class="cliUB"><code>$ git cat-file tree 492413269336d21fac079d4a4672e55d5d2147ac | od -c
0000000   1   0   0   6   4   4       h   e   l   l   o   .   t   x   t
0000020  \0   ; 030 345 022 333 247 236   L 203  \0 335  \b 256 263 177
0000040 216   r 213 215 255   4   0   0   0   0       s   u   b   d   i
0000060   r  \0   h 253 246   .   V  \f 016 274   3 226 350 256 223   5
0000100   #   , 331   :   ?   `
0000106
</code></pre>

<ul>
  <li>The <code>c</code> flag: show the input as characters if possible, otherwise as
  octal 1-byte units.</li>
  <li>The <code>b</code> flag: show the input as octal 1-byte units.</li>
</ul>

<p>Note that the number of bytes can be found at the bottom left hand
corner.  This is actually the object size of the tree object
<code>492413269336d21fac079d4a4672e55d5d2147ac</code>.</p>

<p>One can capture the binary output and dump it to <code>od</code> with one
command.</p>

<pre class="cliUB"><code>$ git cat-file tree 4924132 | tee test.txt | od -c
</code></pre>

<h3 id="an-improved-printf-command">An improved printf command</h3>

<pre class="cliUB"><code>$ printf "tree 70\0" &gt; len.txt
$ cat len.txt test.txt | shasum
492413269336d21fac079d4a4672e55d5d2147ac  -
</code></pre>

<p>We finally get the target object ID in three steps.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="another-use-of-git-cat-file">Another use of git cat-file</h3>

<pre class="cliUB"><code>$ git cat-file -s 492413269336d21fac079d4a4672e55d5d2147ac
70
</code></pre>

<ul>
  <li>The <code>-s</code> flag: size</li>
  <li>The <code>-p</code> flag: pretty-print</li>
</ul>

<p>From the word “pretty” in the man page for <code>git-cat-file</code>, I
understand why I had misunderstood the structure of Git tree objects.</p>

<h3 id="use-od-like-hd">Use od like hd</h3>

<p>From a comment to the second answer to
<a href="http://stackoverflow.com/a/21599232">the Stack Overflow question</a> about the “format of git
tree object”, I saw the word <code>hexdump</code>, and I viewed its man page.  At
first, I <em>didn’t</em> know their difference, so I googled “od vs hexdump”,
and then I saw the abbreviation <code>hd</code> for <code>hexdump</code>, so I changed the
search query string to “hd vs od”, but found out that their functions
are basically the <em>same</em>, but their display is <em>different</em> by default.
I like the default display of <code>hd</code>.  To use <code>od</code> like <code>hd</code>, one only
needs to copy the command from the man page of <code>od</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Octoshape on Ubuntu 14.04]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/13/octoshape-on-ubuntu-14-dot-04/"/>
    
    <updated>2015-06-13T22:26:34+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/13/octoshape-on-ubuntu-14-dot-04</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I installed <a href="http://www.octoshape.com/support/infinite-hd-octoshape-app/">Octoshape player</a> 2 years ago on Ubuntu 12.04.
A year ago, I <a href="/blog/2014/08/12/ubuntu-distribution-upgrade-to-14-dot-04/">upgraded the OS to Ubuntu 14.04</a>.</p>

<h2 id="problem">Problem</h2>

<p>I tried running Octoshape streaming service on
<a href="http://demo.octoshape.com/arplayer3/?link=octoshape://streams.octoshape.net/Demo.Trailers_500">a sample test page</a> tonight.  Unluckily, it <em>failed</em> to
work.  On the test page, the output on the right-hand side was similar
to the one listed below.</p>

<pre><code>20:35:57.368: OctoProgressEvent: 0 - Connecting to Octoshape client
20:35:57.382: Player is waiting for a link input (this does not mean
that Octoshape is ready).
20:35:57.509: OctoProgressEvent: 83 - Connecting to Octoshape client
20:35:57.623: OctoProgressEvent: 166 - Connecting to Octoshape client
20:35:57.748: OctoProgressEvent: 249 - Connecting to Octoshape client
20:35:57.880: OctoProgressEvent: 332 - Connecting to Octoshape client
20:35:58.011: OctoProgressEvent: 415 - Connecting to Octoshape client
20:35:58.138: OctoProgressEvent: 498 - Connecting to Octoshape client
20:35:58.271: OctoProgressEvent: 581 - Connecting to Octoshape client
20:35:58.370: OctoProgressEvent: 664 - Connecting to Octoshape client
20:35:58.470: OctoProgressEvent: 747 - Connecting to Octoshape client
20:35:58.574: OctoProgressEvent: 830 - Connecting to Octoshape client
20:35:58.704: OctoProgressEvent: 913 - Connecting to Octoshape client
20:35:58.804: OctoProgressEvent: 996 - Connecting to Octoshape client
20:35:58.808: OctoProgressEvent: 1000 - Connecting to Octoshape client
</code></pre>

<!-- more -->

<h2 id="cause">Cause</h2>

<p>I ran <code>ls</code> in <code>/opt/octoshape</code>, which is the folder in which Octoshape
player had been installed.</p>

<pre class="cliUB"><code>$ pwd
/opt/octoshape
$ ls
eula.rtf                     sua-1011082-0-marker.txt
eula.txt                     sua-1011082-0-module.xml
OctoshapeClient              sua-1011082-0-OctoshapeClientSUA
setup.xml                    sua-1011082-0-OctoshapeClientSUA.sig
sua-1011082-0-confirmed.txt  sua-1011082-0-suapack-versions.txt
sua-1011082-0-dynfiles.zip
</code></pre>

<p>I suspected that the version of Octoshape was too <em>old</em>.</p>

<h2 id="solution">Solution</h2>

<p>I <em>removed the folder</em> where Octoshape was installed, and
<em>re-installed</em> the player again, then it <em>worked</em>.</p>

<hr />
<p>(Added on AUG 3RD, 2015)</p>

<p>This only worked for a while.  <strong>After reboot, it <em>won’t</em> start
again</strong>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Concatenate Loop Variable's Value and a String in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2015/05/16/concatenate-loop-variables-value-and-a-string-in-bash/"/>
    
    <updated>2015-05-16T18:41:18+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/05/16/concatenate-loop-variables-value-and-a-string-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>While I was writing the post about a recent GitHub page build failure
ten days ago, I prepared two screenshots of the email from
GitHub.<sup id="fnref:pp_motiv"><a href="#fn:pp_motiv" class="footnote">1</a></sup>  I would like to resize them to 300px wide so that
they <em>wouldn’t</em> be too wide for mobile devices.</p>

<h2 id="problem">Problem</h2>

<p>There’re 2 image files in a folder: <code>fail1.png</code> and <code>fail2.png</code>.  I
wanted to create a scaled-down version of both pictures, and name the
smaller ones as <code>fail1_300.png</code> and <code>fail2_300.png</code>.</p>

<h2 id="failed-attempt">Failed attempt</h2>

<pre class="cliUB"><code>$ file *
fail1.png: PNG image data, 467 x 243, 8-bit/color RGB, non-interlaced
fail2.png: PNG image data, 464 x 242, 8-bit/color RGB, non-interlaced
$ for i in {1..2}; do convert fail$i.png -resize 300 fail$i_300.png; done
$ ls
fail1.png  fail2.png  fail.png
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Add a backslash <code>\</code> between the end of the loop variable <code>i</code> and the
underscore character <code>_</code>.</p>

<pre class="cliUB"><code>$ rm fail.png  # Clean up the mess
$ for i in {1..2}; do convert fail$i.png -resize 300 fail$i\_300.png; done
$ ls
fail1_300.png  fail1.png  fail2_300.png  fail2.png
</code></pre>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp_motiv">

      <p>Refer to <a href="/blog/2015/05/06/github-page-build-failure/">GitHub Page Build Failure</a> in <em>Blog 1</em> for the
details of the cause of the technical error. <a href="#fnref:pp_motiv" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Fbi vs Fim]]></title>
      <link href="https://vincenttam.github.io/blog/2015/04/11/fbi-vs-fim/"/>
    
    <updated>2015-04-11T00:15:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/04/11/fbi-vs-fim</id>
    
      <content type="html"><![CDATA[<p>This is just a small table listing <em>some</em> differences between <abbr title="framebuffer imageviewer">fbi</abbr> and
<abbr title="fbi improved">fim</abbr>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: left">Advantages</th>
      <th style="text-align: left">Disadvantages</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><abbr title="framebuffer imageviewer">fbi</abbr></td>
      <td style="text-align: left">support SVG files</td>
      <td style="text-align: left"><em>doesn’t</em> support tmux <br /> <em>doesn’t</em> have full control over the zooming size</td>
    </tr>
    <tr>
      <td style="text-align: center"><abbr title="fbi improved">fim</abbr></td>
      <td style="text-align: left">support tmux <br /> support custom zooming<sup id="fnref:fim_zoom"><a href="#fn:fim_zoom" class="footnote">1</a></sup></td>
      <td style="text-align: left"><em>doesn’t</em> support SVG files</td>
    </tr>
  </tbody>
</table>

<p>To view SVG images in tmux buffers, one can use ImageMagick’s
<code>convert</code> command.<sup id="fnref:convert"><a href="#fn:convert" class="footnote">2</a></sup></p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>While writing the above table, I ran into the problem of a Markdown
table with more than one line.  Luckily, searching “kramdown table
lines” on Google, I quickly found a Stack Overflow question which
solved my problem.<sup id="fnref:so12119310"><a href="#fn:so12119310" class="footnote">3</a></sup>  Note that <code>&lt;br&gt;</code> is <em>not</em> the best
way: add a slash <code>/</code> to suppress the following messages.</p>

<pre class="cliUB"><code>Warning: The HTML tag 'br' on line 15 cannot have any content -
auto-closing it
Warning: The HTML tag 'br' on line 17 cannot have any content -
auto-closing it
Warning: The HTML tag 'br' on line 1 cannot have any content -
auto-closing it
Warning: The HTML tag 'br' on line 1 cannot have any content -
auto-closing it
</code></pre>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:fim_zoom">
      <p>By <code>:nn%</code> <a href="#fnref:fim_zoom" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:convert">
      <p>By <code>convert in.svg out.jpg</code> <a href="#fnref:convert" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:so12119310">

      <p><a href="http://stackoverflow.com/a/12119310"><em>Newline in markdown table?</em></a> on Stack Overflow. <a href="#fnref:so12119310" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
