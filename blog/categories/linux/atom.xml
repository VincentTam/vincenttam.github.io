<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-17T18:11:46+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[I-Search and Reverse I-Search]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/i-search-and-reverse-i-search/"/>
    
    <updated>2016-04-09T20:42:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/i-search-and-reverse-i-search</id>
    
      <content type="html"><![CDATA[<p>One knows that long commands can be retrieved by <code>&lt;C-r&gt;</code>.  If the
search <em>fails</em>, one may cancel it by <code>&lt;C-g&gt;</code>.  However, how can one
search forward through the command history instead of backword?</p>

<p>The answer is simple: add <code>stty -ixon</code> to your BASHRC.</p>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[$\rm \LaTeX$-Suite in Portable Git]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git/"/>
    
    <updated>2016-04-09T14:34:38+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A year ago, I was using msysgit on M$ Win* 7. Its support for
Unicode characters <em>isn’t</em> so good, and I <em>can’t</em> write a text file
with accents like “café” in the Vim editor that shipped with msysgit.
As a result, I needed GVim for editing my $\rm \LaTeX$ documents.</p>

<p>Unluckily, unlike Linux, the GVim can <em>never</em> have forward control.
Therefore, I needed to switch windows between GVim and Git Bash.</p>

<p>More importantly, if I want to apply the Linux skills and the tools on
M$ Win*, I need <em>portable</em> programs excutable on a USB unless I
carry my laptop.</p>

<p>Luckily, the bash shell in Git for Windows has improved a lot.  The
accents are well supported.  Then, I have switched from GVim to the
embedded Vim in Git for Windows.  Luckily, the setup of Vundle was
smooth. Most of the installed plugins work fine in terminal Vim.</p>

<h2 id="problem-1">Problem 1</h2>

<p>In the post <a href="/blog/2016/03/20/git-portable-home-path/"><em>Git Portable Home Path</em></a>, a BAT file is included so
that the home folder and the <code>HOMEDRIVE</code> environment are automatically
set.  Since the <em>same</em> Git repository can be shared among multiple
devices, such as my Linux desktop, my M$ Win* 7 laptop, and my USB
stick, a bare repository is needed for efficient pulling and pushing
of Git commits.  Since I work outside home, I place a bare Git repo in
my USB stick.  However, for each local Git repository stored in the
USB stick (under <code>~/local_repo</code>, a.k.a.
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>), I need to run the
following command for each time I use Git Bash.</p>

<h2 id="problem-2">Problem 2</h2>

<p>After making some changes on a $\rm \TeX$ file, I compiled the file
using Mik$\rm \TeX$ Portable.</p>

<ol>
  <li>Browse the folder <code>$HOMEDRIVE/MikTeXPortable/</code>.</li>
  <li>Double-click on <code>miktex-portable.cmd</code>.</li>
  <li>In the Command Prompt popped up, switch to
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>.</li>
  <li>Type <code>pdflatex file.tex</code>.</li>
</ol>

<p>This sounds really slow.  The goal is to find a more efficient $\rm
\LaTeX$ editing workflow.</p>

<p>That’s <em>not</em> the end.  Another bad news came from <code>eu1lmr.fd</code>.  I’ve
got error similar to <a href="http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=75679">fengbaobao6’s</a>.  The compilation was
<em>stuck</em> at <code>...\tex\latex\euenc\eu1lmr.fd</code>.  Then an error was shown:
“Fontconfig error: Cannot load config file”.</p>

<!-- more -->

<h2 id="solution-1">Solution 1</h2>

<ol>
  <li>Create a file <code>~/.bashrc</code> if it <em>doesn’t</em> exist.</li>
  <li>Write an array consisting of all local Git repositories saved in
the USB stick in BASHRC.</li>
  <li>Then Write a for loop to reset the remote location.</li>
</ol>

<h2 id="solution-2">Solution 2</h2>

<p>Searching the error text, I found kounoupis’s answer on
<a href="http://askubuntu.com/a/708541">Ask Ubuntu</a>.  Even though the <code>export</code> command <em>didn’t</em>
work for me, I still found his answer informative.</p>

<p>Finally, reading <code>miktex-portable.cmd</code>, I gave up on investigating the
problem, and added the last line of this file into BASHRC since I have
other important things to do.</p>

<p><figure class='code'><figcaption><span>Actual CMD file found in Mik$\rm \TeX$ Portable  (miktex-portable.cmd)</span> <a href='/downloads/code/miktex-portable.cmd'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">cd</span> <span class="n">/d</span> <span class="nv">%~dp0</span>
</span><span class='line'>miktex\bin\miktex-taskbar-icon.exe
</span></code></pre></td></tr></table></div></figure></p>

<p>To include Mik$\rm \TeX$ into <code>PATH</code>, I first extracted <code>$HOMEDRIVE</code>
in the form <code>/f</code> instead of <code>F:/</code>.  If not, Mik$\rm \TeX$ <em>won’t</em>
work.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Here’s my BASHRC for Git Bash.</p>

<p><figure class='code'><figcaption><span>My BASHRC (.bashrc)</span> <a href='/downloads/code/.bashrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">stty</span><span class="w"> </span><span class="o">-</span><span class="vg">ixon</span>
</span><span class='line'><span class="vg">cd</span><span class="w"> </span><span class="o">~</span>
</span><span class='line'>
</span><span class='line'><span class="vg">HOMEDRIVE</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="vg">perl</span><span class="w"> </span><span class="o">-</span><span class="vg">e</span><span class="w"> </span><span class="c1">&#39;($var) = $ENV{HOMEDRIVE} =~ /([A-Z]):/; print &quot;/&quot;.lc($1)&#39;)</span>
</span><span class='line'><span class="vg">if</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="vg">perl</span><span class="w"> </span><span class="o">-</span><span class="vg">e</span><span class="w"> </span><span class="c1">&#39;($var) = $ENV{PATH} !~ /tex/i; print STDOUT $var&#39;) ]</span>
</span><span class='line'><span class="vg">then</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="err">&quot;</span><span class="vg">No</span><span class="w"> </span><span class="vg">LaTeX</span><span class="w"> </span><span class="vg">found!</span><span class="w">  </span><span class="vg">Added</span><span class="w"> </span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="vg">MikTeXPortable</span><span class="o">/</span><span class="vg">miktex</span><span class="o">/</span><span class="vg">bin</span>
</span><span class='line'><span class="w">    </span><span class="vg">to</span><span class="w"> </span><span class="vg">path</span><span class="o">.</span><span class="err">&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">PATH</span><span class="o">=</span><span class="err">$</span><span class="nl">PATH:</span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="vg">MikTeXPortable</span><span class="o">/</span><span class="vg">miktex</span><span class="o">/</span><span class="vg">bin</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="s2">&quot;IMPORTANT: Close MikTeX Taskbar icon before exit.&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">echo</span><span class="w"> </span><span class="s2">&quot;Otherwise this shell WON&#39;T close.&quot;</span>
</span><span class='line'><span class="w">    </span><span class="vg">miktex</span><span class="o">-</span><span class="vg">taskbar</span><span class="o">-</span><span class="vg">icon</span>
</span><span class='line'><span class="vg">fi</span>
</span><span class='line'>
</span><span class='line'><span class="vg">loc_repo</span><span class="o">=</span><span class="p">(</span>
</span><span class='line'><span class="c1">&#39;resume2015&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vg">for</span><span class="w"> </span><span class="vg">f</span><span class="w"> </span><span class="vg">in</span><span class="w"> </span><span class="err">$</span><span class="p">{</span><span class="vg">loc_repo</span><span class="p">[</span><span class="err">@</span><span class="p">]};</span><span class="w"> </span><span class="vg">do</span>
</span><span class='line'><span class="w">    </span><span class="vg">cd</span><span class="w"> </span><span class="err">$</span><span class="vg">f</span>
</span><span class='line'><span class="w">    </span><span class="vg">git</span><span class="w"> </span><span class="vg">remote</span><span class="w"> </span><span class="vg">set</span><span class="o">-</span><span class="vg">url</span><span class="w"> </span><span class="vg">origin</span><span class="w"> </span><span class="err">$</span><span class="vg">HOMEDRIVE</span><span class="o">/</span><span class="err">$</span><span class="vg">f</span><span class="o">.</span><span class="vg">git</span>
</span><span class='line'><span class="w">    </span><span class="vg">cd</span><span class="w"> </span><span class="o">-</span>
</span><span class='line'><span class="vg">done</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If the setup is correct, then <code>\ll</code> in $\rm \LaTeX$-Suite should
automatically trigger the $\rm \LaTeX$ compilation.  I give up on
finding ways to open a viewer with <code>\lv</code> since I can use the keyboard
to switch to a web browser to see the compiled PDF file <em>without</em>
installing another PDF viewer in my USB stick.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve learnt some Perl and bash after writing this BASHRC.</p>

<ol>
  <li>A little bit of Perl
    <ul>
      <li><code>$ENV{HOMEDRIVE}</code> for extracting the environment variable
  <code>HOMEDRIVE</code>.</li>
      <li><code>/(regex_pat)/;</code> for extracting matching string to capture
  groups <code>$1</code>, <code>$2</code>…  (The <code>()</code> around <code>regex_pat</code> is
  <em>crucial</em>.)</li>
      <li><code>.</code> for string concatenation.</li>
      <li><code>lc()</code> for converting a string to lowercase.</li>
    </ul>
  </li>
  <li>Bash for loop writing: described in <a href="/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/">one of my recent posts</a>.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Awk Column Alignment]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/awk-column-alignment/"/>
    
    <updated>2016-04-09T12:48:11+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/awk-column-alignment</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use Google’s <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a> to check if the images
on this blog are optimised.  Recently, it reported that two images in
<a href="/blog/2016/03/27/an-invalid-claim-by-the-government/"><em>An Invalid Claim by the Government</em></a> could be resized and
compressed.  I did so, and then the file size of the files were
displayed using <code>ls -lh</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/octopress/source/images/posts/W3CInvalid]$ ls -lh
total 312K
-rw-rw-r-- 1 owner owner  32K Apr  9 12:20 cedb1-300.png
-rw-rw-r-- 1 owner owner 132K Mar 27 14:32 cedb1.png
-rw-rw-r-- 1 owner owner  32K Apr  9 12:20 cedb2-300.png
-rw-rw-r-- 1 owner owner  83K Apr  9 12:20 cedb2.png
</code></pre>

<h2 id="problem">Problem</h2>

<p>To remove the first four column, one uses <code>awk</code> to do this.  (I assume
that the current working directory is the <em>same</em> as above.)</p>

<pre class="cliUB"><code>$ ls -lh | awk '{print $5 $6 $7 $8 $9}'

32KApr912:20cedb1-300.png
132KMar2714:32cedb1.png
32KApr912:20cedb2-300.png
83KApr912:20cedb2.png
</code></pre>

<p><strong>How can one properly align the columns?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Searching “awk align columns” on Google, I quickly got
<a href="http://stackoverflow.com/a/14095129">an answer posted by Mike Sherrill</a> on Stack Overflow.
However, there’s room for improvement in the visual effect of the
output.</p>

<pre class="cliUB"><code>$ ls -l | awk '{printf("%6s %s %2s %s %13s\n", $5, $6, $7, $8, $9);}'
                         
 32718 Apr  9 12:20 cedb1-300.png
135159 Mar 27 14:32     cedb1.png
 32665 Apr  9 12:20 cedb2-300.png
 84580 Apr  9 12:20     cedb2.png
</code></pre>

<p>The solution can be found in <a href="http://stackoverflow.com/a/1505360">the second search result</a> for
the Google search for “awk align columns left right”.  Added a hyphen
after <code>%</code> will suffice.  Note that the newline <code>\n</code> <em>can’t</em> be
omitted.  Otherwise, the output will be messed up.</p>

<pre class="cliUB"><code>$ ls -l | awk '{printf("%6s %s %2s %s %-s\n", $5, $6, $7, $8, $9);}'
                         
 32718 Apr  9 12:20 cedb1-300.png
135159 Mar 27 14:32 cedb1.png    
 32665 Apr  9 12:20 cedb2-300.png
 84580 Apr  9 12:20 cedb2.png    
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Loop Through an Array Having Only One Element in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/"/>
    
    <updated>2016-04-08T22:59:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>To find out a way to loop through all elements in an array consisting
of more than one element, it’s easy.</p>

<pre class="cliUB"><code>$ for f in {"hello","world"}; do echo $f; done
hello
world
</code></pre>

<h2 id="problem">Problem</h2>

<p>When I try to take away the second element in the above array so that
it becomes an array consisting in <em>one</em> single element, then I get
<code>{hello}</code> instead of <code>hello</code>.</p>

<pre class="cliUB"><code>$ for f in {"hello"}; do echo $f; done
{hello}
</code></pre>

<p><strong>How can one get back an output consistent with the case of arrays
consisting of multiple elements?</strong></p>

<!-- more -->

<h2 id="motivation">Motivation</h2>

<p>This problem seems nonsense–loops are supposed to do repetitive
tasks.  If the loop has <em>only</em> one iteration, then we can directly
type in the command, instead of adapting it into a loop and setting up
the scope of the loop.</p>

<p>Nevertheless, if one converts multiple lines of short texts into one
long single line with <code>xargs</code>, then the items will be separated by
white spaces.  This <em>won’t</em> work with the above for loop.  To change
the delimiter from white space to comma, one may use <code>paste -d, -s</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Syntax</th>
      <th style="text-align: left">Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>-d,</code></td>
      <td style="text-align: left">Use <code>,</code> as the delimiter.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code>-s</code></td>
      <td style="text-align: left"><em>Without</em> this flag, <code>$1</code> and <code>$2</code> are displayed in <em>parallel</em>.</td>
    </tr>
  </tbody>
</table>

<p>Surely, there are other tools to do this, such as <code>sed</code>.  However, I
think that <code>paste -d, -s</code> should be the <em>simplest</em> way to do this.
Note that the white space character between the two flags are
<em>important</em>.  Otherwise, this command <em>won’t</em> work.</p>

<p><em>Without</em> prior knowledge of the text to be processed, it’s possible
that the output of <code>paste -d, -s</code> consists of <em>only</em> one item.  This
single case is easy to deal with, even though the handling may be a
bit different from the case of multiple elements.  However, if the
syntax for the command that handles the output of <code>paste -d, -s</code>
<em>isn’t exactly the same</em> in the case of <em>one</em> single element and the
case of <em>multiple</em> elements, then we need to look at the content and
make manual judgement–this is tedious and error-prone.</p>

<p>In the problem posed in the previous section, if the list in the
for loop has <em>only</em> one item, then we need to do something different
from a list having two or more items.  If we observe this difference
with our naked eyes, the whole process will lack efficiency.</p>

<p>To solve this problem, we seek an <em>unified</em> approach.  In other words,
I try to change the syntax of the above for loop so that the for loop
will work for <em>any</em> one of these two cases.</p>

<h2 id="solution">Solution</h2>

<ol>
  <li>Surround each string in the array by a pair of <em>double quotes</em>.</li>
  <li>Add a comma <em>either</em> before the first element or after the last
element.</li>
</ol>

<p>The first step is needed if in the array, there exists an element
having two or more words <em>separated by a white space</em>; the second step
is needed for an array with one single element.</p>

<pre class="cliUB"><code>$ for f in {"hello world",}; do echo $f; done
hello world
</code></pre>

<h2 id="remarks">Remarks</h2>

<p>As the number of steps increases, the difficulty of constructing a
one-line command to do the thing rises tremendously.  It’s possible
that a shell script is <em>easier</em> to write.  By searching “bash array
tutorial” on Google, I got <a href="http://www.thegeekstuff.com/2010/06/bash-array-tutorial/">a tutorial on the Geek Stuff</a> in the
first search result.</p>

<p><figure class='code'><figcaption><span>A shell script that display an array (oneelt.sh)</span> <a href='/downloads/code/oneelt.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">arr</span><span class="o">=(</span><span class="s2">&quot;hello&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span> f in <span class="k">${</span><span class="nv">arr</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$f</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Oneline Perl]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/04/oneline-perl/"/>
    
    <updated>2016-04-04T00:47:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/04/oneline-perl</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>Knowing some regular expressions in Vim, I hope to apply these
concepts to Perl so that I can search and replace some simple strings
directly in base <em>without</em> having to open the editor.</p>

<p>As a Vim user, the class of special characters in Perl is more
<em>natural</em> than that of <code>sed</code>.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2016/04/03/searching-git-commit-messages/">the previous post</a>, the list of Git commit messages containing
the string “HTTPS” is the main focus.  However, the alignment of this
list <em>isn’t</em> good: in the column representing the day, the data can be
either one or two digit.  Though I can still extract information with
<code>awk '{print $[col_num]}'</code>, it’s better to fix the alignment.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<!-- more -->

<h2 id="start-using-perl">Start using Perl</h2>

<p>Searching “perl intro” online, one can easily find some basic Perl
scripts.  I tried to issue some simple one-line Perl command to save
time, but I <em>couldn’t</em> easily find them.  Thanks to
<a href="http://articles.mongueurs.net/magazines/linuxmag50.html">a webpage by Philippe Bruhat</a>, I managed to starting using
Perl.  I jot them down here.</p>

<pre class="cliUB"><code>$ perl -e 'print "hello \n"'  # single quote outside
hello
$ perl -e "\$str='abc'; print \$str;"  # escape $, no EOL
abc
$ perl -e "$str='test'; print $str.'\n';"  # not desired
test\n
$ perl -e '$str="test"; print $str."\n";'  # want newlne
test
</code></pre>

<p>The <code>-e</code> flag above stands for “execute”.</p>

<h2 id="read-from-external-command">Read from external command</h2>

<p>Unluckily, I <em>didn’t</em> know how to use <code>system()</code> nor backticks to pass
output of a command into Perl.  After trying a few search keywords,
“perl oneline read command output” worked best for me.  It was quite
<em>uncommon</em> that I found the <em>eighth</em> result useful.  In the article
<a href="http://www.theperlreview.com/articles/one-liners.html"><em>Perl One-liners</em></a>, I found out the answer.</p>

<pre class="cliUB"><code>$ for (( i = 1; i &lt;= 10; i++ )); do
  echo $i
  done | perl -e 'while (&lt;&gt;) {s/(?&lt;!\d)\d{1}(?!\d)/0$&amp;/; print $_}'
01
02
03
04
05
06
07
08
09
10
</code></pre>

<p>In fact, the flag <code>-n</code> can be used to replace the <code>while (&lt;&gt;) {...}</code>
loop.  The <code>-p</code> flag has the function of <code>-n</code> but <em>also</em> prints the
output.  I learnt them from <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">Git manual web page for git-log</a>.</p>

<h2 id="solution">Solution</h2>

<p>Combine the above observations together.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s" \
  | perl -pe 's/(?&lt;=\u\l\l )\d{1}(?= )/0$&amp;/'
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 08 00:45:02 2016 +0800 A new article about Flair, Octopress and 
HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Perl: Apart from the above syntax, I’ve also learnt to use <code>$&amp;</code> and
<code>\b</code> in the replacement.  This is the Perl counterpart of <code>&amp;</code> and
<code>\&lt;</code> or <code>\&gt;</code> in Vim respectively.</li>
  <li>Git: In <code>git log</code> and <code>git show</code>,
    <ul>
      <li><code>--name-only</code>: suppress the diff hunk</li>
      <li><code>--pretty=format:</code> display nothing</li>
      <li><code>format</code> vs <code>tformat</code>: <code>t</code> stands for “terminator” (a.k.a. EOL)</li>
    </ul>

    <p>Each of each flags seems to be useless.  Nevertheless, <em>when
 combined together</em>, they help extract the edited files in a
 particular commit.</p>
  </li>
  <li>
    <p>Posting long commands in a blog entry</p>

    <p>From the two codeblocks explaining the difference between <code>format</code>
 and <code>tformat</code> in the Git manual, I understand that it’s better to
 end each line with a backslash, then continue with the command.
 In bash,  a <code>&gt;</code> is then automatically inserted at the beginning of
 each line.  This is carried from the shell to the source file of
 the blog article by copy and paste.  I used to think that it’s
 good to keep this so that this and the Ubuntu font will give a
 sense of reality to the reader.  However, this also causes
 inconvenience to those who want to try this command.  From now on,
 I <em>won’t</em> include this character anymore at the beginning of a
 long command exceeding 80 characters.  I will replace it with a
 white space instead.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
</feed>
