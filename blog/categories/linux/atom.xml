<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-01-17T13:59:59+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Generate $\rm \LaTeX$ Code for Octave Matrices]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices/"/>
    
    <updated>2016-01-16T15:33:39+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<ul>
  <li><a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> use <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <a href="https://mathjax.org/">MathJax</a> to
  typeset math expressions.</li>
  <li>I use <a href="https://www.gnu.org/software/octave">GNU Octave</a> to efficiently perform (matrix)
  calculations for a quick and correct response on Mathematics Stack
  Exchange.</li>
</ul>

<h2 id="problem">Problem</h2>

<p>Recently, I encountered a <a href="http://math.stackexchange.com/q/1614115/290189">linear algebra problem</a> on
Mathematics Stack Exchange.</p>

<p>For any given matrix $A$ in Octave,</p>

<pre class="cliUB"><code>A = [1 2 2; 2 3 4; 4 4 2]
A =

   1   2   2
   2   3   4
   4   4   2
</code></pre>

<p><strong>how can one generate its $\rm \LaTeX$ code</strong></p>

<p><figure class='code'><figcaption><span>$\rm \LaTeX$ code for matrix $A$ </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A = \begin{bmatrix} 1&amp;2&amp;2\ 2&amp;3&amp;4\ 4&amp;4&amp;2 \end{bmatrix}</span></code></pre></td></tr></table></div></figure></p>

<p>so that one gets</p>

<div class="myeqn">
\[
  A = \begin{bmatrix} 1&amp;2&amp;2\\ 2&amp;3&amp;4\\ 4&amp;4&amp;2 \end{bmatrix}?
\]
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I searched “octave to latex matrices” and I found <a href="http://tex.stackexchange.com/a/43733">this answer</a>
quite useful.  I issued the first command to see the result.</p>

<pre class="cliUB"><code>strrep(strrep(mat2str(A),",","&amp;"),";","\\\\\n")(2:end-1)
ans = 1 2 2\\
2 3 4\\
4 4 2
</code></pre>

<p>I suspected that it <em>didn’t</em> work.  I posted it as a comment and
verified that I was right.  To fix this, I extracted the function
<code>mat2str(A)</code> in the middle of this command to see the results.  From
its result (<code>ans = [1 2 2;2 3 4;4 4 2]</code>), I realised that <code>strrep</code>
standed for “string replace”.  Then, I changed the double-quoted comma
in the second argument of function <code>strrep</code> to a double-quoted
whitespace character, and got the anticipated result.</p>

<pre class="cliUB"><code>strcat("\\begin{bmatrix}\n",strrep(strrep(mat2str(A)," ","&amp;"), ...
";","\\\\\n")(2:end-1),"\n\\end{bmatrix}\n")
ans = \begin{bmatrix}
1&amp;2&amp;2\\
2&amp;3&amp;4\\
4&amp;4&amp;2
\end{bmatrix}
</code></pre>

<h2 id="inadequacies">Inadequacies</h2>

<p>I <em>don’t</em> know how to do this for matrices with fractions.  I think I
can work it out by searching and testing in several hours, but I
<em>don’t</em> have the time to do so.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="math">Math</h3>

<p>I revised some definitions in linear algebra.</p>

<ul>
  <li>A matrix $U$ is <strong>unitary</strong> iff $UU^\star = U^\star U = I$.</li>
  <li>A matrix $N$ is <strong>normal</strong> iff $NN^\star = N^\star N$.</li>
</ul>

<h3 id="gnu-octave">GNU Octave</h3>

<ul>
  <li>The function <code>strrep(str,"foo","bar")</code> replaces all instances of
  <code>foo</code> in <code>str</code> with <code>bar</code>.  It can be used in a nested manner for
  multiple replacements.</li>
  <li>The function <code>strcat(str1,str2,...)</code> concatenates the strings
  inside.</li>
</ul>

<h3 id="grep">Grep</h3>

<p>When I was writing this article, I wanted to search for “<a href="https://www.gnu.org/software/octave">octave</a>”
(with the square brackets “[]”) with <code>grep</code> inside <a href="http://www.vim.org/">Vim</a>, but I got
over 1270 results.  I tried adding single/double quotes and escaping
the square brackets with a backslash, but I faied again.  Finally, I
googled “grep escape character” for a solution.  Since then, I know
that I should <a href="http://stackoverflow.com/a/12387802/3184351">add the <code>-F</code> flag to <code>grep</code></a> to fix the
string.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Ubuntu Grey Screen]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen/"/>
    
    <updated>2016-01-02T14:05:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen</id>
    
      <content type="html"><![CDATA[<p>A few days ago, I was browsing questions on
<a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> on <a href="http://www.ubuntu.com/desktop">Ubuntu</a> 14.04 <abbr title="long-term support">LTS</abbr>.  I opened
lots of tabs in <a href="https://www.chromium.org">Google Chromium</a>.  Suddenly, the screen
went grey.  I <em>don’t</em> know the cause.  I <em>hadn’t</em> seen such problem
before.  I waited for about one minute, and I switched to the terminal
<code>tty3</code>.  The grey screen became black <em>without any text</em>.  I pressed
<code>&lt;Ctrl&gt;-&lt;Alt&gt;-&lt;F7&gt;</code>, then the monitor showed the grey screen again.</p>

<p>I looked at the light (not the power button) in the desktop.  I
thought it represented the hard disk activity.  Its blinking was
normal.  As a result, I <em>guessed</em> the problem was related to the
display.  I <em>pretended</em> I could normally see things, and I <em>imagined</em>
the picture.  I logged on <code>tty3</code> without logging off <code>tty7</code>.  Then I
typed <code>sudo reboot</code> and supplied the password.  Within several
seconds, I heard a <em>beep</em> sound and the system rebooted.</p>

<p>Certainly, all unsaved works on <code>tty7</code> had been <em>lost</em>.  Therefore, it
was very important to save your work.  As I’m no longer an IT worker,
I <em>won’t</em> try to find a solution after reading a few related posts
which I have difficulty to understand.  Within six months, a new <abbr title="long-term support">LTS</abbr>
version of Ubuntu will be launched.  The price of a <abbr title="solid-state drive">SSD</abbr> will drop, so
perhaps I will clean install Ubuntu on a <abbr title="solid-state drive">SSD</abbr>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rare Sed Delimiters]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters/"/>
    
    <updated>2015-08-25T10:47:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>One can replace the usual delimiter <code>/</code> in <code>sed</code> with the other ones.
Therefore, the slashes in the <abbr title="Uniform Resource Locator">URL</abbr> inside the search pattern <em>won’t</em>
have to be escaped by backslashes, which makes the whole command ugly.</p>

<h2 id="problem">Problem</h2>

<p>If the search pattern contains multiple characters like <code>;</code>, <code>#</code>, <code>|</code>,
<code> </code> (white space), etc, and you’re <em>too lazy</em> to look for
<a href="http://backreference.org/2010/02/20/using-different-delimiters-in-sed/">other choices of delimiters</a>, what can you do?</p>

<!-- more -->

<h2 id="discussion-on-the-custom-delimiter">Discussion on the custom delimiter</h2>

<p>When I read article at the above link, I was stuck at the last part,
which was about using a custom delimiter.  I <em>mistakenly</em> thought that
this was for the search pattern and the replacement.  In fact, reading
<a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">GNU’s manual</a> and trying some commands repeatedly, I realized
that prepending the custom delimiter with a backslash was for
specifying the range of the following expresion.</p>

<p>Therefore, I finally understand what <code>somevar</code> is in
<a href="http://stackoverflow.com/a/20808364">this Stack Overflow question</a>.</p>

<h2 id="solution">Solution</h2>

<h3 id="customizing-the-delimiter-in-a-replacement">Customizing the delimiter in a replacement</h3>

<p>To begin with, I tried the following command.</p>

<pre class="cliUB"><code>$ echo strange | sed s/'[a-e]'/#/g
str#ng#
</code></pre>

<p>After that, I know that surrounding the whole <code>s</code> command <em>isn’t</em> a
must, just the <code>regex</code> and <code>replacement</code> will do.</p>

<p>Then I replaced all <code>/</code> with <code>y</code> in the above command.</p>

<pre class="cliUB"><code>$ echo strange | sed sy'[a-e]'y#yg
str#ng#
</code></pre>

<p>Now, it’s clear that the custom delimiter in the <code>s</code> command <em>doesn’t</em>
need to be escaped.</p>

<h3 id="towards-the-goal">Towards the goal</h3>

<p>The goal in this post is to use bizarre characters as the delimiter in
the <code>s</code> command, and I believe that if you’ve reached here, you’ll
probably understand what <a href="https://stackoverflow.com/a/4844945">this command</a> is doing, provided
that you know the way to
<a href="https://stackoverflow.com/a/10571642">input control characters as arguments in bash commands</a>.</p>

<h2 id="more-examples">More examples</h2>

<p>I’ve just tried to delete a <code>&lt;script&gt;</code> tag in the <code>master</code> branch of a
repository for <a href="https://vincenttam.github.io/SampleWebPage/ex0.html">my sample W3CSS page</a> using the in-place
editing option of <code>sed</code>.  Before making <em>real</em> changes to the file, I
tested my command syntax with the standard output first.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/gh-pages
  remotes/origin/master
[owner@localhost ~/SampleWebPage]$ sed -nr '\#&lt;scr#,#&lt;/scr#p' ex0.html
sed: -e expression #1, char 9: unexpected `,'
</code></pre>

<p>Looking at <a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">the manual</a> <em>again</em>, I thought that <code>\%regex%</code>
represented <em>one</em> address only.  The pattern after the comma was
<em>another</em> address, so I should have used <em>two</em> backslashes in the last
command.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ sed -ir '\#&lt;scr#,\#&lt;/scr#' ex0.html
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Find Files for Vim to Edit in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash/"/>
    
    <updated>2015-08-23T23:48:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Since copying and pasting the output of a command can be a tedious
job.  For example, if you want to create your blog using a framework,
you may first logon to your <a href="https://github.com">GitHub</a> account and create an <em>empty</em>
repository there, then <code>git clone</code> <a href="http://octopress.org">Octopress</a>/<a href="http://jekyllbootstrap.com">Jekyll-Bootstrap</a> from
GitHub, reset the <code>origin</code> <abbr title="Uniform Resource Locator">URL</abbr>, and input the new <abbr title="Uniform Resource Locator">URL</abbr> based on the old
one.</p>

<p>After having created a repository online, you will see the <abbr title="Uniform Resource Locator">URL</abbr> of the
repository using the <abbr title="Secure SHell">SSH</abbr> protocol.  If one <em>doesn’t</em> want to repeat
the start of the <abbr title="Uniform Resource Locator">URL</abbr> <code>git@github.com:</code>, one may use the bash commands
introduced in <a href="/blog/2015/08/22/used-more-bash-utilities/">the previous post</a> to extract its useful parts for
the <code>sed</code> substitution.</p>

<pre class="cliUB"><code>$ git remote -v
octopress	git@github.com:imathis/octopress.git (fetch)
octopress	git@github.com:imathis/octopress.git (push)
origin	git@github.com:VincentTam/vincenttam.github.io.git (fetch)
origin	git@github.com:VincentTam/vincenttam.github.io.git (push)
$ name=userName; repo=repoName
$ git remote -v | sed -n '3{p;q}' | awk '{print $2}' | sed -r \
"s;(\w*)/(.*).git;$name/$repo.git;"
$ unset name repo
</code></pre>

<h2 id="problem">Problem</h2>

<p>I tried extracting a list of Markdown files containing a particular
word and passing them to <a href="http://www.vim.org">Vim</a> as arguments using <code>find</code>, <code>grep</code> and
<code>xargs</code>.  Unluckily, I got an error.</p>

<pre class="cliUB"><code>$ find source/_posts/ -name "*.markdown" -exec grep -q ^tag {} \; \
&gt; -print | xargs vi
Vim: Warning: Input is not from a terminal
3 files to edit
$ 
</code></pre>

<p>Note: <em>Without</em> the <code>-print</code> flag, the above command <em>won’t</em> work.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>As a result, I searched “vim warning input is not from a terminal
xargs” on Google, and found <a href="http://superuser.com/q/336016">this question</a> very useful.  I
should have wrapped the <code>find</code> command like <code>$(find ...)</code>.</p>

<pre class="cliUB"><code>$ vi $(find source/_posts/ -name "*.markdown" -exec \
&gt; grep -q ^tag {} \; -print | xargs)
3 files to edit
</code></pre>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="sed">sed</h3>
<ul>
  <li><code>3{p;q}</code>: quit after printing the third line for the sake of
  efficiency</li>
  <li><code>-r</code>: use extended regular expression to save the trouble of
  escaping <code>()</code> for submatches.</li>
  <li><code>-n</code>: suppress standard output.</li>
  <li>Enclose the expression
    <ul>
      <li>with <em>single</em> quotes to <em>disable</em> interpretation of bash
  variables</li>
      <li>with <em>double</em> quotes to <em>enable</em> interpretation of bash
  variables.</li>
    </ul>
  </li>
  <li>One can replace the delimiter <code>/</code> in the expression
  <code>s/{pat}/{repl}/</code> by any one character from <code>_;#| </code>.</li>
  <li>Specify a custom delimiter like <code>\%.%s%foo%bar%</code>.  (The
  variable/range <code>.</code> is <em>needed</em>.)</li>
</ul>

<h3 id="bash">bash</h3>

<ul>
  <li>Set variables using <code>var1=value1;var2=value2;...</code></li>
  <li>Unset variable usign <code>unset var1 var2 ...</code></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Used More Bash Utilities]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities/"/>
    
    <updated>2015-08-22T11:59:26+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/22/used-more-bash-utilities</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Same as what has been written in my older post
<a href="/blog/2014/12/12/using-xclip/"><em>Using Xclip</em></a>.</p>

<h2 id="drawback">Drawback</h2>

<p>Inputing the keyboard command for the paste action is, in my opinion,
<em>laborious</em>.</p>

<h2 id="tools-used">Tools used</h2>

<ol>
  <li><code>find</code></li>
  <li><code>grep</code></li>
  <li><code>sed</code></li>
  <li><code>awk</code></li>
  <li><code>xargs</code></li>
</ol>

<!-- more -->

<h3 id="the-find-command">The find command</h3>

<pre class="cliUB"><code>find . -path ./dir -prune -o -name '*.txt' -type f -print
find ./foo -exec wc {} \;
</code></pre>

<ul>
  <li><code>-path ./dir -prune -o</code>: exclude the directory <code>./dir</code></li>
  <li><code>-name '*.txt'</code>: match the name of the file</li>
  <li><code>-type f</code>: match files only, not directories</li>
  <li><code>-print</code>: print all matched paths</li>
  <li><code>-exec {cmd} {} \;</code>
    <ul>
      <li>execute <em>one single</em> command <code>{cmd}</code>, no pipes are allowed</li>
      <li><code>{}</code>: an instance of matched path</li>
      <li><code>\;</code>: terminator</li>
    </ul>
  </li>
</ul>

<p>I’ve found that if <code>-type f</code> goes <em>before</em> <code>-path ./dir -prune -o</code>,
the path <code>./dir</code> <em>won’t</em> be excluded.  <strong>Don’t use <code>./</code>, use <code>.</code>!</strong> on
Mac.</p>

<p>Using <code>-not -path ./dir</code> option <em>doesn’t</em> work.</p>

<h3 id="the-grep-command">The grep command</h3>

<ul>
  <li><code>-I</code>: ignore binary files</li>
  <li><code>-q . {}</code>: match any characters and suppress output for faster
  execution</li>
</ul>

<h3 id="the-sed-command">The sed command</h3>

<ul>
  <li><code>-i .bak</code>: edit file with backup extension <code>.bak</code> (Mac only, not in
  *nix)</li>
  <li><code>-i ''</code>: no backup (Also Mac only)</li>
  <li><code>sed 'p;s/foo/bar/'</code>: print original and replaced strings, separated
by whitespace.</li>
</ul>

<h3 id="the-awk-command">The awk command</h3>

<p>The command <code>awk '{ print $2 }'</code> extracts the second column.  For more
examples, see <a href="http://www.hcs.harvard.edu/~dholland/computers/awk.html">the simple awk tutorial</a>.</p>

<h3 id="the-xargs-command">The xargs command</h3>

<p>This is a very powerful command when combined with <code>find</code>.  This
utility reads from <code>stdin</code> and echos it.</p>

<ul>
  <li>no flags: all output joined into a single line</li>
  <li><code>-n3</code>: 3 space-delimited stdin in each line</li>
  <li><code>xargs -n2 {cmd}</code>: execute <code>{cmd} {arg1} {arg2}</code>, …, <code>{cmd}
  {arg2n-1} {arg2n}</code>.</li>
</ul>

<h3 id="putting-things-together">Putting things together</h3>

<p>Here’s some sample commands.</p>

<h4 id="find-and-replace-for-all-text-files-under-a-path">Find and replace for all text files under a path</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -type f -exec grep -Iq . {} \; -and \
-exec sed -i 's/foo/bar/g' {} \;
</code></pre>

<p>Ignore the <code>.git</code> folder, which is the Git repository, to avoid
damaging it.</p>

<h4 id="find-and-replace-substrings-in-path-names">Find and replace substrings in path names</h4>

<pre class="cliUB"><code>find . -path ./.git -prune -o -name "*foo*" -print | sed \
'p;s/foo/bar/g' | xargs -n2 mv
</code></pre>

<p>All instances of <code>foo</code> in path names are replaced with <code>bar</code>.  Note
that that <code>-print</code> option <em>should be included</em>.  Otherwise, the path
<code>./.git</code> which is intended to be omitted will appear in the piped
output and processed by <code>sed</code>, and then the terminal will throw the
follow error message.</p>

<pre class="cliUB"><code>fatal: can not move directory into itself, source=.git, destination=.git/.git
</code></pre>

<h4 id="find-and-replace-git-remote-paths">Find and replace Git remote paths</h4>

<pre class="cliUB"><code>$ git remote -v | awk '{ print $2 }' | head -1 | \
xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList1.git (fetch)
origin	https://github.com/VincentTam/StudentList1.git (push)
$ git remote -v | awk '{ print $2 }' | head -1 | sed \
's/StudentList1/StudentList4/' | xargs git remote set-url origin
$ git remote -v
origin	https://github.com/VincentTam/StudentList4.git (fetch)
origin	https://github.com/VincentTam/StudentList4.git (push)
</code></pre>

<hr />
<p>(ADDED ON DEC 26TH, 2015)</p>

<h4 id="the-highlighting-of-grep-after-find">The highlighting of grep after find</h4>

<p>In Gnome Terminal, the <code>grep</code> command alone highlights the matched
text in red by default.  However, if it’s placed after <code>find ...
-exec</code>, then the highlighting will be <em>disabled</em>.  In order to enable
it again, add the option <code>--color=auto</code> to <code>grep</code>.</p>

]]></content>
    
  </entry>
  
</feed>
