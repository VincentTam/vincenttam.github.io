<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-09T18:30:37+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[$\rm \LaTeX$-Suite in Portable Git]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git/"/>
    
    <updated>2016-04-09T14:34:38+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/latex-suite-in-portable-git</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>A year ago, I was using msysgit on M$ Win* 7. Its support for
Unicode characters <em>isn’t</em> so good, and I <em>can’t</em> write a text file
with accents like “café” in the Vim editor that shipped with msysgit.
As a result, I needed GVim for editing my $\rm \LaTeX$ documents.</p>

<p>Unluckily, unlike Linux, the GVim can <em>never</em> have forward control.
Therefore, I needed to switch windows between GVim and Git Bash.</p>

<p>More importantly, if I want to apply the Linux skills and the tools on
M$ Win*, I need <em>portable</em> programs excutable on a USB unless I
carry my laptop.</p>

<p>Luckily, the bash shell in Git for Windows has improved a lot.  The
accents are well supported.  Then, I have switched from GVim to the
embedded Vim in Git for Windows.  Luckily, the setup of Vundle was
smooth. Most of the installed plugins work fine in terminal Vim.</p>

<h2 id="problem-1">Problem 1</h2>

<p>In the post <a href="/blog/2016/03/20/git-portable-home-path/"><em>Git Portable Home Path</em></a>, a BAT file is included so
that the home folder and the <code>HOMEDRIVE</code> environment are automatically
set.  Since the <em>same</em> Git repository can be shared among multiple
devices, such as my Linux desktop, my M$ Win* 7 laptop, and my USB
stick, a bare repository is needed for efficient pulling and pushing
of Git commits.  Since I work outside home, I place a bare Git repo in
my USB stick.  However, for each local Git repository stored in the
USB stick (under <code>~/local_repo</code>, a.k.a.
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>), I need to run the
following command for each time I use Git Bash.</p>

<h2 id="problem-2">Problem 2</h2>

<p>After making some changes on a $\rm \TeX$ file, I compiled the file
using Mik$\rm \TeX$ Portable.</p>

<ol>
  <li>Browse the folder <code>$HOMEDRIVE/MikTeXPortable/</code>.</li>
  <li>Double-click on <code>miktex-portable.cmd</code>.</li>
  <li>In the Command Prompt popped up, switch to
<code>$HOMEDRIVE/PortableGit/home/owner/local_repo</code>.</li>
  <li>Type <code>pdflatex file.tex</code>.</li>
</ol>

<p>This sounds really slow.  The goal is to find a more efficient $\rm
\LaTeX$ editing workflow.</p>

<p>That’s <em>not</em> the end.  Another bad news came from <code>eu1lmr.fd</code>.  I’ve
got error similar to <a href="http://bbs.ctex.org/forum.php?mod=viewthread&amp;tid=75679">fengbaobao6’s</a>.  The compilation was
<em>stuck</em> at <code>...\tex\latex\euenc\eu1lmr.fd</code>.  Then an error was shown:
“Fontconfig error: Cannot load config file”.</p>

<!-- more -->

<h2 id="solution-1">Solution 1</h2>

<ol>
  <li>Create a file <code>~/.bashrc</code> if it <em>doesn’t</em> exist.</li>
  <li>Write an array consisting of all local Git repositories saved in
the USB stick in BASHRC.</li>
  <li>Then Write a for loop to reset the remote location.</li>
</ol>

<h2 id="solution-2">Solution 2</h2>

<p>Searching the error text, I found kounoupis’s answer on
<a href="http://askubuntu.com/a/708541">Ask Ubuntu</a>.  Even though the <code>export</code> command <em>didn’t</em>
work for me, I still found his answer informative.</p>

<p>Finally, reading <code>miktex-portable.cmd</code>, I gave up on investigating the
problem, and added the last line of this file into BASHRC since I have
other important things to do.</p>

<p>{% include_code Actual CMD file found in Mik$\rm \TeX$ Portable miktex-portable.cmd %}</p>

<p>To include Mik$\rm \TeX$ into <code>PATH</code>, I first extracted <code>$HOMEDRIVE</code>
in the form <code>/f</code> instead of <code>F:/</code>.  If not, Mik$\rm \TeX$ <em>won’t</em>
work.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Here’s my BASHRC for Git Bash.</p>

<p>{% include_code My BASHRC .bashrc %}</p>

<p>If the setup is correct, then <code>\ll</code> in $\rm \LaTeX$-Suite should
automatically trigger the $\rm \LaTeX$ compilation.  I give up on
finding ways to open a viewer with <code>\lv</code> since I can use the keyboard
to switch to a web browser to see the compiled PDF file <em>without</em>
installing another PDF viewer in my USB stick.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I’ve learnt some Perl and bash after writing this BASHRC.</p>

<ol>
  <li>A little bit of Perl
    <ul>
      <li><code>$ENV{HOMEDRIVE}</code> for extracting the environment variable
  <code>HOMEDRIVE</code>.</li>
      <li><code>/(regex_pat)/;</code> for extracting matching string to capture
  groups <code>$1</code>, <code>$2</code>…  (The <code>()</code> around <code>regex_pat</code> is
  <em>crucial</em>.)</li>
      <li><code>.</code> for string concatenation.</li>
      <li><code>lc()</code> for converting a string to lowercase.</li>
    </ul>
  </li>
  <li>Bash for loop writing: described in <a href="/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/">one of my recent posts</a>.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Awk Column Alignment]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/awk-column-alignment/"/>
    
    <updated>2016-04-09T12:48:11+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/awk-column-alignment</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I use Google’s <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a> to check if the images
on this blog are optimised.  Recently, it reported that two images in
<a href="/blog/2016/03/27/an-invalid-claim-by-the-government/"><em>An Invalid Claim by the Government</em></a> could be resized and
compressed.  I did so, and then the file size of the files were
displayed using <code>ls -lh</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/octopress/source/images/posts/W3CInvalid]$ ls -lh
total 312K
-rw-rw-r-- 1 owner owner  32K Apr  9 12:20 cedb1-300.png
-rw-rw-r-- 1 owner owner 132K Mar 27 14:32 cedb1.png
-rw-rw-r-- 1 owner owner  32K Apr  9 12:20 cedb2-300.png
-rw-rw-r-- 1 owner owner  83K Apr  9 12:20 cedb2.png
</code></pre>

<h2 id="problem">Problem</h2>

<p>To remove the first four column, one uses <code>awk</code> to do this.  (I assume
that the current working directory is the <em>same</em> as above.)</p>

<pre class="cliUB"><code>$ ls -lh | awk '{print $5 $6 $7 $8 $9}'

32KApr912:20cedb1-300.png
132KMar2714:32cedb1.png
32KApr912:20cedb2-300.png
83KApr912:20cedb2.png
</code></pre>

<p><strong>How can one properly align the columns?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Searching “awk align columns” on Google, I quickly got
<a href="http://stackoverflow.com/a/14095129">an answer posted by Mike Sherrill</a> on Stack Overflow.
However, there’s room for improvement in the visual effect of the
output.</p>

<pre class="cliUB"><code>$ ls -l | awk '{printf("%6s %s %2s %s %13s\n", $5, $6, $7, $8, $9);}'
                         
 32718 Apr  9 12:20 cedb1-300.png
135159 Mar 27 14:32     cedb1.png
 32665 Apr  9 12:20 cedb2-300.png
 84580 Apr  9 12:20     cedb2.png
</code></pre>

<p>The solution can be found in <a href="http://stackoverflow.com/a/1505360">the second search result</a> for
the Google search for “awk align columns left right”.  Added a hyphen
after <code>%</code> will suffice.  Note that the newline <code>\n</code> <em>can’t</em> be
omitted.  Otherwise, the output will be messed up.</p>

<pre class="cliUB"><code>$ ls -l | awk '{printf("%6s %s %2s %s %-s\n", $5, $6, $7, $8, $9);}'
                         
 32718 Apr  9 12:20 cedb1-300.png
135159 Mar 27 14:32 cedb1.png    
 32665 Apr  9 12:20 cedb2-300.png
 84580 Apr  9 12:20 cedb2.png    
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Loop Through an Array Having Only One Element in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/"/>
    
    <updated>2016-04-08T22:59:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>To find out a way to loop through all elements in an array consisting
of more than one element, it’s easy.</p>

<pre class="cliUB"><code>$ for f in {"hello","world"}; do echo $f; done
hello
world
</code></pre>

<h2 id="problem">Problem</h2>

<p>When I try to take away the second element in the above array so that
it becomes an array consisting in <em>one</em> single element, then I get
<code>{hello}</code> instead of <code>hello</code>.</p>

<pre class="cliUB"><code>$ for f in {"hello"}; do echo $f; done
{hello}
</code></pre>

<p><strong>How can one get back an output consistent with the case of arrays
consisting of multiple elements?</strong></p>

<!-- more -->

<h2 id="motivation">Motivation</h2>

<p>This problem seems nonsense–loops are supposed to do repetitive
tasks.  If the loop has <em>only</em> one iteration, then we can directly
type in the command, instead of adapting it into a loop and setting up
the scope of the loop.</p>

<p>Nevertheless, if one converts multiple lines of short texts into one
long single line with <code>xargs</code>, then the items will be separated by
white spaces.  This <em>won’t</em> work with the above for loop.  To change
the delimiter from white space to comma, one may use <code>paste -d, -s</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Syntax</th>
      <th style="text-align: left">Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>-d,</code></td>
      <td style="text-align: left">Use <code>,</code> as the delimiter.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code>-s</code></td>
      <td style="text-align: left"><em>Without</em> this flag, <code>$1</code> and <code>$2</code> are displayed in <em>parallel</em>.</td>
    </tr>
  </tbody>
</table>

<p>Surely, there are other tools to do this, such as <code>sed</code>.  However, I
think that <code>paste -d, -s</code> should be the <em>simplest</em> way to do this.
Note that the white space character between the two flags are
<em>important</em>.  Otherwise, this command <em>won’t</em> work.</p>

<p><em>Without</em> prior knowledge of the text to be processed, it’s possible
that the output of <code>paste -d, -s</code> consists of <em>only</em> one item.  This
single case is easy to deal with, even though the handling may be a
bit different from the case of multiple elements.  However, if the
syntax for the command that handles the output of <code>paste -d, -s</code>
<em>isn’t exactly the same</em> in the case of <em>one</em> single element and the
case of <em>multiple</em> elements, then we need to look at the content and
make manual judgement–this is tedious and error-prone.</p>

<p>In the problem posed in the previous section, if the list in the
for loop has <em>only</em> one item, then we need to do something different
from a list having two or more items.  If we observe this difference
with our naked eyes, the whole process will lack efficiency.</p>

<p>To solve this problem, we seek an <em>unified</em> approach.  In other words,
I try to change the syntax of the above for loop so that the for loop
will work for <em>any</em> one of these two cases.</p>

<h2 id="solution">Solution</h2>

<ol>
  <li>Surround each string in the array by a pair of <em>double quotes</em>.</li>
  <li>Add a comma <em>either</em> before the first element or after the last
element.</li>
</ol>

<p>The first step is needed if in the array, there exists an element
having two or more words <em>separated by a white space</em>; the second step
is needed for an array with one single element.</p>

<pre class="cliUB"><code>$ for f in {"hello world",}; do echo $f; done
hello world
</code></pre>

<h2 id="remarks">Remarks</h2>

<p>As the number of steps increases, the difficulty of constructing a
one-line command to do the thing rises tremendously.  It’s possible
that a shell script is <em>easier</em> to write.  By searching “bash array
tutorial” on Google, I got <a href="http://www.thegeekstuff.com/2010/06/bash-array-tutorial/">a tutorial on the Geek Stuff</a> in the
first search result.</p>

<p>{% include_code A shell script that display an array oneelt.sh %}</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Oneline Perl]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/04/oneline-perl/"/>
    
    <updated>2016-04-04T00:47:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/04/oneline-perl</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>Knowing some regular expressions in Vim, I hope to apply these
concepts to Perl so that I can search and replace some simple strings
directly in base <em>without</em> having to open the editor.</p>

<p>As a Vim user, the class of special characters in Perl is more
<em>natural</em> than that of <code>sed</code>.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2016/04/03/searching-git-commit-messages/">the previous post</a>, the list of Git commit messages containing
the string “HTTPS” is the main focus.  However, the alignment of this
list <em>isn’t</em> good: in the column representing the day, the data can be
either one or two digit.  Though I can still extract information with
<code>awk '{print $[col_num]}'</code>, it’s better to fix the alignment.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<!-- more -->

<h2 id="start-using-perl">Start using Perl</h2>

<p>Searching “perl intro” online, one can easily find some basic Perl
scripts.  I tried to issue some simple one-line Perl command to save
time, but I <em>couldn’t</em> easily find them.  Thanks to
<a href="http://articles.mongueurs.net/magazines/linuxmag50.html">a webpage by Philippe Bruhat</a>, I managed to starting using
Perl.  I jot them down here.</p>

<pre class="cliUB"><code>$ perl -e 'print "hello \n"'  # single quote outside
hello
$ perl -e "\$str='abc'; print \$str;"  # escape $, no EOL
abc
$ perl -e "$str='test'; print $str.'\n';"  # not desired
test\n
$ perl -e '$str="test"; print $str."\n";'  # want newlne
test
</code></pre>

<p>The <code>-e</code> flag above stands for “execute”.</p>

<h2 id="read-from-external-command">Read from external command</h2>

<p>Unluckily, I <em>didn’t</em> know how to use <code>system()</code> nor backticks to pass
output of a command into Perl.  After trying a few search keywords,
“perl oneline read command output” worked best for me.  It was quite
<em>uncommon</em> that I found the <em>eighth</em> result useful.  In the article
<a href="http://www.theperlreview.com/articles/one-liners.html"><em>Perl One-liners</em></a>, I found out the answer.</p>

<pre class="cliUB"><code>$ for (( i = 1; i &lt;= 10; i++ )); do
  echo $i
  done | perl -e 'while (&lt;&gt;) {s/(?&lt;!\d)\d{1}(?!\d)/0$&amp;/; print $_}'
01
02
03
04
05
06
07
08
09
10
</code></pre>

<p>In fact, the flag <code>-n</code> can be used to replace the <code>while (&lt;&gt;) {...}</code>
loop.  The <code>-p</code> flag has the function of <code>-n</code> but <em>also</em> prints the
output.  I learnt them from <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">Git manual web page for git-log</a>.</p>

<h2 id="solution">Solution</h2>

<p>Combine the above observations together.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s" \
  | perl -pe 's/(?&lt;=\u\l\l )\d{1}(?= )/0$&amp;/'
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 08 00:45:02 2016 +0800 A new article about Flair, Octopress and 
HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Perl: Apart from the above syntax, I’ve also learnt to use <code>$&amp;</code> and
<code>\b</code> in the replacement.  This is the Perl counterpart of <code>&amp;</code> and
<code>\&lt;</code> or <code>\&gt;</code> in Vim respectively.</li>
  <li>Git: In <code>git log</code> and <code>git show</code>,
    <ul>
      <li><code>--name-only</code>: suppress the diff hunk</li>
      <li><code>--pretty=format:</code> display nothing</li>
      <li><code>format</code> vs <code>tformat</code>: <code>t</code> stands for “terminator” (a.k.a. EOL)</li>
    </ul>

    <p>Each of each flags seems to be useless.  Nevertheless, <em>when
 combined together</em>, they help extract the edited files in a
 particular commit.</p>
  </li>
  <li>
    <p>Posting long commands in a blog entry</p>

    <p>From the two codeblocks explaining the difference between <code>format</code>
 and <code>tformat</code> in the Git manual, I understand that it’s better to
 end each line with a backslash, then continue with the command.
 In bash,  a <code>&gt;</code> is then automatically inserted at the beginning of
 each line.  This is carried from the shell to the source file of
 the blog article by copy and paste.  I used to think that it’s
 good to keep this so that this and the Ubuntu font will give a
 sense of reality to the reader.  However, this also causes
 inconvenience to those who want to try this command.  From now on,
 I <em>won’t</em> include this character anymore at the beginning of a
 long command exceeding 80 characters.  I will replace it with a
 white space instead.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<p>{% include_code Launch Portable Git Bash with proper a home folder git-bash.bat %}</p>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
