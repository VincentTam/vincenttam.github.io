<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-02T17:14:51+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<p><figure class='code'><figcaption><span>Launch Portable Git Bash with proper a home folder (git-bash.bat)</span> <a href='/downloads/code/git-bash.bat'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">rem Setup environment (replace &#39;user&#39; with your desired username)</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOMEDRIVE</span><span class="o">=</span><span class="nv">%~d0</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span>home<span class="n">/owner</span>
</span><span class='line'><span class="k">set</span> <span class="nv">USERPROFILE</span><span class="o">=</span><span class="nv">%HOME%</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem Launch the git bash</span>
</span><span class='line'>start git-bash.exe
</span></code></pre></td></tr></table></div></figure></p>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Generate $\rm \LaTeX$ Code for Octave Matrices]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices/"/>
    
    <updated>2016-01-16T15:33:39+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<ul>
  <li><a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> use <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <a href="https://mathjax.org/">MathJax</a> to
  typeset math expressions.</li>
  <li>I use <a href="https://www.gnu.org/software/octave">GNU Octave</a> to efficiently perform (matrix)
  calculations for a quick and correct response on Mathematics Stack
  Exchange.</li>
</ul>

<h2 id="problem">Problem</h2>

<p>Recently, I encountered a <a href="http://math.stackexchange.com/q/1614115/290189">linear algebra problem</a> on
Mathematics Stack Exchange.</p>

<p>For any given matrix $A$ in Octave,</p>

<pre class="cliUB"><code>A = [1 2 2; 2 3 4; 4 4 2]
A =

   1   2   2
   2   3   4
   4   4   2
</code></pre>

<p><strong>how can one generate its $\rm \LaTeX$ code</strong></p>

<p><figure class='code'><figcaption><span>$\rm \LaTeX$ code for matrix $A$ </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A = \begin{bmatrix} 1&amp;2&amp;2\ 2&amp;3&amp;4\ 4&amp;4&amp;2 \end{bmatrix}</span></code></pre></td></tr></table></div></figure></p>

<p>so that one gets</p>

<div class="myeqn">
\[
  A = \begin{bmatrix} 1&amp;2&amp;2\\ 2&amp;3&amp;4\\ 4&amp;4&amp;2 \end{bmatrix}?
\]
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I searched “octave to latex matrices” and I found <a href="http://tex.stackexchange.com/a/43733">this answer</a>
quite useful.  I issued the first command to see the result.</p>

<pre class="cliUB"><code>strrep(strrep(mat2str(A),",","&amp;"),";","\\\\\n")(2:end-1)
ans = 1 2 2\\
2 3 4\\
4 4 2
</code></pre>

<p>I suspected that it <em>didn’t</em> work.  I posted it as a comment and
verified that I was right.  To fix this, I extracted the function
<code>mat2str(A)</code> in the middle of this command to see the results.  From
its result (<code>ans = [1 2 2;2 3 4;4 4 2]</code>), I realised that <code>strrep</code>
standed for “string replace”.  Then, I changed the double-quoted comma
in the second argument of function <code>strrep</code> to a double-quoted
whitespace character, and got the anticipated result.</p>

<pre class="cliUB"><code>strcat("\\begin{bmatrix}\n",strrep(strrep(mat2str(A)," ","&amp;"), ...
";","\\\\\n")(2:end-1),"\n\\end{bmatrix}\n")
ans = \begin{bmatrix}
1&amp;2&amp;2\\
2&amp;3&amp;4\\
4&amp;4&amp;2
\end{bmatrix}
</code></pre>

<h2 id="inadequacies">Inadequacies</h2>

<p>I <em>don’t</em> know how to do this for matrices with fractions.  I think I
can work it out by searching and testing in several hours, but I
<em>don’t</em> have the time to do so.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="math">Math</h3>

<p>I revised some definitions in linear algebra.</p>

<ul>
  <li>A matrix $U$ is <strong>unitary</strong> iff $UU^\star = U^\star U = I$.</li>
  <li>A matrix $N$ is <strong>normal</strong> iff $NN^\star = N^\star N$.</li>
</ul>

<h3 id="gnu-octave">GNU Octave</h3>

<ul>
  <li>The function <code>strrep(str,"foo","bar")</code> replaces all instances of
  <code>foo</code> in <code>str</code> with <code>bar</code>.  It can be used in a nested manner for
  multiple replacements.</li>
  <li>The function <code>strcat(str1,str2,...)</code> concatenates the strings
  inside.</li>
</ul>

<h3 id="grep">Grep</h3>

<p>When I was writing this article, I wanted to search for “<a href="https://www.gnu.org/software/octave">octave</a>”
(with the square brackets “[]”) with <code>grep</code> inside <a href="http://www.vim.org/">Vim</a>, but I got
over 1270 results.  I tried adding single/double quotes and escaping
the square brackets with a backslash, but I faied again.  Finally, I
googled “grep escape character” for a solution.  Since then, I know
that I should <a href="http://stackoverflow.com/a/12387802/3184351">add the <code>-F</code> flag to <code>grep</code></a> to fix the
string.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Ubuntu Grey Screen]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen/"/>
    
    <updated>2016-01-02T14:05:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen</id>
    
      <content type="html"><![CDATA[<p>A few days ago, I was browsing questions on
<a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> on <a href="http://www.ubuntu.com/desktop">Ubuntu</a> 14.04 <abbr title="long-term support">LTS</abbr>.  I opened
lots of tabs in <a href="https://www.chromium.org">Google Chromium</a>.  Suddenly, the screen
went grey.  I <em>don’t</em> know the cause.  I <em>hadn’t</em> seen such problem
before.  I waited for about one minute, and I switched to the terminal
<code>tty3</code>.  The grey screen became black <em>without any text</em>.  I pressed
<code>&lt;Ctrl&gt;-&lt;Alt&gt;-&lt;F7&gt;</code>, then the monitor showed the grey screen again.</p>

<p>I looked at the light (not the power button) in the desktop.  I
thought it represented the hard disk activity.  Its blinking was
normal.  As a result, I <em>guessed</em> the problem was related to the
display.  I <em>pretended</em> I could normally see things, and I <em>imagined</em>
the picture.  I logged on <code>tty3</code> without logging off <code>tty7</code>.  Then I
typed <code>sudo reboot</code> and supplied the password.  Within several
seconds, I heard a <em>beep</em> sound and the system rebooted.</p>

<p>Certainly, all unsaved works on <code>tty7</code> had been <em>lost</em>.  Therefore, it
was very important to save your work.  As I’m no longer an IT worker,
I <em>won’t</em> try to find a solution after reading a few related posts
which I have difficulty to understand.  Within six months, a new <abbr title="long-term support">LTS</abbr>
version of Ubuntu will be launched.  The price of a <abbr title="solid-state drive">SSD</abbr> will drop, so
perhaps I will clean install Ubuntu on a <abbr title="solid-state drive">SSD</abbr>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rare Sed Delimiters]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters/"/>
    
    <updated>2015-08-25T10:47:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/25/rare-sed-delimiters</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>One can replace the usual delimiter <code>/</code> in <code>sed</code> with the other ones.
Therefore, the slashes in the <abbr title="Uniform Resource Locator">URL</abbr> inside the search pattern <em>won’t</em>
have to be escaped by backslashes, which makes the whole command ugly.</p>

<h2 id="problem">Problem</h2>

<p>If the search pattern contains multiple characters like <code>;</code>, <code>#</code>, <code>|</code>,
<code> </code> (white space), etc, and you’re <em>too lazy</em> to look for
<a href="http://backreference.org/2010/02/20/using-different-delimiters-in-sed/">other choices of delimiters</a>, what can you do?</p>

<!-- more -->

<h2 id="discussion-on-the-custom-delimiter">Discussion on the custom delimiter</h2>

<p>When I read article at the above link, I was stuck at the last part,
which was about using a custom delimiter.  I <em>mistakenly</em> thought that
this was for the search pattern and the replacement.  In fact, reading
<a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">GNU’s manual</a> and trying some commands repeatedly, I realized
that prepending the custom delimiter with a backslash was for
specifying the range of the following expresion.</p>

<p>Therefore, I finally understand what <code>somevar</code> is in
<a href="http://stackoverflow.com/a/20808364">this Stack Overflow question</a>.</p>

<h2 id="solution">Solution</h2>

<h3 id="customizing-the-delimiter-in-a-replacement">Customizing the delimiter in a replacement</h3>

<p>To begin with, I tried the following command.</p>

<pre class="cliUB"><code>$ echo strange | sed s/'[a-e]'/#/g
str#ng#
</code></pre>

<p>After that, I know that surrounding the whole <code>s</code> command <em>isn’t</em> a
must, just the <code>regex</code> and <code>replacement</code> will do.</p>

<p>Then I replaced all <code>/</code> with <code>y</code> in the above command.</p>

<pre class="cliUB"><code>$ echo strange | sed sy'[a-e]'y#yg
str#ng#
</code></pre>

<p>Now, it’s clear that the custom delimiter in the <code>s</code> command <em>doesn’t</em>
need to be escaped.</p>

<h3 id="towards-the-goal">Towards the goal</h3>

<p>The goal in this post is to use bizarre characters as the delimiter in
the <code>s</code> command, and I believe that if you’ve reached here, you’ll
probably understand what <a href="https://stackoverflow.com/a/4844945">this command</a> is doing, provided
that you know the way to
<a href="https://stackoverflow.com/a/10571642">input control characters as arguments in bash commands</a>.</p>

<h2 id="more-examples">More examples</h2>

<p>I’ve just tried to delete a <code>&lt;script&gt;</code> tag in the <code>master</code> branch of a
repository for <a href="https://vincenttam.github.io/SampleWebPage/ex0.html">my sample W3CSS page</a> using the in-place
editing option of <code>sed</code>.  Before making <em>real</em> changes to the file, I
tested my command syntax with the standard output first.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/gh-pages
  remotes/origin/master
[owner@localhost ~/SampleWebPage]$ sed -nr '\#&lt;scr#,#&lt;/scr#p' ex0.html
sed: -e expression #1, char 9: unexpected `,'
</code></pre>

<p>Looking at <a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html#Addresses">the manual</a> <em>again</em>, I thought that <code>\%regex%</code>
represented <em>one</em> address only.  The pattern after the comma was
<em>another</em> address, so I should have used <em>two</em> backslashes in the last
command.</p>

<pre class="cliUB"><code>[owner@localhost ~/SampleWebPage]$ sed -ir '\#&lt;scr#,\#&lt;/scr#' ex0.html
</code></pre>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Find Files for Vim to Edit in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash/"/>
    
    <updated>2015-08-23T23:48:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/23/find-files-for-vim-to-edit-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Since copying and pasting the output of a command can be a tedious
job.  For example, if you want to create your blog using a framework,
you may first logon to your <a href="https://github.com">GitHub</a> account and create an <em>empty</em>
repository there, then <code>git clone</code> <a href="http://octopress.org">Octopress</a>/<a href="http://jekyllbootstrap.com">Jekyll-Bootstrap</a> from
GitHub, reset the <code>origin</code> <abbr title="Uniform Resource Locator">URL</abbr>, and input the new <abbr title="Uniform Resource Locator">URL</abbr> based on the old
one.</p>

<p>After having created a repository online, you will see the <abbr title="Uniform Resource Locator">URL</abbr> of the
repository using the <abbr title="Secure SHell">SSH</abbr> protocol.  If one <em>doesn’t</em> want to repeat
the start of the <abbr title="Uniform Resource Locator">URL</abbr> <code>git@github.com:</code>, one may use the bash commands
introduced in <a href="/blog/2015/08/22/used-more-bash-utilities/">the previous post</a> to extract its useful parts for
the <code>sed</code> substitution.</p>

<pre class="cliUB"><code>$ git remote -v
octopress	git@github.com:imathis/octopress.git (fetch)
octopress	git@github.com:imathis/octopress.git (push)
origin	git@github.com:VincentTam/vincenttam.github.io.git (fetch)
origin	git@github.com:VincentTam/vincenttam.github.io.git (push)
$ name=userName; repo=repoName
$ git remote -v | sed -n '3{p;q}' | awk '{print $2}' | sed -r \
"s;(\w*)/(.*).git;$name/$repo.git;"
$ unset name repo
</code></pre>

<h2 id="problem">Problem</h2>

<p>I tried extracting a list of Markdown files containing a particular
word and passing them to <a href="http://www.vim.org">Vim</a> as arguments using <code>find</code>, <code>grep</code> and
<code>xargs</code>.  Unluckily, I got an error.</p>

<pre class="cliUB"><code>$ find source/_posts/ -name "*.markdown" -exec grep -q ^tag {} \; \
&gt; -print | xargs vi
Vim: Warning: Input is not from a terminal
3 files to edit
$ 
</code></pre>

<p>Note: <em>Without</em> the <code>-print</code> flag, the above command <em>won’t</em> work.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>As a result, I searched “vim warning input is not from a terminal
xargs” on Google, and found <a href="http://superuser.com/q/336016">this question</a> very useful.  I
should have wrapped the <code>find</code> command like <code>$(find ...)</code>.</p>

<pre class="cliUB"><code>$ vi $(find source/_posts/ -name "*.markdown" -exec \
&gt; grep -q ^tag {} \; -print | xargs)
3 files to edit
</code></pre>

<h2 id="facts-learnt">Facts learnt</h2>

<h3 id="sed">sed</h3>
<ul>
  <li><code>3{p;q}</code>: quit after printing the third line for the sake of
  efficiency</li>
  <li><code>-r</code>: use extended regular expression to save the trouble of
  escaping <code>()</code> for submatches.</li>
  <li><code>-n</code>: suppress standard output.</li>
  <li>Enclose the expression
    <ul>
      <li>with <em>single</em> quotes to <em>disable</em> interpretation of bash
  variables</li>
      <li>with <em>double</em> quotes to <em>enable</em> interpretation of bash
  variables.</li>
    </ul>
  </li>
  <li>One can replace the delimiter <code>/</code> in the expression
  <code>s/{pat}/{repl}/</code> by any one character from <code>_;#| </code>.</li>
  <li>Specify a custom delimiter like <code>\%.%s%foo%bar%</code>.  (The
  variable/range <code>.</code> is <em>needed</em>.)</li>
</ul>

<h3 id="bash">bash</h3>

<ul>
  <li>Set variables using <code>var1=value1;var2=value2;...</code></li>
  <li>Unset variable usign <code>unset var1 var2 ...</code></li>
</ul>

]]></content>
    
  </entry>
  
</feed>
