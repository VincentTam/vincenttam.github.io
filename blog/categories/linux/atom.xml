<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2017-01-11T15:55:37+00:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Ubuntu on Windows 10 Custom Display]]></title>
      <link href="https://vincenttam.github.io/blog/2017/01/11/ubuntu-on-windows-10-custom-display/"/>
    
    <updated>2017-01-11T14:29:23+00:00</updated>
    <id>https://vincenttam.github.io/blog/2017/01/11/ubuntu-on-windows-10-custom-display</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p><em>Same</em> as some of my recent posts: get <code>jekyll serve</code> working to watch
for changes during a preview of <a href="/blog2">my Jekyll-bootstrap blog</a>.</p>

<p>Since I found the <a href="/blog/2017/01/10/octopress-config-for-ruby-2-dot-3-on-windows-10/">Ruby gems setup</a> too <em>difficult</em>, I switched to
<a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">Ubuntu on Windows 10</a> after reading <a href="https://gorails.com/setup/windows/10">a Ruby setup guide</a>.</p>

<h2 id="problem">Problem</h2>

<p>The default display settings <em>didn’t</em> look great, so I installed
<a href="http://font.ubuntu.com/">Ubuntu Mono font</a>.  Unluckily, one <em>can’t</em> type Chinese
characters, and the bottom line of <a href="https://tmux.github.io/">tmux</a> keeps jumping up from time
to time.  Most importantly, the copy and paste function <em>isn’t</em>
convenient to use: every time I need to paste something, I have to
move the mouse to the top of the window, then right click and select
“Modify” → “Paste”.  That’s too slow when compared to <code>&lt;S-Ins&gt;</code> in
<a href="https://mintty.github.io/">mintty</a> which is shipped with <a href="https://git-for-windows.github.io/">Git for Windows</a>.</p>

<p>However, on <abbr title="Windows Linux Subsystem">WLS</abbr>, aptitude takes good care of package dependencies.
That’s <em>much better</em> for installing necessary stuff for blogging with
frameworks like <a href="https://jekyllrb.com/">Jekyll</a>.</p>

<p><strong>How can I run <abbr title="Windows Linux Subsystem">WLS</abbr> using a mintty shell?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Use <a href="https://github.com/goreliu/wsl-terminal">wsl-terminal</a>.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>Firstly, I’ve revised the use of <code>chown</code>, <code>chgrp</code> and <code>chmod</code>, and
learnt the function of <code>umask</code>.</p>

<ul>
  <li><code>u</code>, <code>g</code>, <code>o</code> stand for “user”, “group” and “others” respectively.</li>
  <li>The rights to <code>r</code>, <code>w</code>, <code>x</code> can be <code>+</code> or <code>-</code>.</li>
  <li>Put them together: <code>chmod og-w [target-dir]</code>.</li>
</ul>

<p>Unfortunately, the Windows 10 bash creates folders and files with
permissions 777 and 666 respectively.  The comments for
<a href="https://github.com/Microsoft/BashOnWindows/issues/352">Microsoft/BashOnWindows#352</a> solved this problem: instead of
putting <code>umask 022</code> in <code>/etc/profile</code> or <code>~/.profile</code>, it should be
added in <code>~/.bashrc</code> because the login mechanism on <abbr title="Windows Linux Subsystem">WLS</abbr> is <em>different</em>
from a usual GNU/Linux OS.  I think the profiles <em>aren’t</em> process
during <abbr title="Windows Linux Subsystem">WLS</abbr> startup after having added a simple statement for echoing a
few words in <code>~/.profile</code>.  Lilred’s method is even better.</p>

<p><code>sh Added this to your '~/.bashrc' https://git.io/vM0xz source
# Note: Bash on Windows does not currently apply umask properly.
if [ "$(umask)" = "0000" ]; then
    umask 022
fi
</code></p>

<p>Secondly, I’ve learnt the meaning of <code>eval</code>.</p>

<pre class="cliUB"><code>user@OWNER-PC:~$ ssh-agent
SSH_AUTH_SOCK=/tmp/ssh-xiwtTnVlI90S/agent.6636; export SSH_AUTH_SOCK;
SSH_AGENT_PID=5764; export SSH_AGENT_PID;
echo Agent pid 5764;
user@OWNER-PC:~$ ssh-add
Could not open a connection to your authentication agent.
</code></pre>

<p>From <a href="http://stackoverflow.com/a/17848593/3184351">user456814’s answer</a> on a Stack Overflow question
about SSH authentication agent, we can see that <code>ssh-agent</code> returns
the commands to be copied, pasted and ran in the terminal.  The
command <code>eval</code> saves these steps by taking the output as the command
input.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (5)]]></title>
      <link href="https://vincenttam.github.io/blog/2017/01/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-5/"/>
    
    <updated>2017-01-10T21:52:52+00:00</updated>
    <id>https://vincenttam.github.io/blog/2017/01/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-5</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In the <a href="/blog/2016/12/12/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4/">previous post in this series</a>, I included three <a href="http://www.vim.org">Vim</a>
editor commands.</p>

<h2 id="problem">Problem</h2>

<p>As I’ve already typed hundreds of lines of source code, I feel tired
and I often <em>make mistakes</em> while typing those commands despite these
two command mode mappings in my <code>~/.vimrc</code>.</p>

<p><figure class='code'><figcaption><span>More efficient recall from Vim command history</span><a href='http://bit.ly/2idDlxa'>Gist </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>“ Practical Vim Tip <span class="m">34</span>: Avoid cursors when rcl’<span class="k">g</span> cmd from <span class="k">hist</span>
</span><span class='line'>cnoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">p</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">up</span><span class="p">&gt;</span>
</span><span class='line'>cnoremap <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">n</span><span class="p">&gt;</span> <span class="p">&lt;</span>down<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></down></c-n></up></c-p></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>Convert these three commands into a shell script.  Since I’m using
<a href="http://www.vim.org/scripts/script.php?script_id=1984">FuzzyFinder</a>, I assume that the current working directory
(as shown by <code>:pwd</code>) is the root of the local repository for the
[Octopress] blog.</p>

<p><figure class='code'><figcaption><span>Script for Octopress editing within Vim  (quik-prv.sh)</span> <a href='/downloads/code/quik-prv.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>sed <span class="s1">&#39;1,8d&#39;</span> <span class="nv">$1</span> <span class="p">|</span> kramdown &gt; temp.html~
</span><span class='line'>cat <span class="o">{</span>temp,script<span class="o">}</span>.html~ &gt; tempmj.html~
</span></code></pre></td></tr></table></div></figure></p>

<ol>
  <li>The YAML header is chopped off since I just want to verify the
[kramdown] syntax.</li>
  <li>I appended <code>~</code> after the file extension names <code>.html</code> since I had
added <code>*~</code> in my <code>.gitignore</code> and I <em>didn’t</em> want these files
(including this shell script) to be tracked by Git.</li>
  <li>I created a symbolic link on Windows 10 with <code>mklink</code> in <code>cmd</code>.
(ran as admin)  Other options are more <em>complicated</em>:
    - Graphical programs: more disk space is consumed for programs
        rarely used which have command line alternatives.
    - Windows Power Shell: this method <em>won’t</em> work for Home
        edition.  (That’s my case.)  I’m quite satisfied by the
        current edition and I <em>don’t</em> see any reason to spend
        a thousand dollar and a whole day to have it changed to Pro
        version for functionalities that are too advanced for me.</li>
</ol>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>While I was writing this post, I used</p>

<pre><code>grep -e "\[kramdown\]" %:h/*.markdown
</code></pre>

<p>in the current buffer in order to quickly retrieve the links to
websites to which I had previously referred.  To escape the square
brackets and the search pattern, the flag <code>-e</code> is added in between the
utility name and the pattern string.  I tried using marks, but I had
forgotten the difference between a mark named with a small letter and
a capital letter.</p>

<table>
  <thead>
    <tr>
      <th>Mark</th>
      <th>Range</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>small</td>
      <td>local</td>
    </tr>
    <tr>
      <td>capital</td>
      <td>global</td>
    </tr>
  </tbody>
</table>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Website Preview in Mobile Devices]]></title>
      <link href="https://vincenttam.github.io/blog/2016/08/21/website-preview-in-mobile-devices/"/>
    
    <updated>2016-08-21T11:30:57+01:00</updated>
    <id>https://vincenttam.github.io/blog/2016/08/21/website-preview-in-mobile-devices</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>To know the page layout of a website, notably my blogs, on mobile
devices before publishing it.</p>

<p><img src="/images/posts/SitePreviewMobile/Screenshot-2016-08-21-19-36-14.png" alt="Preview this blog on a smartphone" /></p>

<h2 id="problem">Problem</h2>

<p>I used <code>ifconfig</code> to check the IP address of my desktop where the
preview site was hosted.  It’s <code>192.168.1.5</code>.  When I typed in this
address followed by a colon and the port number <code>4000</code>, then the
browser said “connection timeout” after loading for a while.</p>

<p><img src="/images/posts/SitePreviewMobile/Screenshot-2016-08-21-19-35-00.png" alt="Connection timeout" /></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I spent a day to identify the cause of the problem.</p>

<h3 id="host-name-incorrect">Host name incorrect</h3>

<p>Actually, the website should be hosted at the internal IP address
shown by <code>ifconfig</code> instead of <code>localhost</code>.  Since I switch off the
router before going to bed every day, the internal IP address for my
desktop changes daily.  Therefore, one uses <code>0.0.0.0</code> to host the site
on <em>all</em> IP addresses that the machine possesses.</p>

<p>In <a href="https://github.com/plusjade/jekyll-bootstrap">Jekyll-Bootstrap</a>, one may simply add <code>host : 0.0.0.0</code> in
<code>_config.yml</code>; in <a href="http://octopress.org/">Octopress</a>, one may find the line containing
<code>server_port</code> in the middle of <code>Rakefile</code> and add <code>--host
#{listen_host}</code>.<sup id="fnref:myeg"><a href="#fn:myeg" class="footnote">1</a></sup></p>

<p>``` ruby Changes in Rakefile http://www.jmlog.com/octopress-preview-config-in-vagrant/
server_port     = “4000”      # port for preview server eg. localhost:4000
listen_host     = “0.0.0.0”   # bind to all available IPs</p>

<h1 id="rackuppid--processspawnrackup---port-serverport">rackupPid = Process.spawn(“rackup –port #{server_port}”)</h1>
<p>rackupPid = Process.spawn(“rackup –port #{server_port} –host #{listen_host}”)
```</p>

<h3 id="port-blocked-by-firewall">Port blocked by firewall</h3>

<p>On Ubuntu, I used <abbr title="Uncomplicated Firewall">UFW</abbr> to open the port <code>4000</code> to all devices at home.
(The netmask of my home router has 24 bits, which is the usual
setting.)</p>

<pre class="cliUB"><code>sudo ufw allow from 192.168.1.0/24 to any port 4000:4001 proto tcp
</code></pre>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://help.ubuntu.com/community/UFW#Allow_and_Deny_.28specific_rules.29"><abbr title="Uncomplicated Firewall">UFW</abbr> – Ubuntu Community Help</a>: the syntax for allowing and
denying specific machines.</li>
  <li><a href="http://www.jmlog.com/octopress-preview-config-in-vagrant/"><em>Vagrant 下的 Octopress 預覽設置</em></a>: A sample <code>Rakefile</code>
which allows the specification of the host address.</li>
  <li>鳥哥的 Linux 私房菜 – <a href="http://linux.vbird.org/linux_server/0110network_basic.php">基礎網路概念</a>: A detailed explanation
for some fundamental concepts like IP address, netmask and subnet.
I understand what <code>/24</code> in <code>192.168.1.0/24</code> means after reading
this chapter of the guide.</li>
  <li>An Ask Ubuntu question on specifying a
<a href="http://askubuntu.com/q/7099">range of ports in <abbr title="Uncomplicated Firewall">UFW</abbr></a></li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:myeg">

      <p>View my working examples:</p>

      <ul>
        <li><a href="/">Blog 1</a>: at commit <a href="https://github.com/VincentTam/vincenttam.github.io/commit/bfa1e9e">bfa1e9e</a></li>
        <li><a href="/blog2">Blog 2</a>: at commit <a href="https://github.com/VincentTam/blog2/commit/d4ec6a6">d4ec6a6</a></li>
      </ul>
      <p><a href="#fnref:myeg" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Restore Corrupt Git Repository]]></title>
      <link href="https://vincenttam.github.io/blog/2016/08/17/restore-corrupt-git-repository/"/>
    
    <updated>2016-08-17T04:16:33+01:00</updated>
    <id>https://vincenttam.github.io/blog/2016/08/17/restore-corrupt-git-repository</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I <em>hadn’t</em> used <a href="http://www.vim.org">Vim</a> on my GNU/Linux desktop for a month.  When I
used it again, an error message was shown on the screen.</p>

<pre class="cliUB"><code>[owner@localhost ~]$ vi
Error detected while processing
/home/owner/.vim/bundle/nerdtree/plugin/NERD_tree.vim:
line  153:
E117: Unknown function: nerdtree#ui_glue#setupCommands
Error detected while processing function nerdtree#postSourceActions:
line    2:
E117: Unknown function: nerdtree#ui_glue#createDefaultBindings
Press ENTER or type command to continue
</code></pre>

<p>Since I was occupied with <a href="/blog2">another blog</a>, thinking that the
problem would be quickly fixed by an update of
<a href="https://github.com/scrooloose/nerdtree/">the NERD tree</a>, a <a href="http://www.vim.org">Vim</a> plugin for showing a file tree in a
sidebar, I <em>didn’t</em> want to find out the cause.</p>

<h2 id="problem">Problem</h2>

<p>During this <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> update, an exclamation mark with red background
was displayed on the LHS of the item <code>Plugin 'scrooloose/nerdtree'</code> in
the list contained in the status bar.  I then checked Vundle’s update
log.</p>

<pre class="cliUB"><code>[2016-08-12 15:18:40] Plugin scrooloose/nerdtree
[2016-08-12 15:18:40] $ cd '/home/owner/.vim/bundle/nerdtree' &amp;&amp; git pull &amp;&amp; git submodule update --init --recursive
[2016-08-12 15:18:40] &gt; error: object file .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d is empty
[2016-08-12 15:18:40] &gt; error: object file .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d is empty
[2016-08-12 15:18:40] &gt; fatal: loose object 2e2b649232d6ae4d02d74793e5da0ee08480ad8d (stored in .git/objects/2e/2b649232d6ae4d02d74793e5da0ee08480ad8d) is corrupt
[2016-08-12 15:18:40] &gt; fatal: The remote end hung up unexpectedly
[2016-08-12 15:18:40] &gt; 
</code></pre>

<p>While I was trying to update this plugin manually by typing in
<a href="/blog/2014/06/16/my-git-command-list-1/">Git commands</a> in bash, the electricity supply of my desktop went
off suddenly.  After it had been switched on again, I tried typing in
the commands again, and I got the same error.</p>

<p><strong>How can the Git repository be restored to its previous state</strong>, so
that it’s intact?</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>This problem can be fixed by simply undoing all changes done to the
directory <code>.git/</code>.  First, a list of recently changed files is needed,
and <code>find</code> can be used for this purpose.  I searched “ls filter by
time”, then this <a href="http://unix.stackexchange.com/a/10043">question about <code>ls</code></a> on Unix &amp; Linux
Stack Exchange appeared in the search results.  After reading the
first answer, I tried to find the defective binary objects in
<code>.git/objects</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ find . -maxdepth 1 -mindepth 1 \
&gt; -mtime -1 -type d -print -and -exec ls -lt {} \;
./2e
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:18 2b649232d6ae4d02d74793e5da0ee08480ad8d
-r--r--r-- 1 owner owner 256 May 12 20:38 c9b3dd9d6b8d11f2a3c12924f88588a846517d
./7e
total 44

-r--r--r-- 1 owner owner  341 May 12 20:38 8be22b1d5052e9140fc7c7b840755980cb960
9
-r--r--r-- 1 owner owner   49 May 12 20:38 9492c9f3b3b463114c0b6308a8ccd46ce3869
2
-r--r--r-- 1 owner owner 3029 Nov  1  2014 12c042bb8f5ab387a2bd0aabcfe30fce25027
f
./a0
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 019ff4d6b033f37efd9b1a99daf6c9797796b1
-r--r--r-- 1 owner owner 468 May 12 20:38 b89b83d8cd02f8043840a48b0b2cf3724bee1c
./29
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 24ab207162ca18cf5844d00b351ade1b5122f6
-r--r--r-- 1 owner owner 342 May 12 20:38 0935cab8f1e7dec23bb3bda0e2f7dd84c867d9
./38
total 20
-r--r--r-- 1 owner owner  0 Aug 12 15:43 d79fd1123213f2ceb3d6c32e8dad42bd587ec8
-r--r--r-- 1 owner owner 55 May 15  2015 569aab72ab0cbf466c40658ab9a3d86b55263e
./d7
total 8
-r--r--r-- 1 owner owner 0 Aug 12 15:43 9f81cd6e309fa01e063f3e12fb7615e712d7f4
./2a
total 36
-r--r--r-- 1 owner owner    0 Aug 12 15:43 a3bece220f147f85172fe43430d069276d835
c
-r--r--r-- 1 owner owner 7025 Jun 24  2015 f07ddbaf243cef8de791b45e7ff4232025a93
6
-r--r--r-- 1 owner owner  277 May 15  2015 a1964c1ba8fd40f3fdebf64efd0ba3756115a
f
./b7
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 23fee57c918ba3fd06057398e0a905fde7b80e
-r--r--r-- 1 owner owner 277 May 15  2015 2300417059ab5c52ac26c318e6b67bcefbe1e2
./c9
total 20
-r--r--r-- 1 owner owner  0 Aug 12 15:43 9312442b0961241eb0de3d6d65893c52f4d9d1
-r--r--r-- 1 owner owner 49 May 15  2015 ab6021b2473c60ba443c5ad197f2e3e3692895
./e8
total 20
-r--r--r-- 1 owner owner   0 Aug 12 15:43 7e67fafb0d6c63b790b37ab46f67cf0654ea22
-r--r--r-- 1 owner owner 466 May 15  2015 258b21d3a02dfcc0c5c10f3ab186763ae0c38b
./4c
total 36
-r--r--r-- 1 owner owner    0 Aug 12 15:43 bfb3869eb16ca691d93e1a3a05d375e87c1c7
7
-r--r--r-- 1 owner owner   57 May 15  2015 be8a2baee075d0935e3af349d85c2553d77bf
8
-r--r--r-- 1 owner owner 6830 Nov  1  2014 df1a366dbdf08c5f7412ff867d859d6818376
4
</code></pre>

<p>Objects are grouped according to the first two digits of their <a href="https://git-scm.com/">Git</a>
hash.  The following list is easier to read.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git/objects]$ find . -mindepth 2 \
&gt; -maxdepth 2 -mtime 0 -type f -exec file {} \;
./2e/2b649232d6ae4d02d74793e5da0ee08480ad8d: empty 
./7e/e42eb25e86a6825cdba370f20d2e146ed61ae6: empty 
./a0/019ff4d6b033f37efd9b1a99daf6c9797796b1: empty 
./29/24ab207162ca18cf5844d00b351ade1b5122f6: empty 
./38/d79fd1123213f2ceb3d6c32e8dad42bd587ec8: empty 
./d7/9f81cd6e309fa01e063f3e12fb7615e712d7f4: empty 
./2a/a3bece220f147f85172fe43430d069276d835c: empty 
./b7/23fee57c918ba3fd06057398e0a905fde7b80e: empty 
./c9/9312442b0961241eb0de3d6d65893c52f4d9d1: empty 
./e8/7e67fafb0d6c63b790b37ab46f67cf0654ea22: empty 
./4c/bfb3869eb16ca691d93e1a3a05d375e87c1c77: empty 
</code></pre>

<p>I <em>removed</em> these files and typed <code>git status</code>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree]$ git status
fatal: bad object HEAD
</code></pre>

<p>I googled “invalid sha1 pointer in cache-tree”, and read a webpage a
Stack Overflow <a href="http://stackoverflow.com/q/11706215">post on empty Git objects</a>.  The command
<code>git fsck --full</code> can be used to check the integrity of a <a href="https://git-scm.com/">Git</a>
repository.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (3525/3525), done.
error: HEAD: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5da0ee08480ad8d
error: refs/heads/master: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5da0ee08
480ad8d
error: refs/remotes/origin/HEAD: invalid sha1 pointer 2e2b649232d6ae4d02d74793e5
da0ee08480ad8d
error: refs/remotes/origin/master: invalid sha1 pointer 2e2b649232d6ae4d02d74793
e5da0ee08480ad8d
error: HEAD: invalid reflog entry 2e2b649232d6ae4d02d74793e5da0ee08480ad8d
error: refs/heads/master: invalid reflog entry 2e2b649232d6ae4d02d74793e5da0ee08
480ad8d
error: refs/remotes/origin/master: invalid reflog entry 2e2b649232d6ae4d02d74793
e5da0ee08480ad8d
error: d79f81cd6e309fa01e063f3e12fb7615e712d7f4: invalid sha1 pointer in cache-t
ree
missing blob 2aa3bece220f147f85172fe43430d069276d835c
</code></pre>

<p>The above message inspired me to make the following list of files
changed due to this failed <a href="https://git-scm.com/">Git</a> pull.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree/.git]$ find . -mtime 0 -type f -print
./refs/heads/master
./refs/remotes/origin/master
./FETCH_HEAD
./logs/HEAD
./logs/refs/heads/master
./logs/refs/remotes/origin/master
./ORIG_HEAD
./index
</code></pre>

<p>I looked at the relevant files in the folder <code>logs/refs/</code>.  The change
time in Unix timestamp, the old and new commit IDs were found.
I restored these files (including the logs) with the help of these
logs <em>except</em> <code>FETCH_HEAD</code> and <code>index</code>.</p>

<p>At this stage, <code>git status</code> would still throw out an error if it was
invoked.  However, since the references to <code>HEAD</code> and <code>ORIG_HEAD</code> had
been manually set, <code>git reset --hard HEAD</code> could restore the <a href="https://git-scm.com/">Git</a>
repository.</p>

<h2 id="result">Result</h2>

<p>Finally, I could update <a href="https://github.com/scrooloose/nerdtree/">the NERD Tree</a>.</p>

<pre class="cliUB"><code>[owner@localhost ~/.vim/bundle/nerdtree]$ git pull
remote: Counting objects: 11, done.
remote: Total 11 (delta 3), reused 3 (delta 3), pack-reused 8
Unpacking objects: 100% (11/11), done.
From https://github.com/scrooloose/nerdtree
   d280b15..2e2b649  master     -&gt; origin/master
Updating d280b15..2e2b649
Fast-forward
 autoload/nerdtree/ui_glue.vim | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="find">find</h3>

<ul>
  <li>Control the depth of the search with <code>-maxdepth</code> and <code>-mindepth</code>.</li>
  <li>Search files by time.  (To be put <em>before</em> <code>-type</code>)
    <ul>
      <li><code>-mtime [n]</code>: last modified time equal to <code>n</code> <del>day(s)</del>
  <code>*24</code> hours.  (rounded down to an integer)
        <ul>
          <li><code>-mtime +[n]</code>: modified <em>before</em> <code>n</code> <del>day(s)</del> <code>*24</code>
  hours.</li>
          <li><code>-mtime -[n]</code>: modified <em>within</em> the last <code>n</code>
  <del>day(s)</del> <code>*24</code> hours.</li>
          <li><code>-mmin [n]</code>: modified time calculated in number of <em>minutes</em>
  instead of days.</li>
        </ul>
      </li>
      <li><code>-atime [n]</code>, <code>-amin [n]</code>: last access time</li>
      <li><code>-ctime [n]</code>, <code>-cmin [n]</code>: last change of file status</li>
      <li><code>-anewer</code>, <code>-cnewer</code>, <code>-newer</code>: followed by filename (<code>-mnewer</code>
  <em>doesn’t</em> exist.)</li>
      <li><code>-daystart</code>: use the start of day for calculations.  (Preceed
  <code>-mtime</code>)</li>
    </ul>
  </li>
</ul>

<h3 id="ls">ls</h3>

<p>Use <code>-t</code> flag to sort files using their last modified time in
descending order.</p>

<h3 id="git">Git</h3>

<p>One can find files from a Git SHA1 hash using <code>git ls-tree -r &lt;hash&gt;</code>.
To search contents in commits, you may refer to a
<a href="http://stackoverflow.com/q/460331">question about Git</a> on Stack Overflow.</p>

<p>When I wrote my <a href="/blog/2015/08/06/my-git-command-list-3/">list of low-level commands</a> last year, I
<em>couldn’t</em> understand the role of <code>index</code>.  Now, I know that the
binary objects stored in <code>objets/</code> and the references can work
<em>independently</em> of <code>index</code>, which can be re-created by <code>git
write-tree</code>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[I-Search and Reverse I-Search]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/09/i-search-and-reverse-i-search/"/>
    
    <updated>2016-04-09T13:42:54+01:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/09/i-search-and-reverse-i-search</id>
    
      <content type="html"><![CDATA[<p>One knows that long commands can be retrieved by <code>&lt;C-r&gt;</code>.  If the
search <em>fails</em>, one may cancel it by <code>&lt;C-g&gt;</code>.  However, how can one
search forward through the command history instead of backword?</p>

<p>The answer is simple: add <code>stty -ixon</code> to your BASHRC.</p>
]]></content>
    
  </entry>
  
</feed>
