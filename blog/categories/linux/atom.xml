<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-04-09T11:59:06+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Loop Through an Array Having Only One Element in Bash]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash/"/>
    
    <updated>2016-04-08T22:59:29+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/08/loop-through-an-array-having-only-one-element-in-bash</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>To find out a way to loop through all elements in an array consisting
of more than one element, it’s easy.</p>

<pre class="cliUB"><code>$ for f in {"hello","world"}; do echo $f; done
hello
world
</code></pre>

<h2 id="problem">Problem</h2>

<p>When I try to take away the second element in the above array so that
it becomes an array consisting in <em>one</em> single element, then I get
<code>{hello}</code> instead of <code>hello</code>.</p>

<pre class="cliUB"><code>$ for f in {"hello"}; do echo $f; done
{hello}
</code></pre>

<p><strong>How can one get back an output consistent with the case of arrays
consisting of multiple elements?</strong></p>

<!-- more -->

<h2 id="motivation">Motivation</h2>

<p>This problem seems nonsense–loops are supposed to do repetitive
tasks.  If the loop has <em>only</em> one iteration, then we can directly
type in the command, instead of adapting it into a loop and setting up
the scope of the loop.</p>

<p>Nevertheless, if one converts multiple lines of short texts into one
long single line with <code>xargs</code>, then the items will be separated by
white spaces.  This <em>won’t</em> work with the above for loop.  To change
the delimiter from white space to comma, one may use <code>paste -d, -s</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Syntax</th>
      <th style="text-align: left">Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>-d,</code></td>
      <td style="text-align: left">Use <code>,</code> as the delimiter.</td>
    </tr>
    <tr>
      <td style="text-align: left"><code>-s</code></td>
      <td style="text-align: left"><em>Without</em> this flag, <code>$1</code> and <code>$2</code> are displayed in <em>parallel</em>.</td>
    </tr>
  </tbody>
</table>

<p>Surely, there are other tools to do this, such as <code>sed</code>.  However, I
think that <code>paste -d, -s</code> should be the <em>simplest</em> way to do this.
Note that the white space character between the two flags are
<em>important</em>.  Otherwise, this command <em>won’t</em> work.</p>

<p><em>Without</em> prior knowledge of the text to be processed, it’s possible
that the output of <code>paste -d, -s</code> consists of <em>only</em> one item.  This
single case is easy to deal with, even though the handling may be a
bit different from the case of multiple elements.  However, if the
syntax for the command that handles the output of <code>paste -d, -s</code>
<em>isn’t exactly the same</em> in the case of <em>one</em> single element and the
case of <em>multiple</em> elements, then we need to look at the content and
make manual judgement–this is tedious and error-prone.</p>

<p>In the problem posed in the previous section, if the list in the
for loop has <em>only</em> one item, then we need to do something different
from a list having two or more items.  If we observe this difference
with our naked eyes, the whole process will lack efficiency.</p>

<p>To solve this problem, we seek an <em>unified</em> approach.  In other words,
I try to change the syntax of the above for loop so that the for loop
will work for <em>any</em> one of these two cases.</p>

<h2 id="solution">Solution</h2>

<ol>
  <li>Surround each string in the array by a pair of <em>double quotes</em>.</li>
  <li>Add a comma <em>either</em> before the first element or after the last
element.</li>
</ol>

<p>The first step is needed if in the array, there exists an element
having two or more words <em>separated by a white space</em>; the second step
is needed for an array with one single element.</p>

<pre class="cliUB"><code>$ for f in {"hello world",}; do echo $f; done
hello world
</code></pre>

<h2 id="remarks">Remarks</h2>

<p>As the number of steps increases, the difficulty of constructing a
one-line command to do the thing rises tremendously.  It’s possible
that a shell script is <em>easier</em> to write.  By searching “bash array
tutorial” on Google, I got <a href="http://www.thegeekstuff.com/2010/06/bash-array-tutorial/">a tutorial on the Geek Stuff</a> in the
first search result.</p>

<p><figure class='code'><figcaption><span>A shell script that display an array (oneelt.sh)</span> <a href='/downloads/code/oneelt.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">arr</span><span class="o">=(</span><span class="s2">&quot;hello&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span> f in <span class="k">${</span><span class="nv">arr</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$f</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Oneline Perl]]></title>
      <link href="https://vincenttam.github.io/blog/2016/04/04/oneline-perl/"/>
    
    <updated>2016-04-04T00:47:40+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/04/04/oneline-perl</id>
    
      <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2>

<p>Knowing some regular expressions in Vim, I hope to apply these
concepts to Perl so that I can search and replace some simple strings
directly in base <em>without</em> having to open the editor.</p>

<p>As a Vim user, the class of special characters in Perl is more
<em>natural</em> than that of <code>sed</code>.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2016/04/03/searching-git-commit-messages/">the previous post</a>, the list of Git commit messages containing
the string “HTTPS” is the main focus.  However, the alignment of this
list <em>isn’t</em> good: in the column representing the day, the data can be
either one or two digit.  Though I can still extract information with
<code>awk '{print $[col_num]}'</code>, it’s better to fix the alignment.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s"
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 8 00:45:02 2016 +0800 A new article about Flair, Octopress and HTTPS
</code></pre>

<!-- more -->

<h2 id="start-using-perl">Start using Perl</h2>

<p>Searching “perl intro” online, one can easily find some basic Perl
scripts.  I tried to issue some simple one-line Perl command to save
time, but I <em>couldn’t</em> easily find them.  Thanks to
<a href="http://articles.mongueurs.net/magazines/linuxmag50.html">a webpage by Philippe Bruhat</a>, I managed to starting using
Perl.  I jot them down here.</p>

<pre class="cliUB"><code>$ perl -e 'print "hello \n"'  # single quote outside
hello
$ perl -e "\$str='abc'; print \$str;"  # escape $, no EOL
abc
$ perl -e "$str='test'; print $str.'\n';"  # not desired
test\n
$ perl -e '$str="test"; print $str."\n";'  # want newlne
test
</code></pre>

<p>The <code>-e</code> flag above stands for “execute”.</p>

<h2 id="read-from-external-command">Read from external command</h2>

<p>Unluckily, I <em>didn’t</em> know how to use <code>system()</code> nor backticks to pass
output of a command into Perl.  After trying a few search keywords,
“perl oneline read command output” worked best for me.  It was quite
<em>uncommon</em> that I found the <em>eighth</em> result useful.  In the article
<a href="http://www.theperlreview.com/articles/one-liners.html"><em>Perl One-liners</em></a>, I found out the answer.</p>

<pre class="cliUB"><code>$ for (( i = 1; i &lt;= 10; i++ )); do
  echo $i
  done | perl -e 'while (&lt;&gt;) {s/(?&lt;!\d)\d{1}(?!\d)/0$&amp;/; print $_}'
01
02
03
04
05
06
07
08
09
10
</code></pre>

<p>In fact, the flag <code>-n</code> can be used to replace the <code>while (&lt;&gt;) {...}</code>
loop.  The <code>-p</code> flag has the function of <code>-n</code> but <em>also</em> prints the
output.  I learnt them from <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html">Git manual web page for git-log</a>.</p>

<h2 id="solution">Solution</h2>

<p>Combine the above observations together.</p>

<pre class="cliUB"><code>$ git log -2 --grep="HTTPS" --pretty="%h %cd %s" \
  | perl -pe 's/(?&lt;=\u\l\l )\d{1}(?= )/0$&amp;/'
7400582 Sun Mar 20 20:19:47 2016 +0800 Updated my Rakefile with HTTPS
b6f4f1f Mon Feb 08 00:45:02 2016 +0800 A new article about Flair, Octopress and 
HTTPS
</code></pre>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>Perl: Apart from the above syntax, I’ve also learnt to use <code>$&amp;</code> and
<code>\b</code> in the replacement.  This is the Perl counterpart of <code>&amp;</code> and
<code>\&lt;</code> or <code>\&gt;</code> in Vim respectively.</li>
  <li>Git: In <code>git log</code> and <code>git show</code>,
    <ul>
      <li><code>--name-only</code>: suppress the diff hunk</li>
      <li><code>--pretty=format:</code> display nothing</li>
      <li><code>format</code> vs <code>tformat</code>: <code>t</code> stands for “terminator” (a.k.a. EOL)</li>
    </ul>

    <p>Each of each flags seems to be useless.  Nevertheless, <em>when
 combined together</em>, they help extract the edited files in a
 particular commit.</p>
  </li>
  <li>
    <p>Posting long commands in a blog entry</p>

    <p>From the two codeblocks explaining the difference between <code>format</code>
 and <code>tformat</code> in the Git manual, I understand that it’s better to
 end each line with a backslash, then continue with the command.
 In bash,  a <code>&gt;</code> is then automatically inserted at the beginning of
 each line.  This is carried from the shell to the source file of
 the blog article by copy and paste.  I used to think that it’s
 good to keep this so that this and the Ubuntu font will give a
 sense of reality to the reader.  However, this also causes
 inconvenience to those who want to try this command.  From now on,
 I <em>won’t</em> include this character anymore at the beginning of a
 long command exceeding 80 characters.  I will replace it with a
 white space instead.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git Portable Home Path]]></title>
      <link href="https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path/"/>
    
    <updated>2016-03-20T17:47:21+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/03/20/git-portable-home-path</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often included Unicode characters in my commit messages, such as
“Committed in a café”.  Since I <em>couldn’t</em> input the character ‘é’
inside the <a href="http://www.vim.org">Vim</a> editor shipped with msysgit, and the <code>curl</code> utility
<em>didn’t</em> get along well with my <a href="http://portableapps.com/apps/development/gvim_portable">GVim Portable</a>
I decided to <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">upgrade it</a>.</p>

<p>Then I set up things after the installation of <a href="https://git-for-windows.github.io/">Git for Windows</a>
so that it works well with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> now.<sup id="fnref:setup"><a href="#fn:setup" class="footnote">1</a></sup>  After that, I
thought that it would be great if I can set it up on a USB stick so
that the Vim editor with the powerful plugins can be executed on
<em>every</em> M$ Win* 7 machine.</p>

<p>The first Google search result for “git portable” is the webpage for
Git for Windows downloads.  To get it installed on a USB device,
<em>don’t</em> click “Save file” for the dialog box that popped up upon the
page is loaded.  <em>Choose the “thumbdrive edition”.</em></p>

<h2 id="problem">Problem</h2>

<p>Each time I opened the Vim editor from Portable Git Bash from the USB,
a new <code>.viminfo</code> file was created in the home folder of current user
in the C drive.  (e.g. <code>C:\Users\Foo\.viminfo</code>)  Therefore, it could
be deduced that VIM installed (under <code>/usr/share/vim/vim74</code>) in the
USB <em>couldn’t</em> load the configurations from <code>.vimrc</code> stored on the
<em>same</em> USB.  What an irony!</p>

<p><strong>How can one build a truly <em>portable</em> Vim in the USB stick?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Searching “git portable home path” on Google, I found
<a href="http://markb.co.uk/portable-git-windows-setting-home-environment-variable.html">an article about setting <code>$HOME</code> and SSL keys for GitHub</a>.
However, it was written <em>several years ago</em>.  In the current version
of Git for Windows, <code>git-bash.bat</code> <em>doesn’t</em> even exist.</p>

<p>Another search result was <a href="http://stackoverflow.com/a/3455231">a Stack Overflow question</a>.  I
tried copying <a href="http://stackoverflow.com/users/5991/dgw">dgw</a>’s <a href="https://gist.github.com/533267">wrapper</a> into <code>git-bash-portable.bat</code>.  I
adapted it to my installed copy of Git Portable by changing the
extension name at the last line from <code>bat</code> to <code>exe</code>.  Unluckily, it
took a long time to load the Portable Git Bash on clicking the batch
file.</p>

<h2 id="solution">Solution</h2>

<p>I found <a href="https://github.com/git-for-windows/git/issues/320#issuecomment-140278002">Jason Cemra’s comment on issue #320</a> of Git for Windows
on GitHub extremely useful.</p>

<p><figure class='code'><figcaption><span>Launch Portable Git Bash with proper a home folder (git-bash.bat)</span> <a href='/downloads/code/git-bash.bat'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="c">rem Setup environment (replace &#39;user&#39; with your desired username)</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOMEDRIVE</span><span class="o">=</span><span class="nv">%~d0</span>
</span><span class='line'><span class="k">set</span> <span class="nv">HOME</span><span class="o">=</span>home<span class="n">/owner</span>
</span><span class='line'><span class="k">set</span> <span class="nv">USERPROFILE</span><span class="o">=</span><span class="nv">%HOME%</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem Launch the git bash</span>
</span><span class='line'>start git-bash.exe
</span></code></pre></td></tr></table></div></figure></p>

<p>I borrow the line <code>set HOMEDRIVE=%~d0</code> from <a href="http://stackoverflow.com/users/5991/dgw">dgw</a> since the drive
letter of the USB can <em>change</em>.  This facilitates the process of
adjusting the path of the <code>origin</code> when it comes to pushing a non-bare
Git repository in the USB device to a bare one in the <em>same</em> device.
(If the Win* machine <em>doesn’t</em> have Git and Vim installed, I use the
ones in my USB stick.  Otherwise, I use the installed versions of
those softwares.)</p>

<h2 id="remarks">Remarks</h2>

<p>Since the shell of a Vim session invoked by Git Bash is automatically
set to <code>/usr/bin/bash</code>, it is expected that
<a href="http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/">Zaadi’s VIMRC configuration</a> for automatic installation of
<a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> works.  Though I’m using the version written two years ago,
it still functions well.</p>

<p>To write in $\rm \LaTeX$ on <em>every</em> Win* 7 device, I also copied the
<a href="http://miktex.org/portable">Mik$\rm \TeX$ Portable</a> from my laptop to my USB stick.</p>

<p>I practised my <code>sed</code> skills by using <code>sed '2 i set HOMEDRIVE=%~d0'</code> to
insert contents <em>before</em> the second line.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:setup">

      <p>See the newest series <em>Git for Windows, Curl, Gist.vim with
Vundle</em> for details. <a href="#fnref:setup" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Generate $\rm \LaTeX$ Code for Octave Matrices]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices/"/>
    
    <updated>2016-01-16T15:33:39+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/16/generate-latex-code-for-octave-matrices</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<ul>
  <li><a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> use <a href="https://daringfireball.net/projects/markdown/">Markdown</a> and <a href="https://mathjax.org/">MathJax</a> to
  typeset math expressions.</li>
  <li>I use <a href="https://www.gnu.org/software/octave">GNU Octave</a> to efficiently perform (matrix)
  calculations for a quick and correct response on Mathematics Stack
  Exchange.</li>
</ul>

<h2 id="problem">Problem</h2>

<p>Recently, I encountered a <a href="http://math.stackexchange.com/q/1614115/290189">linear algebra problem</a> on
Mathematics Stack Exchange.</p>

<p>For any given matrix $A$ in Octave,</p>

<pre class="cliUB"><code>A = [1 2 2; 2 3 4; 4 4 2]
A =

   1   2   2
   2   3   4
   4   4   2
</code></pre>

<p><strong>how can one generate its $\rm \LaTeX$ code</strong></p>

<p><figure class='code'><figcaption><span>$\rm \LaTeX$ code for matrix $A$ </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A = \begin{bmatrix} 1&amp;2&amp;2\ 2&amp;3&amp;4\ 4&amp;4&amp;2 \end{bmatrix}</span></code></pre></td></tr></table></div></figure></p>

<p>so that one gets</p>

<div class="myeqn">
\[
  A = \begin{bmatrix} 1&amp;2&amp;2\\ 2&amp;3&amp;4\\ 4&amp;4&amp;2 \end{bmatrix}?
\]
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I searched “octave to latex matrices” and I found <a href="http://tex.stackexchange.com/a/43733">this answer</a>
quite useful.  I issued the first command to see the result.</p>

<pre class="cliUB"><code>strrep(strrep(mat2str(A),",","&amp;"),";","\\\\\n")(2:end-1)
ans = 1 2 2\\
2 3 4\\
4 4 2
</code></pre>

<p>I suspected that it <em>didn’t</em> work.  I posted it as a comment and
verified that I was right.  To fix this, I extracted the function
<code>mat2str(A)</code> in the middle of this command to see the results.  From
its result (<code>ans = [1 2 2;2 3 4;4 4 2]</code>), I realised that <code>strrep</code>
standed for “string replace”.  Then, I changed the double-quoted comma
in the second argument of function <code>strrep</code> to a double-quoted
whitespace character, and got the anticipated result.</p>

<pre class="cliUB"><code>strcat("\\begin{bmatrix}\n",strrep(strrep(mat2str(A)," ","&amp;"), ...
";","\\\\\n")(2:end-1),"\n\\end{bmatrix}\n")
ans = \begin{bmatrix}
1&amp;2&amp;2\\
2&amp;3&amp;4\\
4&amp;4&amp;2
\end{bmatrix}
</code></pre>

<h2 id="inadequacies">Inadequacies</h2>

<p>I <em>don’t</em> know how to do this for matrices with fractions.  I think I
can work it out by searching and testing in several hours, but I
<em>don’t</em> have the time to do so.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<h3 id="math">Math</h3>

<p>I revised some definitions in linear algebra.</p>

<ul>
  <li>A matrix $U$ is <strong>unitary</strong> iff $UU^\star = U^\star U = I$.</li>
  <li>A matrix $N$ is <strong>normal</strong> iff $NN^\star = N^\star N$.</li>
</ul>

<h3 id="gnu-octave">GNU Octave</h3>

<ul>
  <li>The function <code>strrep(str,"foo","bar")</code> replaces all instances of
  <code>foo</code> in <code>str</code> with <code>bar</code>.  It can be used in a nested manner for
  multiple replacements.</li>
  <li>The function <code>strcat(str1,str2,...)</code> concatenates the strings
  inside.</li>
</ul>

<h3 id="grep">Grep</h3>

<p>When I was writing this article, I wanted to search for “<a href="https://www.gnu.org/software/octave">octave</a>”
(with the square brackets “[]”) with <code>grep</code> inside <a href="http://www.vim.org/">Vim</a>, but I got
over 1270 results.  I tried adding single/double quotes and escaping
the square brackets with a backslash, but I faied again.  Finally, I
googled “grep escape character” for a solution.  Since then, I know
that I should <a href="http://stackoverflow.com/a/12387802/3184351">add the <code>-F</code> flag to <code>grep</code></a> to fix the
string.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Ubuntu Grey Screen]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen/"/>
    
    <updated>2016-01-02T14:05:54+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/02/ubuntu-grey-screen</id>
    
      <content type="html"><![CDATA[<p>A few days ago, I was browsing questions on
<a href="http://math.stackexchange.com">Mathematics Stack Exchange</a> on <a href="http://www.ubuntu.com/desktop">Ubuntu</a> 14.04 <abbr title="long-term support">LTS</abbr>.  I opened
lots of tabs in <a href="https://www.chromium.org">Google Chromium</a>.  Suddenly, the screen
went grey.  I <em>don’t</em> know the cause.  I <em>hadn’t</em> seen such problem
before.  I waited for about one minute, and I switched to the terminal
<code>tty3</code>.  The grey screen became black <em>without any text</em>.  I pressed
<code>&lt;Ctrl&gt;-&lt;Alt&gt;-&lt;F7&gt;</code>, then the monitor showed the grey screen again.</p>

<p>I looked at the light (not the power button) in the desktop.  I
thought it represented the hard disk activity.  Its blinking was
normal.  As a result, I <em>guessed</em> the problem was related to the
display.  I <em>pretended</em> I could normally see things, and I <em>imagined</em>
the picture.  I logged on <code>tty3</code> without logging off <code>tty7</code>.  Then I
typed <code>sudo reboot</code> and supplied the password.  Within several
seconds, I heard a <em>beep</em> sound and the system rebooted.</p>

<p>Certainly, all unsaved works on <code>tty7</code> had been <em>lost</em>.  Therefore, it
was very important to save your work.  As I’m no longer an IT worker,
I <em>won’t</em> try to find a solution after reading a few related posts
which I have difficulty to understand.  Within six months, a new <abbr title="long-term support">LTS</abbr>
version of Ubuntu will be launched.  The price of a <abbr title="solid-state drive">SSD</abbr> will drop, so
perhaps I will clean install Ubuntu on a <abbr title="solid-state drive">SSD</abbr>.</p>

]]></content>
    
  </entry>
  
</feed>
