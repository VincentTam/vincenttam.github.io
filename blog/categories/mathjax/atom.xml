<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mathjax | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/mathjax/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2017-01-11T02:57:49+00:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (4)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/12/12/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4/"/>
    
    <updated>2016-12-12T20:47:36+00:00</updated>
    <id>https://vincenttam.github.io/blog/2016/12/12/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I’m recently enhancing the $\rm \LaTeX$ code for inline limits.  For
the reason of doing so, you may refer to the external link of
<a href="http://meta.math.stackexchange.com/a/15077/290189">my recent linklog</a> <em>Inline Limit Rendering</em>.</p>

<h2 id="problem">Problem</h2>

<p>In the previous post in this series written over one year ago, I have
included a code block which enables <a href="/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/#include-the-script-in-the-content">deferred MathJax loading</a>.
However, I manually added this chuck of code in the HTML file
generated by <a href="http://kramdown.gettalong.org/">kramdown</a>, which created the problem described in the
next subsection <em>A problem with Vim’s folding arised</em>.</p>

<h2 id="solution">Solution</h2>

<p>Firstly, save the code for loading <a href="https://www.mathjax.org/">MathJax</a> in <a href="/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/#include-the-script-in-the-content">the previous
post</a> in this series in a separate file <code>~/script.html</code>.  Then
use the following commands <em>within</em> Vim in order to avoid leaving the
current buffer and to improve efficiency.</p>

<pre><code>9,$w! ~/temp.mkd
!kramdown ~/temp.mkd &gt; ~/temp.html
!cat ~/{temp,script}.html &gt; ~/test.html
</code></pre>

<p>The digit <code>9</code> in the first command <em>isn’t</em> exact.  Change it to any
line number that separates the <a href="http://jekyllrb.com/docs/frontmatter/">yaml front matter</a> from the
post content.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Simple MathJax Template for Basic Linear Programs]]></title>
      <link href="https://vincenttam.github.io/blog/2016/01/09/simple-mathjax-template-for-basic-linear-programs/"/>
    
    <updated>2016-01-09T15:12:24+00:00</updated>
    <id>https://vincenttam.github.io/blog/2016/01/09/simple-mathjax-template-for-basic-linear-programs</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>To provide a good-looking template of basic linear programs for users
of <a href="http://math.stackexchange.com/">Mathematics Stack Exchange</a>.</p>

<div class="myeqn">
\[
  \begin{array}{cccll}
    \max &amp;z=&amp;x_1&amp;+x_2 &amp; \\
    \text{s.t.}&amp; &amp; &amp; \phantom{+}x_2 + s_1 &amp;= 8 \\
    &amp; &amp; -x_1&amp;+x_2 - s_2&amp;=-4 \\
    &amp; &amp; x_1&amp;+x_2+s_3&amp;= 12 \\
    &amp; &amp; &amp; s_1,s_2,s_3 &amp;\ge 0
  \end{array}
\]
</div>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>{% codeblock lang:tex A minimum working example on Math Stack Exchange %}
\begin{array}{cccll}
  \max &amp;z=&amp;x_1&amp;+x_2 &amp; <br />
  \text{s.t.}&amp; &amp; &amp; \phantom{+}x_2 + s_1 &amp;= 8 <br />
  &amp; &amp; -x_1&amp;+x_2 - s_2&amp;=-4 <br />
  &amp; &amp; x_1&amp;+x_2+s_3&amp;= 12 <br />
  &amp; &amp; &amp; s_1,s_2,s_3 &amp;\ge 0
\end{array}
{% endcodeblock %}</p>

<h2 id="inadequacies">Inadequacies</h2>

<p>If you want a prettier template, you may see
<a href="http://tex.stackexchange.com/q/75108">this $\rm TeX$–$\rm \LaTeX$ Stack Exchange question</a>.  I
tried added <code>@{}</code> in the first argument of the <code>array</code> environment to
eliminate the excessive inter-column space—this works great in $\rm
\LaTeX$.  However, neither <code>@{}</code> nor <code>\multicolumn{4}{l}{...}</code> is
processed by <a href="https://mathjax.org">MathJax</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Display of Calligraphic Font by MathJax in Chromium]]></title>
      <link href="https://vincenttam.github.io/blog/2015/12/24/display-of-calligraphic-font-by-mathjax-in-chromium/"/>
    
    <updated>2015-12-24T05:05:30+00:00</updated>
    <id>https://vincenttam.github.io/blog/2015/12/24/display-of-calligraphic-font-by-mathjax-in-chromium</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<h3 id="css-style-of-this-blog">CSS style of this blog</h3>

<p>I use <a href="http://erikzaadi.com/2012/04/22/solarized-color-scheme-for-octopress/" title="Source code of Solarized theme for Octopress">Solarized</a> theme with light background.  <abbr title="In my humble opinion">IMHO</abbr>, it is less
tiring to look at a light background.  I’ve chosen pink as the text
colour.</p>

<h3 id="contents-of-this-blog">Contents of this blog</h3>

<p>Apart from technical stuff, I often post math containing calligraphic
font, for example</p>

<ol>
  <li><a href="/blog/2014/06/17/injectivity-of-stable-mappings/"><em>Injectivity of Stable Mappings</em></a></li>
  <li><a href="/blog/2014/06/18/definition-of-content-0-sets/"><em>Definition of Content 0 Sets</em></a></li>
  <li><a href="/blog/2014/06/19/archimedean-sequence-of-partitions-of-a-square/"><em>Archimedean Sequence of Partitions of a Square</em></a></li>
  <li><a href="/blog/2014/11/08/composition-of-limits/"><em>Composition of Limits</em></a></li>
</ol>

<p>I used Mozilla Firefox, and I <em>didn’t</em> see problem on the display of
<code>\mathcal</code>.</p>

<h2 id="problem">Problem</h2>

<p>Three months ago, I wrote something about Zorn’s Lemma and Hausdorff
spaces.  In the post <a href="/blog/2015/09/28/normal-compact-t2-spaces/"><em>Normal Compact $T_2$ Spaces</em></a>, I observed
that the math display was <em>abnormal</em>.  Due to homework and exams, I
delayed the investigation into this technical problem.</p>

<p><img src="/images/posts/Mathcal/err.png" alt="mathcal display error" title="mathcal display error" /></p>

<p>Normally, the foreground colour of the math expression is the <em>same</em>
as that of normal inline text.  In the above figure, <span class="myeqn">"$T_2$" is in pink.  However, $U_y,
V_y$</span> <em>aren’t</em>.</p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<h3 id="look-into-the-code">Look into the code</h3>

<p>It is normal for me to inspect the HTML elements.</p>

<h4 id="element-inspected">Element inspected</h4>

<p><img src="/images/posts/Mathcal/img.png" alt="HTML element inspected" title="HTML element inspected" /></p>

<h4 id="interpreted-html-in-chromium">Interpreted HTML in Chromium</h4>

<p><img src="/images/posts/Mathcal/inspect.png" alt="HTML code in the inspector" title="HTML code shown" /></p>

<p>The above math expression is in <em>black</em> rather than <em>pink</em> because it
is rendered as a <abbr title="Portable Network Graphics">PNG</abbr> <em>image</em>.</p>

<p>I confirmed this by looking at the list of loaded resources.</p>

<p><img src="/images/posts/Mathcal/png-list.png" alt="list of loaded PNG" title="list of loaded PNG" /></p>

<h3 id="is-this-problem-browser-specific">Is this problem browser-specific?</h3>

<p>I tried opening <a href="/blog/2015/09/28/normal-compact-t2-spaces/">the blog article</a> in Mozilla Firefox, and I
<em>didn’t</em> see any problem.</p>

<picture class="fancybox" title="result in Firefox">
  <source srcset="/images/posts/Mathcal/ff487.png" media="(min-width: 490px)" />
  <img alt="result in Firefox" src="https://vincenttam.github.io/images/posts/Mathcal/ff300.png" />
</picture>

<h2 id="cause">Cause</h2>

<p>Based on the above observations, I suspected that the presence of a
calligraphic font triggered this fallback of fonts.  In order to test
this, I did an experiment on my local MathJax test page:  I had a math
expression containing <code>\mathcal</code> and one without.  I put them in
different order, and observed the difference in the loaded <abbr title="Portable Network Graphics">PNG</abbr>.</p>

<h3 id="calligraphic-font-at-the-bottom">Calligraphic font at the bottom</h3>

<picture class="fancybox" title="Visual effect of \mathcal at the
bottom">
  <source srcset="/images/posts/Mathcal/view1-364.png" media="(min-width: 370px)" />
  <img alt="Visual effect of \mathcal at the bottom" src="https://vincenttam.github.io/images/posts/Mathcal/view1-300.png" />
</picture>

<p><img src="/images/posts/Mathcal/b4cal.png" alt="PNG list when \mathcal at last" title="PNG list when \mathcal at last" /></p>

<p>Only the curly ‘C’ is loaded as <abbr title="Portable Network Graphics">PNG</abbr>, while the rest <em>aren’t</em>.</p>

<p>{% include_code Source code for the above sample page mathcal/b4cal.html %}</p>

<h3 id="calligraphic-font-at-the-bottom-1">Calligraphic font at the bottom</h3>

<picture class="fancybox" title="Visual effect of \mathcal at the
top">
  <source srcset="/images/posts/Mathcal/view2-364.png" media="(min-width: 370px)" />
  <img alt="Visual effect of \mathcal at the top" src="https://vincenttam.github.io/images/posts/Mathcal/view2-300.png" />
</picture>

<p><img src="/images/posts/Mathcal/cal1st.png" alt="PNG list when \mathcal at first" title="PNG list when \mathcal at first" /></p>

<p>Everything (after the curly ‘C’) are loaded as <abbr title="Portable Network Graphics">PNG</abbr>.</p>

<p>{% include_code Source code for the above sample page mathcal/cal1st.html %}</p>

<p>Therefore, my claim is verified.  <em>Unluckily</em>, I failed to find any
solution to this problem on Google.</p>

<h2 id="reasons-for-not-finding-a-solution">Reasons for <em>not</em> finding a solution</h2>

<ol>
  <li>This problem <em>doesn’t</em> affect the content.</li>
  <li>This problem is browser-specific—it <em>doesn’t</em> appear in Mozilla
Firefox.</li>
  <li>It is possible that this issue will be automatically fixed by a
future upgrade, and a solution of this problem will be transient.</li>
</ol>

<p>I’ve better solve math problems instead of technical ones since math
is always true.</p>

<h2 id="some-off-topic-stuff">Some off-topic stuff</h2>

<p>I started writing this post on Christmas Eve, and I finished it at
Christmas.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[MathJax Local Configuration File (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/09/06/mathjax-local-configuration-file-2/"/>
    
    <updated>2015-09-06T11:29:42+00:00</updated>
    <id>https://vincenttam.github.io/blog/2015/09/06/mathjax-local-configuration-file-2</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>In my opinion, the default display of the $\rm \LaTeX$ command for
$\Re z$ and $\Im z$ <em>don’t</em> look good.</p>

<p><img src="/images/posts/MathJaxReIm/im110.png" alt="default Im(z) display" /></p>

<h2 id="problem">Problem</h2>

<p>I want to reset the <code>\Im</code> command in my local MathJax configuration
file <code>source/javascripts/MathJaxLocal.js</code>.  I used a script inside the
<code>&lt;body&gt;</code> tag to load my local MathJax configurations from GitHub.<sup id="fnref:pp"><a href="#fn:pp" class="footnote">1</a></sup>
If I want to <em>test</em> the configurations, then I’ll have to push my
changes to GitHub <em>before</em> I can see the effect and figure out the
errors — this is incredibly <em>slow</em> and <em>inefficient</em>.</p>

<p><strong>How can I locally debug my MathJax configurations?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>To <em>locally test</em> my MathJax configurations, I put <em>another</em> <code>&lt;script&gt;</code>
tag containing the local configurations <em>before</em> the <code>&lt;script&gt;</code> that
loads <code>MathJax.js</code>.</p>

<p>{% codeblock Put this at the bottom lang:html %}
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [['$', '$']],
    displayMath: [['$$', '$$'],['\\[','\\]']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] },
  TeX: {
    equationNumbers: { autoNumber: "AMS" },
    extensions: ["AMSmath.js", "AMSsymbols.js","AMScd.js"],
    TagSide: "left",
    Macros: {
      field: ['\\mathbb{#1}', 1],
      C: ['\\field{C}'],
      F: ['\\field{F}'],
      N: ['\\field{N}'],
      Q: ['\\field{Q}'],
      R: ['\\field{R}'],
      Z: ['\\field{Z}'],</script></p>

<pre><code>  zeros: ['\\mathbf{0}'],
  ud: ['\\,\\mathrm{d}'],

  vect:['\\boldsymbol{\\mathbf{#1}}',1],
  abs: ['\\lvert#1\\rvert', 1],
  abslr:['\\left\\lvert#1\\right\\rvert', 1],
  norm: ['\\lVert#1\\rVert', 1],
  normlr: ['\\left\\lVert#1\\right\\rVert', 1],

  lcm: ['\\mathop{\\mathrm{lcm}}'],
  interior: ['\\mathop{\\mathrm{int}}'],
  exterior: ['\\mathop{\\mathrm{ext}}'],
  volume: ['\\mathop{\\mathrm{vol}}'],

  E: ['{\\rm I\\kern-.3em E}'],
  Var: ['\\mathop{\\mathrm{Var}}'],
  Cov: ['\\mathop{\\mathrm{Cov}}'],
  Binom: ['\\mathop{\\mathrm{Binom}}'],
  Exp: ['\\mathop{\\mathrm{Exp}}'],
  Poi: ['\\mathop{\\mathrm{Poi}}'],

  GL: ['\\mathrm{GL}'],
  SL: ['\\mathrm{SL}'],
  Aut: ['\\mathrm{Aut}'],
  id: ['\\mathrm{id}'],

  // Test your code here
  Re: ['\\mathop{\\mathrm{Re}}'],
  Im: ['\\mathop{\\mathrm{Im}}'],
}   } }); &lt;/script&gt;
</code></pre>

<script type="text/javascript">
(function() {
  function getScript(url,success){
    var script=document.createElement('script');
    script.src=url;
    var head=document.getElementsByTagName('head')[0],
    done=false;
    script.onload=script.onreadystatechange = function(){
      if ( !done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete') ) {
      done=true;
      success();
      script.onload = script.onreadystatechange = null;
      head.removeChild(script);
      }
    };
    head.appendChild(script);
  }

  getScript("https://cdn.mathjax.org/mathjax/latest/MathJax.js?" +
    "config=TeX-AMS-MML_HTMLorMML", function(){});

})();
</script>

<p>{% endcodeblock %}</p>

<p>I think that rendering $\Re z$ and $\Im z$ with roman font is better.</p>

<p><img src="/images/posts/MathJaxReIm/im-new120.png" alt="improved Im(z) display" /></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp">

      <p>Refer to <a href="/blog/2015/08/05/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/">my old post</a> titled <em>A Quick Markdown Syntax Error
Detection for Writing MathJax Equations in Octopress Posts (3)</em>
for details. <a href="#fnref:pp" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[A Quick Markdown Syntax Error Detection for Writing MathJax Equations in Octopress Posts (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3/"/>
    
    <updated>2015-08-04T16:18:45+00:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/04/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I often write math in this blog.  After typing lots of characters,
syntax errors are <em>inevitable</em>, but no one wants them to be published.
Unluckily, the <code>rake generate</code> command takes <em>too long</em> to run.  In
order to find them out more quickly, I quickly went over the
<code>Gemfile</code> of the repository for this blog, and saw that the Markdown
engine of Octopress is kramdown.  Therefore, I used the command line
version of this Markdown parser to convert my Markdown source file to
an HTML document by a Vim Ex command.</p>

<pre><code>:!kramdown % &gt; %&lt;.html
</code></pre>

<p>For this, I’ve written two posts describing the workflow of producing
HTML web pages consisting of math expressions from Markdown source
files using kramdown and MathJax.</p>

<h2 id="problem">Problem</h2>

<p>In <a href="/blog/2014/12/10/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-1/">the first post</a> in this series, I’ve made a list of steps
in Vim.  However, jumping to other files is laborious.  More
importantly, those steps involve browsing and copying of lines of
HTML code of the <code>&lt;head&gt;</code>, which loads MathJax, in other HTML files.
This can <em>seriously</em> slow down the editing process.  Unhappily, this
problem <em>isn’t</em> solved in <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series.</p>

<!-- more -->

<h2 id="solution">Solution</h2>

<h3 id="include-the-script-in-the-content">Include the script in the content</h3>

<p>There might be some option for the kramdown command line utility to
use accept an HTML template files during the code conversion.
However, I’m <em>too lazy</em> to search for them as I need to work on
math.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup></p>

<p>Remembering that I defered the loading of JavaScripts in order to
boost the PageSpeed score of this site, I adpated the script to load
MathJax instead of fancyBox in my draft markdown file.<sup id="fnref:pp2"><a href="#fn:pp2" class="footnote">2</a></sup></p>

<p>{% codeblock Put this at the bottom lang:html %}
<script type="text/javascript">
(function() {
  function getScript(url,success){
    var script=document.createElement('script');
    script.src=url;
    var head=document.getElementsByTagName('head')[0],
    done=false;
    script.onload=script.onreadystatechange = function(){
      if ( !done &amp;&amp; (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete') ) {
      done=true;
      success();
      script.onload = script.onreadystatechange = null;
      head.removeChild(script);
      }
    };
    head.appendChild(script);
  }</script></p>

<p>getScript(“https://cdn.mathjax.org/mathjax/latest/MathJax.js?” +
    “config=TeX-AMS-MML_HTMLorMML” +
    “,https://vincenttam.github.io/javascripts/MathJaxLocal.js”,
    function(){});</p>

<p>})();
&lt;/script&gt;
{% endcodeblock %}</p>

<h3 id="a-problem-with-vims-folding-arised">A problem with Vim’s folding arised</h3>

<hr />
<p>(Added on DEC 12TH, 2016)</p>

<p>This subsection can be omitted since appending the above code can be
done with <code>cat</code>.  Please see <a href="/blog/2016/12/12/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-4/">the next post</a> in this series for
the detailed description.</p>

<hr />

<p>By default, with the plugin <code>vim-markdown</code> installed, the sections are
<em>folded</em>.  Before I can continue editing at the end of the file, I
have to open the last fold, which contained more than 25 lines due to
the script enabling MathJax at the bottom.  As a result, I have to
move back to the middle of the last fold by pressing <code>k</code> for a while.
That annoys me.  If the script is contained in a separate fold, it’s
better.  Therefore, adding a blank line and then a line consisting of
three hyphens will fix this problem.</p>

<h2 id="inadequacies">Inadequacies</h2>

<hr />
<p>(Added on SEP 3RD, 2015)</p>

<p>Now I realised that kramdown will leave the trailing two backslashes
at each line inside <code>&lt;div&gt;</code> tags in Markdown source files <em>untouched</em>.</p>

<hr />

<p>In <a href="/blog/2014/12/13/a-quick-markdown-syntax-error-detection-for-writing-mathjax-equations-in-octopress-posts-2/">the second post</a> in this series, we know that <code>&lt;div&gt;</code> tag
prevents kramdown from converting the code inside the tag to HTML,
while in <a href="/blog/2014/09/14/kramdowns-markdown-attributes/">another old post about kramdown’s Markdown attributes</a>,
one can revert the above behaviour by simply adding an attribute
<code>markdown="1"</code> to the <code>&lt;div&gt;</code> tag.  These can be reflected in the
above test.</p>

<p>Usually, in math environments inside a $\rm \LaTeX$ document, double
backslashes <code>\\</code> start a new line, and it’s the same in MathJax.
Typing <em>two</em> backslashes in the Markdown source down will suffice.
Unluckily, in the <em>real Markdown source</em> for Octopress posts, <em>four</em>
<code>\</code> are needed.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, I have to think about
<a href="/blog/2015/08/04/some-thoughts-on-a-real-valued-function/">multi-variable real-valued functions</a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pp2">

      <p>Refer to my old post
<a href="/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a> in <em>Blog 1</em> for
details. <a href="#fnref:pp2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
