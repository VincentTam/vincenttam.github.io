<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Online Code Highlighter | Blog 1]]></title>
  <link href="http://vincenttam.github.io/blog/categories/online-code-highlighter/atom.xml" rel="self"/>
  <link href="http://vincenttam.github.io/"/>
  <updated>2015-03-09T23:30:20+08:00</updated>
  <id>http://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Fixing Embedded Gists in Octopress]]></title>
      <link href="http://vincenttam.github.io/blog/2014/08/05/fixing-embedded-gists-in-octopress/"/>
    
    <updated>2014-08-05T20:18:53+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/08/05/fixing-embedded-gists-in-octopress</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>Octopress’s default plugins for including code snippets/blocks enable
users to share code.  This is good for open source technologies.
<em>Without</em> intelligent and generous users of open source tools, I
<em>won’t</em> be able to</p>

<ol>
  <li>show images which can be enlarged with a click;<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></li>
  <li>display a category list of Octopress posts;<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></li>
  <li>find out how to include contents rendered by Mathjax (e.g. $\rm
\LaTeX$) in the category list;<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></li>
  <li>figure out a way to remove the line numbers and repeating figures
in the RSS (category) feeds;<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup></li>
  <li>embed SVG images that support zooming, panning and dragging.<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup></li>
</ol>

<p>While I was writing <a href="/blog/2014/08/03/my-pandoc-template-1/#gist13584483" title="My Pandoc Template (1)">my previous post</a>, which was about a
basic pandoc template for generating a $\rm \LaTeX$ PDF file, I would
like to include a <a href="https://gist.github.com">Gist</a> in my post.</p>

<p>Some users will say that Octopress’s default fuctionality <code>{%
include_code %}</code> can highlight the code.</p>

<p><strong><em>Why does one think of embedding a Gist in Octopress?</em></strong></p>

<h2 id="rationale">Rationale</h2>

<p>To easily modify the embedded code block.</p>

<ul>
  <li>
    <p>Octopress’s default plugins: <code>rake generate</code> is slow, especially
  when there’s a lot of contents.  (say, more than a hundred posts)</p>
  </li>
  <li>
    <p>Embedded Gist: <code>{% gist gist_id [&lt;file&gt;] %}</code> is
  responsible for embedding the code snippet for <code>&lt;file&gt;</code>—changing
  the contents of the Gist for <code>&lt;file&gt;</code> <em>doesn’t</em> change this piece
  of <a href="http://jekyllrb.com/">Jekyll</a> code.  Moreover, posting code to Gist is quite fast if
  you have <a href="https://github.com/mattn/gist-vim" title="Vim script for Gist">Gist.vim</a> plugin installed in Vim.<sup id="fnref:6"><a href="#fn:6" class="footnote">6</a></sup></p>
  </li>
</ul>

<h2 id="problem">Problem</h2>

<p>However, if one uses Gist instead of Octopress’s default plugins for
sharing code, one will see that the line numbers <em>aren’t</em> in the right
position.</p>

<p><img src="/images/posts/FixGist/wrong.png" title="‘Gist #1’ ‘A Gist that does not look good’" ></p>

<!-- more -->

<p>In <a href="https://github.com/imathis/octopress/issues/847#issuecomment-11386079">a comment</a> left by Brandon Mathis, the father of
Octopress, in Octopress issue #847, he said that <strong>external contents</strong>
in Octopress posts/pages <em>weren’t</em> good.  However, with <a href="https://github.com/mattn/gist-vim" title="Vim script for Gist">Gist.vim</a> and
<a href="https://github.com/tpope/vim-fugitive" title="a Git wrapper in Vim">fugitive.vim</a>, managing code snippets in multiple places (i.e. the
Git repository for one’s Octopress blog, and the Gist for the code
snippet) <em>isn’t</em> so difficult.</p>

<h2 id="solution">Solution</h2>

<p>There’s a solution on devspade.<sup id="fnref:7"><a href="#fn:7" class="footnote">7</a></sup>  However, due to my <em>poor</em>
knowledge on Ruby, I <em>couldn’t</em> understand what was actually done in
<code>plugins/git_tag.rb</code>.</p>

<p>Therefore, I followed Alex Rothberg’s approach of changing a few CSS
properties of embedded Gists.<sup id="fnref:8"><a href="#fn:8" class="footnote">8</a></sup></p>

<p>After an hour of testing, I realized that changing
<code>sass/partials/_syntax.scss</code> would suffice.  There’s no need to
actually change <code>.themes/classic/sass/partials/_syntax.scss</code> unless
one wants to customize the theme.<sup id="fnref:9"><a href="#fn:9" class="footnote">9</a></sup>  Now I can use Gists in my
posts.<sup id="fnref:10"><a href="#fn:10" class="footnote">10</a></sup></p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Refer to <a href="/blog/2014/03/30/testing-jquery-image-popup/"><em>Testing jQuery Image Popup</em></a> for details. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Refer to <a href="/blog/2014/04/27/octopress-category-list/"><em>Octopress Category List</em></a> for details. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">

      <p>Refer to <a href="/blog/2014/06/20/fixing-broken-urls-in-the-catetory-list/"><em>Fixing Broken URLs in the Catetory List</em></a>
for details. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">

      <p>Refer to <em>My Settings for RSS <a href="/blog/2014/06/10/my-settings-for-rss-1/">(1)</a>, <a href="/blog/2014/06/11/my-settings-for-rss-2/">(2)</a></em> for
details. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>Refer to <a href="/blog/2014/08/02/zooming-svg-in-web-browsers/"><em>Zooming SVG in Web Browsers</em></a> for details. <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:6">

      <p>Refer to <a href="/blog/2014/01/30/posting-code-to-gist-efficiently/"><em>Posting Code to Gist Efficiently</em></a> for
details. <a href="#fnref:6" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:7">

      <p>Caffrey, B. Aug 6, 2014. <em>Fixing Gist Embeds in Octopress</em>.
Retrieved from
<a href="http://devspade.com/blog/2013/08/06/fixing-gist-embeds-in-octopress/">http://devspade.com/blog/2013/08/06/fixing-gist-embeds-in-octopress/</a> <a href="#fnref:7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:8">

      <p>For details, refer to</p>

      <ol>
        <li>Rothberg’s comment in <a href="https://github.com/imathis/octopress/issues/847#issuecomment-43047234" title="GitHub gist changes break gist plugin formatting">Octopress issue #847</a>;
and</li>
        <li><a href="https://github.com/cancan101/cancan101.github.io/commit/d30d956">cancan101/cancan101.github.io@d30d956</a></li>
      </ol>
      <p><a href="#fnref:8" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:9">

      <p>Before fixing the embedded Gists in Octopress, I <em>didn’t</em> know how
the SCSS files under <code>.themes/classic/partials/</code> affect those
under <code>sass</code>.  Therefore, to prepare for a possible failure, I
divided the process into two Git commits.</p>

      <ol>
        <li>
          <p>Commit <a href="https://github.com/VincentTam/vincenttam.github.io/commit/233b333">233b333</a>: I changed
<code>.themes/classic/sass/partials/_syntax.scss</code>, according to
<a href="https://github.com/cancan101/cancan101.github.io/commit/d30d956">cancan101/cancan101.github.io@d30d956</a></p>
        </li>
        <li>
          <p>Commit <a href="https://github.com/VincentTam/vincenttam.github.io/commit/e5668de">e5668de</a>: I ran the command for installing a theme, and
found out that my changes to the HTML and XML files were <em>lost</em>,
just like commits <a href="https://github.com/VincentTam/vincenttam.github.io/commit/f687612">f687612</a> and <a href="https://github.com/VincentTam/vincenttam.github.io/commit/fc59e2a">fc59e2a</a>.  Though running <code>git
checkout -- source/_includes/&lt;file&gt;</code> could revert the <code>&lt;file&gt;</code> to
its previous version, it’s still troublesome.</p>
        </li>
      </ol>
      <p><a href="#fnref:9" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:10">

      <p>For a successful example, you may refer to a Gist in my
<a href="/blog/2014/08/03/my-pandoc-template-1/#gist13584483" title="My Pandoc Template (1)">previous post</a>. <a href="#fnref:10" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Include Liquid Code Inside Octopress Codeblocks]]></title>
      <link href="http://vincenttam.github.io/blog/2014/06/12/include-liquid-code-inside-octopress-codeblocks/"/>
    
    <updated>2014-06-12T13:58:30+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/06/12/include-liquid-code-inside-octopress-codeblocks</id>
    
      <content type="html"><![CDATA[<p>Last night, I wrote a post on editing a Ruby plugin file and an Atom
Feed <abbr title="EXtensible Markup Language">XML</abbr> file for removing redundant images in Atom Feeds.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> To show
how to change the files, I put some codeblocks in my post.</p>

<p><figure class='code'><figcaption><span>Sample codeblock that contains Liquid code</span><a href='/blog/2014/06/10/my-settings-for-rss-1/#putting-things-together'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>{% codeblock Change the <span class="nt">&lt;abbr</span> <span class="na">title=</span><span class="s">&quot;EXtensible Markup Language&quot;</span><span class="nt">&gt;</span>XML<span class="nt">&lt;/abbr&gt;</span> file as well lang:xml http://www.ewal.net/2012/09/08/octopress-customizations/#categories-in-the-atom-feed %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;entry&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- other elements --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;content</span> <span class="na">type=</span><span class="s">&quot;html&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;lt;</span>![CDATA[{{ post.content | remove_linenumbers | remove_bigfig | expand_urls: site.url | cdata_escape }}]]<span class="ni">&amp;gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class='line'><span class="nt">&lt;/entry&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endcodeblock %}
</span></code></pre></td></tr></table></div></figure></p>

<p>However, I <em>couldn’t</em> generate the site.  I tried HTML encoding the
contents and surrounding them using a <code>&lt;pre&gt;</code> tag, instead of a
<code>{% codeblock %}</code> tag, but this approach also
<em>failed</em>.</p>

<!-- more -->

<p>Walter could post some <a href="http://liquidmarkup.org/" title="Liquid markup language">Liquid</a> code, but there’s <em>no</em> source for his
blog on GitHub, and he <em>no longer uses</em> Octopress anymore.  Therefore,
I viewed Clapper’s code since he wrote some Liquid template tags for
installing <a href="http://brizzled.clapper.org/blog/2012/02/05/a-simple-octopress-image-popup-plugin/" title="A Simple Octopress Image Popup Plugin">an image popup plugin</a>.  In the blog post
introducing his plugin, there’s a link that took readers to another
post about how his use of Neiner’s
<a href="http://fuelyourcoding.com/scripts/toc/">jQuery table of contents plugin</a> on Octopress.  I studied
<a href="https://raw.githubusercontent.com/bmc/brizzled/master/source/_posts/2012-02-04-generating-a-table-of-contents-in-octopress.markdown">the markdown source of the post</a>, and saw that a
<code>{% raw %}</code> tag was used to surround the interior
of the codeblock which contained Liquid code.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>See <a href="/blog/2014/06/10/my-settings-for-rss-1/">My Settings for RSS (1)</a> for details. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[My First WordPress Post Using Gist]]></title>
      <link href="http://vincenttam.github.io/blog/2014/01/30/my-first-wordpress-post-using-gist/"/>
    
    <updated>2014-01-30T16:25:03+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/01/30/my-first-wordpress-post-using-gist</id>
    
      <content type="html"><![CDATA[<p><em>Note: This post won’t make sense here. Refer to the
<a href="http://blogueun.wordpress.com/2014/01/30/1st-wp-post-using-gist/">original post</a>.</em></p>

<p>Note: I can now figure out a way to work with <em>both</em> UltraBlog and
WordPress.com’s built-in online code highlighter.  See my
<a href="/blog/2014/02/06/another-testing-page-for-wordpress-coms-built-in-syntaxhighlighter-and-ultrablog/" title="Another Testing Page for WordPress.com's Built-in SyntaxHighlighter and UltraBlog">newer post</a> for details.</p>

<p><a href="http://daringfireball.net/projects/markdown" title="Markdown">Markdown</a> is easy to write.  <del>However, writing code with <code>code</code>
tag (surrounded with <code>[]</code>) using UltraBlog in Vim <em>doesn’t</em> work.  In
order to post some code, one needs to
<a href="http://en.support.wordpress.com/markdown/" title="WordPress's Markdown Support">use 3 backticks</a>.</del>  (I’ve found a way to use the
built-in SyntaxHighlighter now because I’ve realised that a blank line
in Markdown will be changed to a <code>&lt;p&gt;</code> tag in HTML.  Thus, <em>don’t</em> put
any blank lines right above and below the the <code>&lt;code&gt;</code> tags.)</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">element1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="err">“</span><span class="nx">foo</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="nx">element1</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="err">“</span><span class="nx">Hello</span> <span class="nx">world</span><span class="o">!</span><span class="err">”</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There’s some shortcomings of the above method.  If you need to copy a
list of source code, you’ll need to browse the source code, provided
that the “gutter” option of the code list is “true”,
<a href="http://en.support.wordpress.com/code/posting-source-code/#configuration-parameters" title="Configuartion Parameters">which is the default</a>.
Moreover, if you include source code that consists of <code>&lt;angled
blocks&gt;</code> in a blog post written in Markdown using the UltraBlog
plugin, then the angled block may be interpreted as an HTML tag
element, such as the statement <code>#include &lt;iostream&gt;</code> in a C++ program.
<em>More importantly, I’ve found out that <a href="http://en.support.wordpress.com/markdown/" title="WordPress's Markdown Support">this apporach</a>
<strong>doesn’t</strong> work with UltraBlog.</em>  <del>The above code list verifies
this assertion.<del></del></del></p>

<p><img src="/images/posts/1stWPGist/ultrablog.png" title="Screenshot of the “code list” in UltraBlog.vim" ></p>

<p><small>Figure 1: This is a screenshot of the “code list” in
UltraBlog.vim.  <a href="http://en.support.wordpress.com/markdown-quick-reference/" title="Markdown quick reference">Markdown quick reference</a> suggests the
use of 3 backticks.</small></p>

<p><img class="fancybox" src="/images/posts/1stWPGist/interpreted.png" width="800" title="‘Screenshot of the interpreted code in WordPress.com online editor’ ‘fig1’" ></p>

<p><small>Figure 2: The above figure shows how the source code for the
“code list” (in lines 12–15 in UltraBlog.vim, see Figure 1) is
interpreted.</small></p>

<!-- more -->

<p>If you’re a <a href="http://www.blogger.com" title="Blogger">Blogger</a> user who has made use of <a href="http://alexgorbatchev.com/SyntaxHighlighter/" title="Alex Gorbatchev's SyntaxHighlighter">SyntaxHighlighter</a> to
share your source code online, you’ll know that the copy function
depends on <a href="http://www.adobe.com/products/flash/" title="Adobe Flash">Adobe Flash</a>.  I <em>don’t</em> have time to figure out whether
this is <a href="http://www.gnu.org/philosophy/javascript-trap.html">a JavaScript trap</a>, but it’s <em>better</em> if I can find
a way to avoid proprietary softwares.</p>

<p>Moreover, the <a href="http://en.support.wordpress.com/code/posting-source-code/" title="Supported Languages">languages supported</a> by <a href="http://www.wordpress.com">WordPress.com</a> is
<em>not as much as</em> <a href="http://gist.github.com/">Gist</a>. For instance, Gist can highlight code in a
VIMRC file, but the plugin used by WordPress.com <em>can’t</em>.</p>

<p>According to <a href="http://en.support.wordpress.com/gist/" title="WordPress's Gist Support">WordPress’s official support</a>, using Gist
should be much easier. The following is the result.</p>

<p><div><script src='https://gist.github.com/8703067.js'></script>
<noscript><pre><code>CXX = g++
SRCS = foo.cpp

default: $(SRCS:.cpp=.out)

.cpp.out:
	$(CXX) $&lt; -o $@

clean:
	rm -rf *.out</code></pre></noscript></div>
</p>

<p>Posted via <a href="http://0x3f.org/blog/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Testing Online Code Syntax Highlighters for Blogs (6): Multilingual Source Code Display in Web Pages]]></title>
      <link href="http://vincenttam.github.io/blog/2014/01/09/testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages/"/>
    
    <updated>2014-01-09T19:22:00+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/01/09/testing-online-code-syntax-highlighters-for-blogs-6-multilingual-source-code-display-in-web-pages</id>
    
      <content type="html"><![CDATA[<p><em>Note: This post won’t make sense here.  Refer to the
<a href="http://blogue-un.blogspot.hk/2014/01/testing-online-code-syntax-highlighters_8.html">original post</a>.</em></p>

<!-- more -->

<p><a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html">One of my earlier posts</a> suggests that <a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighlight</a> supports
<em>only one</em> language in a <code>pre</code> tag <em>without</em> proof.  Before embedding
a source code list to show this, I’ll make more assertions and then
verify them.</p>

<p><a href="http://highlightjs.org/">highlight.js</a> has the support, while <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a>
<em>doesn’t</em>.  For example, you want to attach the following Matlab code
to your blog entry.  <a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighlight</a> doesn’t have the Matlab
support.  For <a href="http://highlightjs.org/">highlight.js</a>, here’s the result.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="k">function</span><span class="w"> </span>[rr_array] <span class="p">=</span><span class="w"> </span><span class="nf">nest_fun</span><span class="p">(</span>x,a<span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="c">%function to find sets of polynormials.</span>
</span><span class='line'><span class="c">% a: set of constants, [A B C]</span>
</span><span class='line'><span class="c">% x: variables in array</span>
</span><span class='line'><span class="c">% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])</span>
</span><span class='line'><span class="n">n</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="nb">i</span> <span class="p">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">n</span>
</span><span class='line'>  <span class="n">A</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="n">B</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="n">C</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rr_array</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="nb">i</span><span class="p">}=[</span>‘<span class="n">A</span><span class="p">=</span>’<span class="p">,</span><span class="n">num2str</span><span class="p">(</span><span class="n">A</span><span class="p">),</span>’<span class="p">,</span> <span class="n">B</span><span class="p">=</span>’<span class="p">,</span>…
</span><span class='line'>      <span class="n">num2str</span><span class="p">(</span><span class="n">B</span><span class="p">),</span>’<span class="p">,</span> <span class="n">C</span><span class="p">=</span>’<span class="p">,</span><span class="n">num2str</span><span class="p">(</span><span class="n">C</span><span class="p">)];</span>
</span><span class='line'>  <span class="n">rr_array</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="nb">i</span><span class="p">}=</span><span class="n">polyx</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>　<span class="k">end</span>
</span><span class='line'><span class="k">  function</span><span class="w"> </span>r <span class="p">=</span><span class="w"> </span><span class="nf">polyx</span><span class="p">(</span>xx<span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="w">  </span>　　<span class="n">r</span> <span class="p">=</span> <span class="n">A</span><span class="p">.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">.^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">B</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span> <span class="o">+</span><span class="n">C</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/posts/CodeDisplay6/d8435-matlab_correct.png" title="‘highlight.js works on some computer(s)’ ‘result of highlight.js’" ></p>

<p>When I was writing the post, <a href="http://highlightjs.org/">highlight.js</a> didn’t worked right, but
as I gave up trying it and view this post on the next day, things just
go fine.</p>

<p>We just see how <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a> works.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="k">function</span><span class="w"> </span>[rr_array] <span class="p">=</span><span class="w"> </span><span class="nf">nest_fun</span><span class="p">(</span>x,a<span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="c">%function to find sets of polynormials.</span>
</span><span class='line'><span class="c">% a: set of constants, [A B C]</span>
</span><span class='line'><span class="c">% x: variables in array</span>
</span><span class='line'><span class="c">% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])</span>
</span><span class='line'><span class="n">n</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="nb">i</span> <span class="p">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">n</span>
</span><span class='line'>  <span class="n">A</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="n">B</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="n">C</span> <span class="p">=</span> <span class="n">a</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rr_array</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="nb">i</span><span class="p">}=[</span>‘<span class="n">A</span><span class="p">=</span>’<span class="p">,</span><span class="n">num2str</span><span class="p">(</span><span class="n">A</span><span class="p">),</span>’<span class="p">,</span> <span class="n">B</span><span class="p">=</span>’<span class="p">,</span>…
</span><span class='line'>      <span class="n">num2str</span><span class="p">(</span><span class="n">B</span><span class="p">),</span>’<span class="p">,</span> <span class="n">C</span><span class="p">=</span>’<span class="p">,</span><span class="n">num2str</span><span class="p">(</span><span class="n">C</span><span class="p">)];</span>
</span><span class='line'>  <span class="n">rr_array</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="nb">i</span><span class="p">}=</span><span class="n">polyx</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>　<span class="k">end</span>
</span><span class='line'><span class="k">  function</span><span class="w"> </span>r <span class="p">=</span><span class="w"> </span><span class="nf">polyx</span><span class="p">(</span>xx<span class="p">)</span><span class="w"></span>
</span><span class='line'><span class="w">  </span>　　<span class="n">r</span> <span class="p">=</span> <span class="n">A</span><span class="p">.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">.^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">B</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span> <span class="o">+</span><span class="n">C</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Code copied from <a href="http://bime-matlab.blogspot.hk/2006/10/66.html">Applications of Matlab in Engineering</a>.</p>

<p>Note: In <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">the official README</a>, it’s said that we
specify the <code>lang-*</code> class by its file extension (i.e. <code>m</code>), but in
the page that display the source code of lang-matlab.js on Google
Code, it points to <a href="https://github.com/amroamroamro/prettify-matlab">the author’s Github repository</a>,
which has a README file.  According to that file, the HTML tag should
be <code>&lt;pre class="prettyprint lang-matlab"&gt;</code>, instead of <code>&lt;pre
class="prettyprint lang-m"&gt;</code>.</p>

<p>So when one embeds the above source code list using
<a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a>, one would write</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint lang-matlab&quot;</span><span class="nt">&gt;</span>function [rr_array] = nest_fun(x,a)
</span><span class='line'>%function to find sets of polynormials.
</span><span class='line'>% a: set of constants, [A B C]
</span><span class='line'>% x: variables in array
</span><span class='line'>% Example: rr=nest_fun(2:10,[1 2 4;2 4 8])
</span><span class='line'>n = size(a);
</span><span class='line'>for i = 1:n
</span><span class='line'>A = a(i,1);B = a(i,2);C = a(i,3);
</span><span class='line'>rr_array{1,i}=[&#39;A=&#39;,num2str(A),&#39;, B=&#39;,...
</span><span class='line'>num2str(B),&#39;, C=&#39;,num2str(C)];
</span><span class='line'>rr_array{2,i}=polyx(x);
</span><span class='line'>　end
</span><span class='line'>function r = polyx(xx)
</span><span class='line'>　　r = A.*x.^2 + B.*x +C;
</span><span class='line'>end
</span><span class='line'>end
</span><span class='line'><span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let’s go back to the topic.</p>

<h2 id="syntaxhighlighter">SyntaxHighlighter</h2>

<p>The SyntaxHighlighter code for embedding Java:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: java&quot;</span><span class="nt">&gt;</span>public class Hello {
</span><span class='line'>public static void main(String args[]) {
</span><span class='line'>System.out.println(&quot;Hello world!&quot;);
</span><span class='line'>}
</span><span class='line'>}<span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As the language in determined by <code>brush: html</code>, there’s <em>no</em> multiple
language feature in SyntaxHighlighter.</p>

<h2 id="highlightjs">highlight.js</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: java&quot;</span><span class="nt">&gt;</span>public class Hello {
</span><span class='line'>    public static void main(String args[]) {
</span><span class='line'>	System.out.println(&quot;Hello world!&quot;);
</span><span class='line'>    }
</span><span class='line'>}<span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So <a href="http://highlightjs.org/">highlight.js</a> can display multiple languages at one container.</p>

<h2 id="google-code-prettify">google-code-prettify</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: java&quot;</span><span class="nt">&gt;</span>public class Hello {
</span><span class='line'>    public static void main(String args[]) {
</span><span class='line'>	System.out.println(&quot;Hello world!&quot;);
</span><span class='line'>    }
</span><span class='line'>}<span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So the result of <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a> is similar to that of
SyntaxHighlighter.</p>

<h2 id="further-results-of-highlightjs">Further results of highlight.js</h2>

<p>We end this essay with more results in <a href="http://highlightjs.org/">highlight.js</a>.</p>

<p>In order to embed multilingual source code in a list, <a href="http://highlightjs.org/">highlight.js</a>
is what you need, but if you insist on using <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a>,
here’s some sample code.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>&lt;pre class="prettyprint">public class Hello {
</span><span class='line'>    // Java code sample
</span><span class='line'>	public static void main(String args[]) {
</span><span class='line'>	    System.out.println("Hello world!");
</span><span class='line'>	}
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    &lt;!-- CSS code-->
</span><span class='line'>    .sidebar #sidebar, .ss{
</span><span class='line'>     margin-top: 12px !important;
</span><span class='line'>     overflow-y: scroll !important;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    # C++ code
</span><span class='line'>    #include 
</span><span class='line'>    using namespace std;
</span><span class='line'>
</span><span class='line'>    int main(void)
</span><span class='line'>    {
</span><span class='line'>        cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>&lt;/pre>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Testing Online Code Syntax Highlighters for Blogs (5): Embedding Makefiles to a Web Page]]></title>
      <link href="http://vincenttam.github.io/blog/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-5-embedding-makefiles-to-a-web-page/"/>
    
    <updated>2014-01-08T14:38:00+08:00</updated>
    <id>http://vincenttam.github.io/blog/2014/01/08/testing-online-code-syntax-highlighters-for-blogs-5-embedding-makefiles-to-a-web-page</id>
    
      <content type="html"><![CDATA[<p><em>Note: This post won’t make sense here.  Refer to the
<a href="http://blogue-un.blogspot.hk/2014/01/testing-online-code-syntax-highlighters.html">original post</a>.</em></p>

<!-- more -->

<p>In my previous post titled
<a href="/blog/2013/12/11/fast-compilation-and-execution-of-source-code/"><em>Fast Compilation and Execution of Source Code</em></a>, I included a
<code>makefile</code>.  After I’ve been familiar with <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a>, I
changed the code of the <code>makefile</code> so that the new tool is used.
However, as I’ve written in <a href="http://blogue-un.blogspot.hk/2014/01/testing-code-syntax-highlighters-for.html">my earlier post</a>,
<a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a> has <em>no</em> makefile support, while <a href="http://highlightjs.org/">highlight.js</a>
and <a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a> have that feature.<sup id="fnref:lose1"><a href="#fn:lose1" class="footnote">1</a></sup><sup id="fnref:win2"><a href="#fn:win2" class="footnote">2</a></sup><sup id="fnref:win3"><a href="#fn:win3" class="footnote">3</a></sup></p>

<p><blockquote><p>I think, therefore I am.</p><footer><strong>Réné Descartes (1596–1650)</strong></footer></blockquote></p>

<p>In order to be sure about their claims, I’ve done a test and the
results are as follow.</p>

<h2 id="highlightjs">highlight.js:</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">hello</span><span class="o">:</span> <span class="n">hello</span>.<span class="n">c</span>
</span><span class='line'>	gcc -o hello hello.c
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>	rm -f hello
</span></code></pre></td></tr></table></div></figure></p>

<p>Maybe my <code>makefile</code> is too simple that it lacks some typical features
for the automatic language recognition of <a href="http://highlightjs.org/">highlight.js</a>.  Let’s see
the sample code copied from <a href="http://highlightjs.org/static/test.html">the official demo</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="c"># Makefile&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">BUILDDIR</span>      <span class="o">=</span> _build
</span><span class='line'><span class="nv">EXTRAS</span>       <span class="o">?=</span> <span class="k">$(</span>BUILDDIR<span class="k">)</span>/extras&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.PHONY</span><span class="o">:</span> <span class="n">main</span> <span class="n">clean</span>&lt;/<span class="n">p</span>&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;main</span><span class="o">:</span>
</span><span class='line'>	@echo “Building main facility…”
</span><span class='line'>	build_main <span class="k">$(</span>BUILDDIR<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;clean</span><span class="o">:</span>
</span><span class='line'>	rm -rf <span class="k">$(</span>BUILDDIR<span class="k">)</span>/*
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="google-code-prettify">google-code-prettify</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">hello</span><span class="o">:</span> <span class="n">hello</span>.<span class="n">c</span>
</span><span class='line'>	gcc -o hello hello.c
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>	rm -f hello
</span></code></pre></td></tr></table></div></figure></p>

<p>Let’s see a <em>real</em> one.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="c"># Makefile&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="nv">BUILDDIR</span>      <span class="o">=</span> _build
</span><span class='line'><span class="nv">EXTRAS</span>       <span class="o">?=</span> <span class="k">$(</span>BUILDDIR<span class="k">)</span>/extras&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;.PHONY</span><span class="o">:</span> <span class="n">main</span> <span class="n">clean</span>&lt;/<span class="n">p</span>&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;main</span><span class="o">:</span>
</span><span class='line'>	@echo “Building main facility…”
</span><span class='line'>	build_main <span class="k">$(</span>BUILDDIR<span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;clean</span><span class="o">:</span>
</span><span class='line'>	rm -rf <span class="k">$(</span>BUILDDIR<span class="k">)</span>/*
</span></code></pre></td></tr></table></div></figure></p>

<p>Unluckily, I <em>can’t</em> figure out the way to include a tab, instead of
whitespaces, for makefiles.  Anyways, one who use makefiles will know
that after running <code>make</code> on the first day.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:lose1">

      <p><a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/api/autoloader.html">http://alexgorbatchev.com/SyntaxHighlighter/manual/api/autoloader.html</a> <a href="#fnref:lose1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:win2">
      <p><a href="http://highlightjs.org/static/test.html">http://highlightjs.org/static/test.html</a> <a href="#fnref:win2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:win3">

      <p><a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">http://google-code-prettify.googlecode.com/svn/trunk/README.html</a> <a href="#fnref:win3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
