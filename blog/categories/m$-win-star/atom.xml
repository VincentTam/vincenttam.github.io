<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: M$ Win* | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/m$-win-star/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2015-08-25T11:36:03+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git Object ID Generation (5): Predict ID]]></title>
      <link href="https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id/"/>
    
    <updated>2015-08-11T10:52:56+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/08/11/git-object-id-generation-5-predict-id</id>
    
      <content type="html"><![CDATA[<h2 id="goal">Goal</h2>

<p>The method for getting the Git object ID described in
<a href="/blog/2015/08/07/git-object-id-generation-4-general-trees/">previous post in this series</a> <em>isn’t</em> quick enough since it
consists of <em>several</em> commands.</p>

<h2 id="the-one-line-command">The one-line command</h2>

<h3 id="objects-with-known-git-id">Objects with known Git ID</h3>

<pre class="cliUB"><code>$ (printf "{obj_type} $(git cat-file -s {hash})\0" &amp;&amp; git cat-file {obj_type} {h
ash}) | shasum
</code></pre>

<ul>
  <li><code>{obj_type}</code> can be <code>blob</code>, <code>tree</code>, <code>commit</code> or <code>tag</code>.</li>
  <li><code>{hash}</code> is the SHA-1 hash of the object.</li>
</ul>

<p>Then the output SHA-1 hash should be the <em>same</em> as the input <code>{hash}</code>.</p>

<h3 id="predict-git-object-ids">Predict Git object IDs</h3>
<p>Hence, we can modify the above command to predict the Git object ID of
a <code>{file}</code>.</p>

<pre class="cliUB"><code>$ (printf "{obj_type} $(wc -c {file} | tr -dc '0-9')\0" &amp;&amp; cat {file}) | shasum
</code></pre>

<p>In order to verify the result for files, one can quickly get the blob
ID from Git by <code>git log -1 -p -- {file}</code>.</p>

<h2 id="facts-learnt">Facts learnt</h2>

<h2 id="extract-numbers-from-a-string-in-bash">Extract numbers from a string in bash</h2>

<p>I typed “linux extract number” on Google, and the autocompletion gave
me “from string”.  I finally saw two commands for doing this.</p>

<ol>
  <li><code>sed 's/[^0-9]//g'</code></li>
  <li><code>tr -dc '0-9'</code></li>
</ol>

<p>In my opinion, the later is simpler.  The <code>-c</code> flag takes the
complement of the characters marked by <code>-d</code>.</p>

<h3 id="using-cat-on-m-win">Using cat on M$ Win*</h3>

<p>Using the command in the section “Predict Git object IDs” gives users
a <em>wrong</em> SHA-1 sum.  The reason is that M$ Win* uses <code>\r\n</code> instead
of <code>\n</code> for starting newlines.  This also results in the <em>incorrect</em>
byte count of the files with <code>\r\n</code> as the line terminator in that
command.  Thus, the extra <code>\r</code> needs to be deleted with <code>tr -d '\r'</code>.</p>

<h3 id="using-git-for-win">Using Git for Win*</h3>

<p>For the installed version of Git on M$ Win*, one needs to use
<code>sha1sum</code> instead of <code>shasum</code>.  Otherwise, Git Bash will complain that
it is “Unable to find Digest::SHA or Digest::SHA::PurePerl”.</p>

<h3 id="using-gitportable-on-m-win">Using GitPortable on M$ Win*</h3>

<p>Since one <em>can’t</em> even issue the command <code>sha1sum</code>, use <code>openssl sha1</code>
instead.  (Omitting the trailing <code>1</code> will result in a <em>very different</em>
hexadecimal number.)</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[MikTeX Update]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/09/miktex-update/"/>
    
    <updated>2015-06-09T16:41:12+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/09/miktex-update</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>This morning, I tried typing the chemical symbol of carbon dioxide
(CO<sub>2</sub>) in $\rm \LaTeX$, but I <em>wouldn’t</em> like to use
<code>\mathrm</code> in math mode — first, I changed from text mode to math
mode, then in order to type normal font, I used <code>\mathrm</code> to change it
back to “text mode in math mode”.  I did all of these for a little
subscript only.  Clearly, that’s <em>not</em> an elegant way of typesetting
CO<sub>2</sub>.  It <em>didn’t</em> took me long to find out that what I
needed was the package <a href="https://www.ctan.org/pkg/mhchem"><code>mhchem</code></a>.</p>

<h2 id="problem">Problem</h2>

<p>I tried to <code>\usepackage[version=3]{mhchem}</code>, but Mik$\rm \TeX$
complained that the installed version of <code>l3kernel</code> was too <em>old</em>.  As
a result, I opened the package manager, and called the “Update Wizard”
inside.</p>

<picture class="fancybox" title="No update helper found">
  <source srcset="/images/posts/MikTeXUpdate/no_helper460.png" media="(min-width: 460px)" />
  <img alt="update helper disappered?" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/no_helper300.png" />
</picture>

<p><strong>How can I get the packages updated <em>without</em> manually creating
another folder?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>I first clicked “Repository” and then “Synchronize”, but it loaded
slowly, and I finally got <em>nothing</em>.  Then I tried to “Change package
repository”.  I randomly selected an item in the list of remote
package repository, and clicked “Synchronize” again.  What I saw was
still the same.</p>

<p>Then I decided <em>not</em> to include the <code>mhchem</code> package.  I restored the
<code>\ce{CO2}</code> back to <code>CO2</code>, and then I pressed <code>\ll</code> in
<a href="http://vim-latex.sourceforge.net/">$\rm \LaTeX$-Suite</a>.<sup id="fnref:ll"><a href="#fn:ll" class="footnote">1</a></sup>  Then I received <em>unexpected
errors</em> from the $\rm \LaTeX$ compiler.  I then compiled another
document which contained characters with accents, such as ‘à’, ‘é’,
‘ï’, …  I received the same error message in the quickfix window as
well.  Since it’s gone, I’ve retrieved the message from the
corresponding LOG file.<sup id="fnref:log"><a href="#fn:log" class="footnote">2</a></sup></p>

<pre class="cli"><code>(C:\Temp\MikTeXPortable\tex\latex\fontspec\fontspec.cfg)))
(C:\Temp\MikTeXPortable\tex\generic\babel\babel.sty
Package: babel 2008/07/08 v3.8m The Babel package

*************************************
* Local config file bblopts.cfg used
*
(C:\Temp\MikTeXPortable\tex\latex\00miktex\bblopts.cfg
File: bblopts.cfg 2006/07/31 v1.0 MiKTeX 'babel' configuration
)
(C:\Temp\MikTeXPortable\tex\latex\babel-french\frenchb.ldf
Language: frenchb 2015/05/31 v3.1f French support from the babel system

(C:\Temp\MikTeXPortable\tex\generic\babel\babel.def
File: babel.def 2008/07/08 v3.8m Babel common definitions
\babel@savecnt=\count123
\U@D=\dimen139
)

<span class="err">! Package frenchb.ldf Error: frenchb requires babel v.3.9i.
(frenchb.ldf)                Aborting here.</span>

See the frenchb.ldf package documentation for explanation.
Type  H &lt;return&gt;  for immediate help.
 ...

l.116          {Please upgrade Babel!}

<span class="HLCode">Please upgrade Babel!</span>
</code></pre>

<h2 id="a-nearly-successful-update">A nearly successful update</h2>

<p>From Google, I’ve learnt to “Update MikTeX” directly from the little
icon at the lower right-hand corner of the screen.  Then I directly
clicked the “Next &gt;” button, and Mik$\rm \TeX$ tried connecting the
manually chosen remote.  Unluckily, this <em>failed</em> and I got an error
mesage like <em>Permission denied</em>.  I tried searching “miktex permission
denied” on Google, but I <em>didn’t</em> understand what I’d found.</p>

<h2 id="solution">Solution</h2>

<p>As shown in the screenshot below, I checked the first two radio
buttons so as to get updated packages from the nearest package
repository.</p>

<picture class="fancybox" title="Update MikTeX packages">
  <source srcset="/images/posts/MikTeXUpdate/update513.png" media="(min-width: 513px)" />
  <img alt="update miktex packages" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/update300.png" />
</picture>

<p>After clicking “Next &gt;”, things went smooth luckily.</p>

<picture class="fancybox" title="Downloading updates from remotes">
  <source srcset="/images/posts/MikTeXUpdate/download513.jpg" media="(min-width: 513px)" />
  <img alt="miktex package updates downloading" src="https://vincenttam.github.io/images/posts/MikTeXUpdate/download300.jpg" />
</picture>

<p>After the update had completed, the <code>babel</code> package had been upgraded
from version 3.8 to 3.9i.  With the correct syntax, I could finally
use <code>babel</code> and <code>mhchem</code>.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I often forget the command for optimizing JPEG images.  This evening,
while I was writing this post, I googled “jpegtran command”, and I
issued</p>

<pre class="cli"><code>jpegtran -optimize input.jpg &gt; output.jpg
</code></pre>

<p>after I’d read the command example from <a href="http://junalontherun.com/2009/07/15/optimize-all-jpeg-images-with-jpegtran-utility/">this page</a>.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:ll">

      <p><code>\ll</code> is the default keystroke for compiling a PDF document from
the $\rm \LaTeX$ source code in $\rm \LaTeX$-Suite, which is a
<a href="http://www.vim.org">Vim</a> plugin for writing in $\rm \LaTeX$ efficiently. <a href="#fnref:ll" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:log">

      <p>You may view the complete LOG file <a href="/downloads/1eDoc.log">here</a>. <a href="#fnref:log" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[MS Word Hanged]]></title>
      <link href="https://vincenttam.github.io/blog/2015/06/09/ms-word-hanged/"/>
    
    <updated>2015-06-09T15:59:15+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/06/09/ms-word-hanged</id>
    
      <content type="html"><![CDATA[<h2 id="problem">Problem</h2>

<p>I tried editing in M$ Word, but <em>failed</em>.</p>

<picture class="fancybox" title="M$ Word not responding">
  <source srcset="/images/posts/MSWordHanged/word_hang926.png" media="(min-width: 926px)" />
  <img alt="M$ Word hanged" src="https://vincenttam.github.io/images/posts/MSWordHanged/word_hang250.png" />
</picture>

<h2 id="solution">Solution</h2>

<p>The solution is extremely simple: <em>don’t</em> use M$ Office if it’s too
heavy for your computer — use something more lightweight: a text
editor with a typesetting engine.</p>

<h3 id="choose-your-favourite-editors">Choose your favourite editors</h3>

<p>I use <a href="http://www.vim.org">Vim</a> every day as a text editor.  I tried <a href="http://www.gnu.org/software/emacs/">EMACS</a>. Though I
<em>can’t</em> remember two sets of keystrokes, the latter is still useful
when you need to browse <code>info</code> pages on *nix.</p>

<h3 id="typesetting-engines">Typesetting engines</h3>

<ol>
  <li>
    <p><a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a> and <a href="http://pandoc.org/">pandoc</a></p>

    <p>For simple documents which have <em>little</em> variation in styles, such
 as blog entries and some homework essays.</p>
  </li>
  <li>
    <p>$\rm \LaTeX$</p>

    <p>For more complicated documents like lab report, documents
 containing math expressions, etc.</p>
  </li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Installed Jpegtran From Source With MinGW32]]></title>
      <link href="https://vincenttam.github.io/blog/2015/03/10/installed-jpegtran-from-source-with-mingw32/"/>
    
    <updated>2015-03-10T07:14:28+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/03/10/installed-jpegtran-from-source-with-mingw32</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>To reduce the bandwidth usage while viewing pictures in this blog,
I’ve already run <a href="http://optipng.sourceforge.net/">OptiPNG</a> on PNG pictures in my new
posts.<sup id="fnref:pp_pagespeed"><a href="#fn:pp_pagespeed" class="footnote">1</a></sup>  For JPEG files optimization, Google developers
suggest <a href="http://freshmeat.net/projects/jpegoptim/">jpegoptim</a> or <a href="http://jpegclub.org/">jpegtran</a>.<sup id="fnref:goo_dev"><a href="#fn:goo_dev" class="footnote">2</a></sup>  Since the first tool
<em>isn’t</em> available for M$ Win<em> 7, I installed the second one.  I
*couldn’t</em> find a compiled version of the software, so I had to
compile it from source code.</p>

<h2 id="problem">Problem</h2>

<p>Since there’re <em>too many</em> words following the instructions for a *nix
machine below the table of contents in <code>install.txt</code>, I tried
installing it with <a href="https://www.gnu.org/software/make/">Make</a> like *nix, so that the installation could
be finished in four simple commands: <code>./configure</code>, <code>make</code>, <code>make
test</code> and <code>make install</code>.  The output of the first command was
fine.<sup id="fnref:config"><a href="#fn:config" class="footnote">3</a></sup></p>

<p>Unluckily, I got trouble when I moved on to the next command.</p>

<pre class="cli"><code>$ make
c:/Temp/gnuwin32/bin/make  all-am
c:/Temp/gnuwin32/bin/make: Interrupt/Exception caught (code = 0xc00000fd, addr =
 0x4227d3)
make: *** [all] Error 255
</code></pre>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I googled “make interrupt/exception caught” and read a Super User
question at the top of the list of search results.<sup id="fnref:su401808"><a href="#fn:su401808" class="footnote">4</a></sup>
Luckily, the <code>code</code> and <code>addr</code> in the chosen response matched what I’d
got above.  I therefore jumped to the last paragraph and added the
line at the top of the generated <code>Makefile</code>.</p>

<pre><code>SHELL=C:/Windows/System32/cmd.exe
</code></pre>

<p>I then tried issuing <code>make</code> for another time, and <em>failed</em> again.</p>

<pre class="cli"><code>$ make
make  all-am
make[1]: Entering directory `C:/Users/Owner/Downloads/jpeg-9a'
"  CC      " jaricom.lo;C:/Windows/System32/cmd.exe ./libtool --silent --tag=CC
  --mode=compile gcc -std=gnu99 -DHAVE_CONFIG_H -I.     -g -O2 -MT jaricom.lo -M
D -MP -MF .deps/jaricom.Tpo -c -o jaricom.lo jaricom.c
mv: cannot stat '.deps/jaricom.Tpo': No such file or directory
make[1]: *** [jaricom.lo] Error 1
make[1]: Leaving directory `C:/Users/Owner/Downloads/jpeg-9a'
make: *** [all] Error 2
</code></pre>

<p>I tried doing the same thing in M$’s Command Prompt, but got the same
errors.  I also tried following the second answer and adding <code>PATH=</code>
below the first line of <code>Makefile</code>, and Make still threw errors and
said that <code>rm</code> <em>wasn’t</em> an internal or external command.  This caused
me to give up on this answer.</p>

<p>I learnt from past experience and performed a <code>make clean</code>.  This
<em>failed</em> unexpectedly.  I copied some words in the error message and
googled “make clean windows list is not recognized as an internal or
external command”, and viewed some irrelevant websites.</p>

<p>I then re-read the first answer to that Super User question, and found
the cause of the problem.  I quickly saved the original <code>PATH</code>
environment varible in Control Panel into a TXT file, duplicate that
TXT file, and use gVim to replace all instances of <code>Program Files
(x86)</code>, <code>Program Files</code> and <code>Intel(R) Management Engine Components</code> by
three different strings <em>without</em> ‘(‘ and ‘)’, for example,
<code>PROGRA~1</code>, <code>PROGRA~2</code> and <code>intel~1</code>.</p>

<p>I re-ran <code>make</code> in <em>both</em> Git Bash and M$ Command Prompt, and
received the <em>same</em> error again.  I suddenly realized that I should
try <a href="http://www.mingw.org/wiki/msys">MSYS</a>, the shell released by the <em>same</em> group of developers of
MinGW.  Finally, the remaining three commands worked well.<sup id="fnref:msys"><a href="#fn:msys" class="footnote">5</a></sup></p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>I tried googling sample jpegtran commands, but the search <em>wasn’t</em>
effective.  From this, I’ve learnt to read the official README and
other help files accompanying the source files.</p>

<p>I used <code>&gt;</code> in jpegtran commands, and strange images were produced.  I
once thought that an compilation error occured.  However, the test
images <code>test*.*</code> in the directory which contained the source files and
compiled binary files were OK.  By looking at the “Date Modified” in a
file browser, I guessed that the test images generated by the program
were made by <code>make test</code>.  I browsed <code>Makefile</code> again, and finally got
the correct syntax for optimizing JPEG images.</p>

<p>Finally, I think that the new lossless scaling feature works in my
compiled version of jpegtran, though I <em>can’t</em> see the output
pictures.</p>

<hr />

<div id="config_o" class="noscr">
  <h3 id="bashs-output-for-configure">Bash’s output for ./configure</h3>

  <p>Luckily, this command worked on my laptop.</p>

  <pre class="cli"><code>$ ./configure
checking build system type... i686-pc-mingw32
checking host system type... i686-pc-mingw32
checking target system type... i686-pc-mingw32
checking for a BSD-compatible install... ./install-sh -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking for style of include used by make... GNU
checking dependency style of gcc... gcc3
checking for gcc option to accept ISO C99... -std=gnu99
checking for gcc -std=gnu99 option to accept ISO Standard C... (cached) -std=gnu
99
checking how to run the C preprocessor... gcc -std=gnu99 -E
checking whether make sets $(MAKE)... (cached) yes
checking whether ln -s works... no, using cp -pR
checking for ar... ar
checking the archiver (ar) interface... ar
checking if LD -Wl,--version-script works... yes
checking for function prototypes... yes
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking stddef.h usability... yes
checking stddef.h presence... yes
checking for stddef.h... yes
checking for stdlib.h... (cached) yes
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking for string.h... (cached) yes
checking for size_t... yes
checking for type unsigned char... yes
checking for type unsigned short... yes
checking for type void... yes
checking for an ANSI C-conforming const... yes
checking for inline... __inline__
checking for broken incomplete types... ok
checking for short external names... ok
checking to see if char is signed... yes
checking to see if right shift is signed... yes
checking to see if fopen accepts b spec... yes
checking for as... as
checking for dlltool... dlltool
checking for objdump... objdump
checking how to print strings... printf
checking for a sed that does not truncate output... /bin/sed
checking for fgrep... /bin/grep -F
checking for ld used by gcc -std=gnu99... c:/mingw/mingw32/bin/ld.exe
checking if the linker (c:/mingw/mingw32/bin/ld.exe) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /c/MinGW/bin/nm
checking the name lister (/c/MinGW/bin/nm) interface... BSD nm
checking the maximum length of command line arguments... 8192
checking whether the shell understands some XSI constructs... yes
checking whether the shell understands "+="... yes
checking how to convert i686-pc-mingw32 file names to i686-pc-mingw32 format...
func_convert_file_msys_to_w32
checking how to convert i686-pc-mingw32 file names to toolchain format... func_c
onvert_file_msys_to_w32
checking for c:/mingw/mingw32/bin/ld.exe option to reload object files... -r
checking for objdump... (cached) objdump
checking how to recognize dependent libraries... file_magic ^x86 archive import|
^x86 DLL
checking for dlltool... (cached) dlltool
checking how to associate runtime and link libraries... func_cygming_dll_for_imp
lib
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /c/MinGW/bin/nm output from gcc -std=gnu99 object... o
k
checking for sysroot... no
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... no
checking for objdir... .libs
checking if gcc -std=gnu99 supports -fno-rtti -fno-exceptions... no
checking for gcc -std=gnu99 option to produce PIC... -DDLL_EXPORT -DPIC
checking if gcc -std=gnu99 PIC flag -DDLL_EXPORT -DPIC works... yes
checking if gcc -std=gnu99 static flag -static works... yes
checking if gcc -std=gnu99 supports -c -o file.o... yes
checking if gcc -std=gnu99 supports -c -o file.o... (cached) yes
checking whether the gcc -std=gnu99 linker (c:/mingw/mingw32/bin/ld.exe) support
s shared libraries... yes
checking whether -lc should be explicitly linked in... yes
checking dynamic linker characteristics... Win32 ld.exe
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking libjpeg version number... 10:0:1
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating jconfig.h
config.status: executing depfiles commands
config.status: executing libtool commands
</code></pre>
</div>

<div id="msys_o" class="noscr">
  <h3 id="switched-to-msys">Switched to MSYS</h3>

  <p>The installation was successful in MSYS.</p>

  <pre class="cli"><code>$ make clean
rm -f cjpeg.exe djpeg.exe jpegtran.exe rdjpgcom.exe wrjpgcom.exe
rm -f cjpeg djpeg jpegtran rdjpgcom wrjpgcom
test -z "testout.ppm testout.bmp testout.jpg testoutp.ppm testoutp.jpg testoutt.
jpg" || rm -f testout.ppm testout.bmp testout.jpg testoutp.ppm testoutp.jpg test
outt.jpg
test -z "libjpeg.la" || rm -f libjpeg.la
rm -f ./so_locations
rm -rf .libs _libs
rm -f *.o
rm -f *.lo

$ make
make  all-am
make[1]: Entering directory `/c/Users/Owner/Downloads/jpeg-9a'
  CC       jaricom.lo
  CC       jcapimin.lo
  CC       jcapistd.lo
  CC       jcarith.lo
  CC       jccoefct.lo
  CC       jccolor.lo
  CC       jcdctmgr.lo
  CC       jchuff.lo
  CC       jcinit.lo
  CC       jcmainct.lo
  CC       jcmarker.lo
  CC       jcmaster.lo
  CC       jcomapi.lo
  CC       jcparam.lo
  CC       jcprepct.lo
  CC       jcsample.lo
  CC       jctrans.lo
  CC       jdapimin.lo
  CC       jdapistd.lo
  CC       jdarith.lo
  CC       jdatadst.lo
  CC       jdatasrc.lo
  CC       jdcoefct.lo
  CC       jdcolor.lo
  CC       jddctmgr.lo
  CC       jdhuff.lo
  CC       jdinput.lo
  CC       jdmainct.lo
  CC       jdmarker.lo
  CC       jdmaster.lo
  CC       jdmerge.lo
  CC       jdpostct.lo
  CC       jdsample.lo
  CC       jdtrans.lo
  CC       jerror.lo
  CC       jfdctflt.lo
  CC       jfdctfst.lo
  CC       jfdctint.lo
  CC       jidctflt.lo
  CC       jidctfst.lo
  CC       jidctint.lo
  CC       jquant1.lo
  CC       jquant2.lo
  CC       jutils.lo
  CC       jmemmgr.lo
  CC       jmemnobs.lo
  CCLD     libjpeg.la
  CC       cjpeg.o
  CC       rdppm.o
  CC       rdgif.o
  CC       rdtarga.o
  CC       rdrle.o
  CC       rdbmp.o
  CC       rdswitch.o
  CC       cdjpeg.o
  CCLD     cjpeg.exe
  CC       djpeg.o
  CC       wrppm.o
  CC       wrgif.o
  CC       wrtarga.o
  CC       wrrle.o
  CC       wrbmp.o
  CC       rdcolmap.o
  CCLD     djpeg.exe
  CC       jpegtran.o
  CC       transupp.o
  CCLD     jpegtran.exe
  CC       rdjpgcom.o
  CCLD     rdjpgcom.exe
  CC       wrjpgcom.o

$ make test
rm -f testout*
./djpeg -dct int -ppm -outfile testout.ppm  ./testorig.jpg
./djpeg -dct int -bmp -colors 256 -outfile testout.bmp  ./testorig.jpg
./cjpeg -dct int -outfile testout.jpg  ./testimg.ppm
./djpeg -dct int -ppm -outfile testoutp.ppm ./testprog.jpg
./cjpeg -dct int -progressive -opt -outfile testoutp.jpg ./testimg.ppm
./jpegtran -outfile testoutt.jpg ./testprog.jpg
cmp ./testimg.ppm testout.ppm
cmp ./testimg.bmp testout.bmp
cmp ./testimg.jpg testout.jpg
cmp ./testimg.ppm testoutp.ppm
cmp ./testimgp.jpg testoutp.jpg
cmp ./testorig.jpg testoutt.jpg

$ make install
make[1]: Entering directory `/c/Users/Owner/Downloads/jpeg-9a'
 /bin/mkdir -p '/usr/local/lib'
 /bin/sh ./libtool   --mode=install ./install-sh -c   libjpeg.la '/usr/local/lib
'
libtool: install: ./install-sh -c .libs/libjpeg.dll.a /usr/local/lib/libjpeg.dll
.a
libtool: install: base_file=`basename libjpeg.la`
libtool: install:  dlpath=`/bin/sh 2&gt;&amp;1 -c '. .libs/'libjpeg.la'i; echo libjpeg-
9.dll'`
libtool: install:  dldir=/usr/local/lib/`dirname ../bin/libjpeg-9.dll`
libtool: install:  test -d /usr/local/lib/../bin || mkdir -p /usr/local/lib/../b
in
libtool: install:  ./install-sh -c .libs/libjpeg-9.dll /usr/local/lib/../bin/lib
jpeg-9.dll
libtool: install:  chmod a+x /usr/local/lib/../bin/libjpeg-9.dll
libtool: install:  if test -n '' &amp;&amp; test -n 'strip --strip-unneeded'; then eval
'strip --strip-unneeded /usr/local/lib/../bin/libjpeg-9.dll' || exit 0; fi
libtool: install: ./install-sh -c .libs/libjpeg.lai /usr/local/lib/libjpeg.la
libtool: install: ./install-sh -c .libs/libjpeg.a /usr/local/lib/libjpeg.a
libtool: install: chmod 644 /usr/local/lib/libjpeg.a
libtool: install: ranlib /usr/local/lib/libjpeg.a
 /bin/mkdir -p '/usr/local/bin'
  /bin/sh ./libtool   --mode=install ./install-sh -c cjpeg.exe djpeg.exe jpegtra
n.exe rdjpgcom.exe wrjpgcom.exe '/usr/local/bin'
libtool: install: ./install-sh -c .libs/cjpeg.exe /usr/local/bin/cjpeg.exe
libtool: install: ./install-sh -c .libs/djpeg.exe /usr/local/bin/djpeg.exe
libtool: install: ./install-sh -c .libs/jpegtran.exe /usr/local/bin/jpegtran.exe

libtool: install: ./install-sh -c .libs/rdjpgcom.exe /usr/local/bin/rdjpgcom.exe

libtool: install: ./install-sh -c .libs/wrjpgcom.exe /usr/local/bin/wrjpgcom.exe

/bin/sh /c/Users/Owner/Downloads/jpeg-9a/install-sh -d /usr/local/include
./install-sh -c -m 644 jconfig.h /usr/local/include/jconfig.h
 /bin/mkdir -p '/usr/local/include'
 ./install-sh -c -m 644 jerror.h jmorecfg.h jpeglib.h '/usr/local/include'
 /bin/mkdir -p '/usr/local/share/man/man1'
 ./install-sh -c -m 644 cjpeg.1 djpeg.1 jpegtran.1 rdjpgcom.1 wrjpgcom.1 '/usr/l
ocal/share/man/man1'
make[1]: Leaving directory `/c/Users/Owner/Downloads/jpeg-9a'
</code></pre>
</div>
<div class="footnotes">
  <ol>
    <li id="fn:pp_pagespeed">

      <p>See	<a href="/blog/2014/12/29/octopress-pagespeed-jquery-and-fancybox/"><em>Octopress, PageSpeed, jQuery and fancyBox</em></a>
in Blog 1 for details. <a href="#fnref:pp_pagespeed" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:goo_dev">
      <p><a href="https://developers.google.com/speed/docs/insights/OptimizeImages"><em>Optimize images</em></a> in Google Pagespeed rules. <a href="#fnref:goo_dev" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:config">
      <p>Click <a href="#config_o" class="cliwide">here</a> to see the bash output. <a href="#fnref:config" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:su401808">

      <p><a href="http://superuser.com/a/401808"><em>make: Interrupt/Exception caught</em></a> in Super User. <a href="#fnref:su401808" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:msys">
      <p>Click <a href="#msys_o" class="cliwide">here</a> to see the bash output. <a href="#fnref:msys" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Another BoD on Win* 7]]></title>
      <link href="https://vincenttam.github.io/blog/2015/02/28/another-bod-on-win-star-7/"/>
    
    <updated>2015-02-28T19:01:39+08:00</updated>
    <id>https://vincenttam.github.io/blog/2015/02/28/another-bod-on-win-star-7</id>
    
      <content type="html"><![CDATA[<p>Yesterday afternoon, I switched on a public computer.  After the
desktop had been loaded, a dialog box popped up in the middle of the
screen.</p>

<picture class="fancybox" title="Recoverd from a BoD">
  <source srcset="/images/posts/BoD/fig1.png" media="(min-width: 450px)" />
  <img alt="got a BoD" src="https://vincenttam.github.io/images/posts/BoD/fig1_s.png" />
</picture>

<p>I compared this dialog box with the one that I saw on my laptap a
month ago.</p>

<picture class="fancybox" title="Recoverd from a BoD">
  <source srcset="/images/posts/BoD/fig.png" media="(min-width: 370px)" />
  <img alt="got a BoD" src="https://vincenttam.github.io/images/posts/BoD/fig_s.png" />
</picture>

<p>The difference between these two dialog boxes is the button “Check for
solution” on the left of the “Close” button.  I <em>don’t</em> know whether
this is a difference between M$ Win* 7 Home Edition and Enterprise.</p>
]]></content>
    
  </entry>
  
</feed>
