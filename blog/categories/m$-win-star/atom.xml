<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: M$ Win* | Blog 1]]></title>
  <link href="https://vincenttam.github.io/blog/categories/m$-win-star/atom.xml" rel="self"/>
  <link href="https://vincenttam.github.io/"/>
  <updated>2016-02-22T16:46:40+08:00</updated>
  <id>https://vincenttam.github.io/</id>
  <author>
    <name><![CDATA[Vincent Tam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2/"/>
    
    <updated>2016-02-22T14:32:04+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-2</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I had been using <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> to manage plugin.  When it comes to
keeping the plugins up-to-date, <a href="/blog/2014/10/11/update-vim-plugins-managed-by-pathogen-dot-vim/">I used a for-loop</a>.</p>

<h2 id="problem">Problem</h2>

<p>I would like to change it to <a href="https://github.com/VundleVim/Vundle.vim/">Vundle</a> since I <em>didn’t</em> know how to
update the helptags after merging the commits from GitHub.  Therefore,
I followed the installation guide of Vundle.  However, when I started
updating, I got the following error.</p>

<pre class="cli"><code>Processing 'tpope/vim-fugitive'
Error detected while processing function vundle#installer#new..&lt;SNR&gt;96_process..
vundle#installer#run..vundle#installer#install..&lt;SNR&gt;96_sync..&lt;SNR&gt;96_make_sync_
command..&lt;SNR&gt;96_get_current_origin_url..&lt;SNR&gt;96_system:
line    1:
E484: Can't open file C:/Temp/PortableApps/gVimPortable/Data/Temp/VIo985B.tmp
Error detected while processing function vundle#installer#new..&lt;SNR&gt;96_process..
vundle#installer#run..vundle#installer#install..&lt;SNR&gt;96_sync:
-- More -- SPACE/d/j: screen/page/line down, b/u/k: up, q: quit
</code></pre>

<p><strong>How can I get the Vim plugin updates?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>Google <em>didn’t</em> help this time.  <em>Not</em> knowing what to do, I ran a
simple command <code>ls</code>, and this <em>failed</em>.</p>

<pre class="cli"><code>C:\Program Files\Git\usr\bin\bash -c "ls"
'C:\Program' is not recognized as an internal or external command,
operable program or batch file.
shell returned 1
Hit any key to close this window...
</code></pre>

<p>From the above output, one knows that the cause of this unexpected
failure is the whitespace character in the path of Git Bash.  As a
result, I searched “vim ‘C:\Program’ is not recognized as an internal
or external” in Google.  Then I realised that it was
<a href="http://vi.stackexchange.com/a/2424">a bug in Vim</a>.  Since I <em>didn’t</em> want to spend time setting
up GVim again, I stick to GVim Portable, whose runpath is <em>different</em>
from what many developers of Vim plugins, who use *nix, expect.</p>

<h2 id="solution">Solution</h2>

<p>Invoke GVim from Command Prompt,Start Menu or desktop icon instead of
Git Bash because the <code>shell</code> option will then be <code>cmd.exe</code>, whose path
contains <em>no</em> spaces.  Then everything should be fine, <em>except the
line breaks</em>.</p>

<h2 id="remarks">Remarks</h2>

<p>Some developers include a <code>.gitignore</code> file in their Vim plugins to
ignore files like <code>docs/tags</code>, while some <em>don’t</em>.  IMHO, it’s better
to have one.</p>

<p>One good point of free software is that users can interact with
developers to report and discuss the problems, or even share their
code to improve the software, for example, <a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a> pull
request <a href="https://github.com/tangledhelix/vim-octopress/pull/11">#11</a>.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Rake Deploy Fatal Error]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/rake-deploy-fatal-error/"/>
    
    <updated>2016-02-22T12:16:16+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/rake-deploy-fatal-error</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I had finished writing <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">my previous post</a>.  In <code>rake preview</code>, I
got the desired output.  Then, the next step is to commit the changes
and to deploy the generated contents to GitHub Pages.</p>

<h2 id="problem">Problem</h2>

<p>A large block of red text appeared after I ran <code>rake deploy</code>.  The
commit on the <code>master</code> branch was <em>unsuccessful</em>.</p>

<pre class="cli"><code>$ rake deploy
(in C:/github/vincenttam.github.io)
cp -r source/fancybox/.gitattributes public/fancybox/.gitattributes
cd _deploy
Already up-to-date.
cd -
rm -rf _deploy/404.html
...
rm -rf _deploy/stylesheets
cp -r public/. _deploy
cd _deploy
fatal: CRLF would be replaced by LF in fancybox/README.md.
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
        modified:   404.html
        modified:   about/index.html
        ...

Untracked files:
        blog/2016/02/21/
        blog/2016/02/22/
        downloads/code/miktex-update2/
        images/posts/MikTeXUpdate2/
        posts/31/

no changes added to commit
Everything up-to-date
cd -
## Set the codepage to 65001 for Windows machines
## Deploying branch to Github Pages
## Pulling any updates from Github Pages

## Copying public to _deploy

## Committing: Site updated at 2016-02-22 03:37:22 UTC

## Pushing generated _deploy website

## Github Pages deploy complete
</code></pre>

<p>Even though the system said that the deploy was “complete”, in fact,
it had <em>never</em> been carried out.</p>

<p><strong>How can I update my blog on GitHub Pages?</strong></p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>In the above error output, it took me a minute to find out <em>at which
stage</em> the deploy had failed: the line starting with “fatal”.
Therefore, I stripped off all <code>\r</code> from <code>source/fancybox/README.md</code>.
I tried deploying it again, and it <em>failed</em>—the <em>same</em> “fatal” error
appeared for <em>another file</em>.  I tried committing the change for
<code>source/fancybox/README.md</code>, but I <em>couldn’t</em> commit this.  I tried
googling “fatal crlf would be replaced by lf”, and clicked on
<a href="http://stackoverflow.com/q/20168639">the first search result</a>.  The answers in this Stack
Overflow question suggested that the option <code>core.autocrlf</code> should be
configured to <code>false</code>.  To be safe, I
<a href="https://github.com/VundleVim/Vundle.vim/wiki#win1">turned on <code>core.safecrlf</code></a>.<sup id="fnref:2"><a href="#fn:2" class="footnote">1</a></sup></p>

<p>When I <a href="/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/">updated Git for Windows</a>, I chose “<strong>Checkout
Windows-style, commit Unix-style line endings</strong>” (the <em>first</em> radio
button), which the Git Setup dialog recommended.</p>

<picture class="fancybox" title="Git line conversion configuration">
  <source srcset="/images/posts/GitUpdate/autocrlf.png" media="(min-width: 505px)" />
  <img alt="Git line conversion configuration" width="300" src="https://vincenttam.github.io/images/posts/GitUpdate/autocrlf.png" />
</picture>
<p><small>Picture from <a href="http://i.stack.imgur.com/vPJCI.png">here</a>.</small></p>

<p>I love using bash utilities and (G)Vim.  In Git Bash, the former gives
LF line terminators, while the later gives CRLF.  Therefore, I decided
to <code>set fileformat=unix</code> in my VIMRC.<sup id="fnref:1"><a href="#fn:1" class="footnote">2</a></sup>  However, this <em>doesn’t</em>
unify the EOL of files in the local repository.</p>

<p>As I clone Git repositories, the line terminators are automatically
converted to CRLF.</p>

<h2 id="solution">Solution</h2>

<p><em>Completely</em> get rid of carriage returns <code>\r</code> in Git repositories!</p>

<p>To see how many files had CRLF line terminators, I tried using <code>grep</code>
in Git Bash, but <a href="http://stackoverflow.com/a/73886">this answer on Stack Overflow</a> <em>didn’t</em>
work.</p>

<pre class="cli"><code>$ find source -type f -exec grep -Iq . {} \; -and -exec dos2unix {} \;
dos2unix: converting file source/404.md to Unix format...
dos2unix: converting file source/about/index.markdown to Unix format...
dos2unix: converting file source/about/mybyobuconf.markdown to Unix format...
...
dos2unix: converting file source/_posts/2016-02-22-git-for-windows-curl-with-vun
dle-1.markdown~ to Unix format...
dos2unix: converting file source/_posts/2016-02-22-testing-octopress-and-ruby-2-
dot-0-on-windows-7-3.markdown to Unix format...
dos2unix: converting file source/_posts/2016-02-22-testing-octopress-and-ruby-2-
dot-0-on-windows-7-3.markdown~ to Unix format...
</code></pre>

<p>For the explanation of the above command, you may refer to
<a href="/blog/2015/08/22/used-more-bash-utilities/"><em>Used More Bash Utilities</em></a>.</p>

<p>After that, since <code>core.autocrlf</code> has been set to <code>false</code>, <code>git
checkout</code> no longer inserts <code>\r</code> into the files in the local
repository.  Therefore, even though <code>git status</code> reports unstaged
changes, running <code>git checkout -- source</code> <em>won’t</em> hurt the files.  I
can finally deploy the contents to GitHub Pages.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p><em>Never</em> run <code>rake generate</code> nor <code>rake preview</code> in <code>cmd.exe</code>!  Run this
in Git Bash, or other shells that <em>don’t</em> give you carriage returns.</p>

<p>When a new post is created with <code>rake new_post['...']</code> in either Git
Bash or Command Prompt, the created post has DOS line endings.
Therefore, we need to take extra care with this by using <code>dos2unix</code> in
Git Bash.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:2">

      <p>Refer to <a href="http://stackoverflow.com/a/1547108">this Stack Overflow question</a> for my reason
of enabling <code>core.safecrlf</code>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>Refer to line 100 of my <code>_vimrc</code> at version <a href="https://goo.gl/iETw5d">07ab878</a>. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">

      <p>You may verify this by comparing the line</p>

      <pre class="cli"><code>## Committing: Site updated at 2016-02-22 03:37:22 UTC
</code></pre>

      <p>in the above error message in the “Problem” section with commit
<a href="https://github.com/VincentTam/vincenttam.github.io/commits/748fbd7">748fbd7</a> on GitHub.  Due to the growth of this site, each commit
on the <code>master</code> branch now involves over 400 files and thousands
of lines of insertion and deletion.  If I provide a direct link to
the commit, it will take too long to load the page.  Therefore, I
give the commit history at a particular node instead. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Git for Windows, Curl, Gist.vim With Vundle (1)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1/"/>
    
    <updated>2016-02-22T10:23:53+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/git-for-windows-curl-gist-dot-vim-with-vundle-1</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I installed msysgit 1.9.0, and added its bash utilities to <code>PATH</code>.</p>

<h2 id="problem">Problem</h2>

<p>I attempted to open an HTML file with <code>curl</code>.  However, I got the
following error.</p>

<pre class="cli"><code>C:\Windows\system32\cmd.exe /c (curl 'http://www.vim.org/index.html' -o 'C:/Temp
/PortableApps/gVimPortable/Data/Temp/VIA1ED5.html')
curl: (1) Protocol "'http" not supported or disabled in libcurl
shell returned 1
Hit any key to close this window...
</code></pre>

<h2 id="discussion">Discussion</h2>

<p>In the first line of the code block, <code>cmd.exe</code> with option <code>/c</code> ran
the command in the parenthesis <code>()</code>.  I copied the command inside <code>()</code>
and ran it in <code>cmd.exe</code>, and the error was reproduced.</p>

<p>It’s easy to find the cause of the problem.  I typed “curl protocol”
on the Google search web page, and the rest of the error message
appeared in the list of suggestions.  In the first search result,
which was <a href="http://stackoverflow.com/q/6684235">a Stack Overflow question</a>, I learnt why this
error occurred from the first answer—in the Command Prompt, one
needs to use double quotes <code>""</code> instead of single quotes <code>''</code>.  In Git
Bash, this <em>doesn’t</em> matter.</p>

<p>Since <code>curl</code> was bundled with msysgit, I suspected that the installed
version of Git was too old.  I then upgraded it.</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<ol>
  <li>For a shell program (e.g. Command Prompt, bash), the option <code>-c</code>
(or <code>/c</code>) stands for “command”, and what’s left is the command to
be run.</li>
  <li><code>curl</code> will grab content from the input URL and display it as
standard output.  To save the downloaded content in a file, the
flag <code>-o</code>, which means “output”, can be used.</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Testing Octopress and Ruby 2.0 on Windows 7 (3)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/22/testing-octopress-and-ruby-2-dot-0-on-windows-7-3/"/>
    
    <updated>2016-02-22T01:05:04+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/22/testing-octopress-and-ruby-2-dot-0-on-windows-7-3</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I was writing <a href="/blog/2016/02/21/miktex-update-2/">my previous post</a>, which was about my recent
Mik$\rm \TeX$ update.</p>

<h2 id="problem">Problem</h2>

<p>After having finished it, I tried <code>rake generate</code>, and got results
similar to the first picture of <a href="blog/2014/09/02/testing-octopress-and-ruby-2-dot-0-on-windows-7-1/">the first post in this series</a>.</p>

<p>Last time, I solved this problem by creating the batch file
<code>python2.bat</code> in the folder where Python had been installed (i.e.
<code>C:\Python27</code>).  This time, the BAT file is already there.  In (Git)
CMD, both <code>which python</code> and <code>which python2</code> are fine.  However, in
Git bash, I run into trouble.</p>

<pre class="cli"><code>Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ which python
/c/Python27/python

Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ which python2
which: no python2 in (/c/Users/Owner/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/b
in:/mingw64/bin:/usr/bin:/c/Users/Owner/bin:/c/ProgramData/Oracle/Java/javapath:
/c/Perl/site/bin:/c/Perl/bin:/c/Program Files (x86)/Intel/iCLS Client:/c/Program
 Files/Intel/iCLS Client:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem
:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Program Files (x86)/Intel/OpenCL 
SDK/2.0/bin/x86:/c/Program Files (x86)/Intel/OpenCL SDK/2.0/bin/x64:/c/Program F
iles (x86)/Common Files/Roxio Shared/DLLShared:/c/Program Files (x86)/Common Fil
es/Roxio Shared/OEM/DLLShared:/c/Program Files (x86)/Common Files/Roxio Shared/O
EM/DLLShared:/c/Program Files (x86)/Common Files/Roxio Shared/OEM/12.0/DLLShared
:/c/Program Files (x86)/Roxio 2010/OEM/AudioCore:/c/Program Files/Intel/Intel(R)
 Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Eng
ine Components/IPT:/c/Program Files (x86)/Intel/Intel(R) Management Engine Compo
nents/DAL:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT
:/c/Temp/MikTeXPortable/miktex/bin:/c/MinGW/bin:/c/Temp/gnuwin32/bin:/c/ctags58:
/c/Temp/PortableApps/gVimPortable:/c/cscope-15.8a-win32rev1-static:/c/Python27:/
c/Ruby200-x64/bin:/c/Temp/pdf2svg-0.2.2:/c/Program Files (x86)/Skype/Phone:/cmd:
/usr/bin/vendor_perl:/usr/bin/core_perl)

Owner@Owner-PC MINGW64 /c/github/vincenttam.github.io (source)
$ cd /c/Python27/

Owner@Owner-PC MINGW64 /c/Python27
$ ls
DLLs/     Lib/         NEWS.txt     pythonw.exe*  Tools/
Doc/      libs/        python.exe*  README.txt    w9xpopen.exe*
include/  LICENSE.txt  python2.bat  tcl/
</code></pre>

<p>Even though the generated contents can still be locally previewed,
<strong>how can I get rid of this error message?</strong></p>

<!-- more -->

<h2 id="solution">Solution</h2>

<p>I googled “which no python2 in” (<em>with surrounding double quotes</em>),
and found one line in the post <a href="http://nathanielstory.com/2013/12/28/jekyll-on-windows-with-cygwin.html"><em>Jekyll on Windows With Cygwin</em></a>
written by Nathan Story very useful.  While reading his post, I
<em>didn’t</em> read it from the start.  Instead, I just searched for
“python2”, and quickly saw the <code>ln</code> command.</p>

<p>The file type of <code>python2</code> created by <code>ln</code> was <em>different</em> from what I
expected: <code>ls -l</code> <em>didn’t</em> show that <code>python2</code> was a symbolic link,
and <code>file</code> even said that it was an executable file.</p>

<pre class="cli"><code>Owner@Owner-PC MINGW64 /c/Python27
$ ln -s python.exe python2

Owner@Owner-PC MINGW64 /c/Python27
$ ls -l
total 677
drwxr-xr-x 1 Owner 197121      0 May 25  2014 DLLs/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 Doc/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 include/
drwxr-xr-x 1 Owner 197121      0 Oct  9  2014 Lib/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 libs/
-rw-r--r-- 1 Owner 197121  38573 Nov 10  2013 LICENSE.txt
-rw-r--r-- 1 Owner 197121 375685 Nov 10  2013 NEWS.txt
-rwxr-xr-x 1 Owner 197121  26624 Nov 10  2013 python.exe*
-rwxr-xr-x 1 Owner 197121  26624 Nov 10  2013 python2*
-rw-r--r-- 1 Owner 197121     22 Aug 31  2014 python2.bat
-rwxr-xr-x 1 Owner 197121  27136 Nov 10  2013 pythonw.exe*
-rw-r--r-- 1 Owner 197121  55208 Oct 27  2013 README.txt
drwxr-xr-x 1 Owner 197121      0 May 25  2014 tcl/
drwxr-xr-x 1 Owner 197121      0 May 25  2014 Tools/
-rwxr-xr-x 1 Owner 197121  49664 Nov 10  2013 w9xpopen.exe*

Owner@Owner-PC MINGW64 /c/Python27
$ file python2
python2: PE32 executable (console) Intel 80386, for MS Windows
</code></pre>

<p>Finally, <code>rake</code> <em>doesn’t</em> give me strange output.</p>

]]></content>
    
  </entry>
  
  <entry>
    
      <title type="html"><![CDATA[Mik$\rm \TeX$ Update (2)]]></title>
      <link href="https://vincenttam.github.io/blog/2016/02/21/miktex-update-2/"/>
    
    <updated>2016-02-21T22:37:20+08:00</updated>
    <id>https://vincenttam.github.io/blog/2016/02/21/miktex-update-2</id>
    
      <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I need to write something in $\rm \LaTeX$.</p>

<h2 id="problem">Problem</h2>

<p>I <em>can’t</em> get any update by clicking “Update Mik$\rm \TeX$” in the
icon triggered by <code>miktex-portable.cmd</code>.  I faced the same problem as
<a href="http://tex.stackexchange.com/q/251242">rantrave’s</a>.</p>

<!-- more -->

<h2 id="discussion">Discussion</h2>

<p>If one urgently needs to get the updated version of a particular
package, one may directly download the LZMA file.<sup id="fnref:pp1"><a href="#fn:pp1" class="footnote">1</a></sup>  Actually, the
remote package repositories are still <em>online</em>.  I guess the problem
is in Mik$\rm \TeX$ update tool.  Anyways, I am still grateful for the
effort of its developers.</p>

<h2 id="resolution">Resolution</h2>

<p>The easiest way is to sit there and <em>wait for a day</em>.  Then the
problem will be <em>gone</em>.  It is possible that some difficulties occur,
but they can be overcome.</p>

<picture class="fancybox" title="Windows API error 145">
  <source srcset="/images/posts/MikTeXUpdate2/api-err.png" media="(min-width: 460px)" />
  <img alt="Windows API error 145" width="300" src="https://vincenttam.github.io/images/posts/MikTeXUpdate2/api-err.png" />
</picture>

<p>{% include_code I clicked “Copy Info” and got this. lang:text miktex-update2/err-2016-02-22-22-00.txt %}</p>

<p>From <a href="/blog/2015/06/09/miktex-update/"><em>Mik$\rm \LaTeX$ Update</em></a>, I know that only the “Update
Mik$\rm \TeX$” in the menu triggered by clicking the small icon will
work.  The update wizard inside the big window for the package manager
<em>won’t</em>.</p>

<p>Sometimes, the chosen remote package repository can fail.  In this
case, just click the button and search for another one.</p>

<p>{% include_code An example of failed update. lang:text miktex-update2/update-2016-02-21-20-19.txt %}</p>

<h2 id="lessons-learnt">Lessons learnt</h2>

<p>When there’s nothing can be done, then one needs the mind of
non-action or non-being.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:pp1">

      <p>For example, the situation described in
<a href="/blog/2015/06/09/miktex-update/"><em>Mik$\rm \LaTeX$ Update</em></a>. <a href="#fnref:pp1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>
